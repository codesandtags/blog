{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"source/images/behavioral-questions.jpg","path":"images/behavioral-questions.jpg","modified":1,"renderable":0},{"_id":"source/images/faang-google-thumbnail.jpg","path":"images/faang-google-thumbnail.jpg","modified":1,"renderable":0},{"_id":"source/images/faang-thumbnail.jpg","path":"images/faang-thumbnail.jpg","modified":1,"renderable":0},{"_id":"source/images/favicon-16x16.png","path":"images/favicon-16x16.png","modified":1,"renderable":0},{"_id":"source/images/favicon-192x192.png","path":"images/favicon-192x192.png","modified":1,"renderable":0},{"_id":"source/images/favicon.ico","path":"images/favicon.ico","modified":1,"renderable":0},{"_id":"source/images/favicon-32x32.png","path":"images/favicon-32x32.png","modified":1,"renderable":0},{"_id":"source/images/working-at-google-leetcode-and-other-resources-hero.jpg","path":"images/working-at-google-leetcode-and-other-resources-hero.jpg","modified":1,"renderable":0},{"_id":"source/images/working-at-google-interview-process-hero.jpg","path":"images/working-at-google-interview-process-hero.jpg","modified":1,"renderable":0},{"_id":"source/images/working-at-google-preparation-plan-hero.jpg","path":"images/working-at-google-preparation-plan-hero.jpg","modified":1,"renderable":0},{"_id":"source/images/working-at-google-review-the-fundamentals-hero.jpg","path":"images/working-at-google-review-the-fundamentals-hero.jpg","modified":1,"renderable":0},{"_id":"source/images/working-at-google-study-google-specifc-topics-hero.jpg","path":"images/working-at-google-study-google-specifc-topics-hero.jpg","modified":1,"renderable":0},{"_id":"source/images/xfaang-google-thumbnail.jpg","path":"images/xfaang-google-thumbnail.jpg","modified":1,"renderable":0},{"_id":"source/images/books/cover-fundamentals-software-architecture.png","path":"images/books/cover-fundamentals-software-architecture.png","modified":1,"renderable":0},{"_id":"source/images/books/software-architecture-broker-topology-example.png","path":"images/books/software-architecture-broker-topology-example.png","modified":1,"renderable":0},{"_id":"source/images/books/software-architecture-characteristics-table.png","path":"images/books/software-architecture-characteristics-table.png","modified":1,"renderable":0},{"_id":"source/images/books/software-architecture-characteristics.png","path":"images/books/software-architecture-characteristics.png","modified":1,"renderable":0},{"_id":"source/images/books/software-architecture-component-levels.png","path":"images/books/software-architecture-component-levels.png","modified":1,"renderable":0},{"_id":"source/images/books/software-architecture-database-logical-partitioning.png","path":"images/books/software-architecture-database-logical-partitioning.png","modified":1,"renderable":0},{"_id":"source/images/books/software-architecture-explicit-implicit-characteristics.png","path":"images/books/software-architecture-explicit-implicit-characteristics.png","modified":1,"renderable":0},{"_id":"source/images/books/software-architecture-four-dimensions.png","path":"images/books/software-architecture-four-dimensions.png","modified":1,"renderable":0},{"_id":"source/images/books/software-architecture-knowledge-representation.png","path":"images/books/software-architecture-knowledge-representation.png","modified":1,"renderable":0},{"_id":"source/images/books/software-architecture-mediator-topology-example.png","path":"images/books/software-architecture-mediator-topology-example.png","modified":1,"renderable":0},{"_id":"source/images/books/software-architecture-styles.png","path":"images/books/software-architecture-styles.png","modified":1,"renderable":0},{"_id":"source/images/books/software-architecture-technical-and-domain-partioning.png","path":"images/books/software-architecture-technical-and-domain-partioning.png","modified":1,"renderable":0},{"_id":"source/images/books/software-architecture-traditional-approach.png","path":"images/books/software-architecture-traditional-approach.png","modified":1,"renderable":0},{"_id":"source/images/books/software-distributed-architectures.png","path":"images/books/software-distributed-architectures.png","modified":1,"renderable":0},{"_id":"source/images/books/software-event-driven-architecture-rating.png","path":"images/books/software-event-driven-architecture-rating.png","modified":1,"renderable":0},{"_id":"source/images/books/software-layered-architecture-rating.png","path":"images/books/software-layered-architecture-rating.png","modified":1,"renderable":0},{"_id":"source/images/books/software-microkernel-architecture-rating.png","path":"images/books/software-microkernel-architecture-rating.png","modified":1,"renderable":0},{"_id":"source/images/books/software-microservices-architecture-rating.png","path":"images/books/software-microservices-architecture-rating.png","modified":1,"renderable":0},{"_id":"source/images/books/software-orchestration-driven-service-oriented-architecture-rating.png","path":"images/books/software-orchestration-driven-service-oriented-architecture-rating.png","modified":1,"renderable":0},{"_id":"source/images/books/software-pipeline-architecture-rating.png","path":"images/books/software-pipeline-architecture-rating.png","modified":1,"renderable":0},{"_id":"source/images/books/software-service-based-architecture-rating.png","path":"images/books/software-service-based-architecture-rating.png","modified":1,"renderable":0},{"_id":"source/images/books/software-space-based-architecture-rating.png","path":"images/books/software-space-based-architecture-rating.png","modified":1,"renderable":0},{"_id":"source/images/books/software-tradeoffs-broker-topology.png","path":"images/books/software-tradeoffs-broker-topology.png","modified":1,"renderable":0},{"_id":"source/images/books/software-tradeoffs-event-driven-architecture.png","path":"images/books/software-tradeoffs-event-driven-architecture.png","modified":1,"renderable":0},{"_id":"source/images/books/software-tradeoffs-mediator-topology.png","path":"images/books/software-tradeoffs-mediator-topology.png","modified":1,"renderable":0},{"_id":"node_modules/hexo-theme-inside/source/3rdpartylicenses.txt","path":"3rdpartylicenses.txt","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-inside/source/polyfills.b7bf56fc45f931a8b83e.js","path":"polyfills.b7bf56fc45f931a8b83e.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-inside/source/main.543c891b4aad158701f3.js","path":"main.543c891b4aad158701f3.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-inside/source/runtime.1ed960b0635ea0669f87.js","path":"runtime.1ed960b0635ea0669f87.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-inside/source/theme.9ecc9ab1.js","path":"theme.9ecc9ab1.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-inside/source/styles.91e7dfca63c7c151daa6.css","path":"styles.91e7dfca63c7c151daa6.css","modified":1,"renderable":1}],"Cache":[{"_id":"source/about/index.md","hash":"001f07c1dc3cd36f6f983d066dc08b0293aa1399","modified":1689726527878},{"_id":"source/images/favicon-16x16.png","hash":"7cb20742f7b709d3fbe5f9abb5e1217a63adcab2","modified":1691029313857},{"_id":"source/images/favicon.ico","hash":"bc14a08e4f44875dde3c3c8336746cf7355ce8a9","modified":1691029313923},{"_id":"source/images/favicon-192x192.png","hash":"43db3b89f864f7862e266930107aa2c448019161","modified":1691029313910},{"_id":"source/images/favicon-32x32.png","hash":"6687c65a3712c9683d147967d79d473354a8dfbd","modified":1691029313885},{"_id":"source/_drafts/en/fundamentals-of-software-architecture-part-5.md","hash":"f1f175a0c5aad20d3e178d578a7c404236547776","modified":1691421460670},{"_id":"source/_posts/en/fundamentals-of-software-architecture-part-2.md","hash":"7660a6a0b5a2df9ad2fe2b988ed1cb396ef89aaa","modified":1697677014988},{"_id":"source/_posts/en/fundamentals-of-software-architecture-part-4.md","hash":"c0f130d6f20986853e3422bf673c67f37de00d99","modified":1697678894650},{"_id":"source/images/xfaang-google-thumbnail.jpg","hash":"3587836dc92c6f9a7146145237c81d0d77399709","modified":1689634030572},{"_id":"source/_posts/en/fundamentals-of-software-architecture-part-3.md","hash":"fe909707539a01f98b5f489b710c32b40d7ed170","modified":1691071213976},{"_id":"source/_posts/en/how-can-mock-interviews-help-you.md","hash":"e4e7e468f032e45e01646273e723c45d90ca7f2e","modified":1689634030536},{"_id":"source/_posts/en/fundamentals-of-software-architecture-part-1.md","hash":"e8fa44f440a2a34cb025441fe40ad587ae72e6c8","modified":1691422358334},{"_id":"source/_posts/en/how-to-succeed-behavioral-questions.md","hash":"4efec43ea7810a5c6787643f8755ad33b34d43e6","modified":1689634030536},{"_id":"source/_posts/en/working-at-google-interview-process.md","hash":"9cca81f02443c5ec7be29e9200c0301680d646e0","modified":1689634030536},{"_id":"source/_posts/en/working-at-google-leetcode-and-other-resources.md","hash":"f0db5a3f609cf6db30c91d953feae0c925bde4c7","modified":1689634030536},{"_id":"source/_posts/en/working-at-google-optimize-your-problem-solving.md","hash":"dbb1d07eb05b693b30a1f115f0cf8581befd00d1","modified":1689634030537},{"_id":"source/_posts/en/working-at-google-preparation-plan.md","hash":"1b65ddfbb287b4eafc6b5d069ed4f7e660406e59","modified":1689634030537},{"_id":"source/_posts/en/working-at-google-study-google-specifc-topics.md","hash":"db1ac03212a26b3ab01d313d72d6f76bfe7050c2","modified":1689634030537},{"_id":"source/_posts/en/working-at-google-review-the-fundamentals.md","hash":"8a0386ecbb2187e7c45b53fe9d077d023a745e17","modified":1689634030537},{"_id":"source/images/books/software-architecture-characteristics.png","hash":"b66bf0ebdaf1dcf9e0b9b47a0e1893c3478be91c","modified":1689802512797},{"_id":"source/images/books/software-architecture-explicit-implicit-characteristics.png","hash":"bcd5e47f4ac8136a881b282a839f8712729c352b","modified":1689802512775},{"_id":"source/images/books/software-architecture-knowledge-representation.png","hash":"a3f21194ba66fc1f7f3753a7f9ec1257c1d37ded","modified":1689800603832},{"_id":"source/images/books/software-architecture-broker-topology-example.png","hash":"60a6dd551f4f34110015773baf38258b904ea310","modified":1691432875933},{"_id":"source/images/books/software-architecture-database-logical-partitioning.png","hash":"c1dd81c3e9b0d0335906e798350d3c405c486ae7","modified":1691424408048},{"_id":"source/images/books/software-architecture-styles.png","hash":"b8e4071868f74b8cc82cb4679833d85f4efa05bb","modified":1691028958550},{"_id":"source/images/books/software-orchestration-driven-service-oriented-architecture-rating.png","hash":"a70329b6b02a8188a202474f01977d0110fa6ab3","modified":1691424786845},{"_id":"source/images/books/software-event-driven-architecture-rating.png","hash":"c9ca54d0927b2463a08b371f8fd07f0d71d6ac47","modified":1691424786894},{"_id":"source/images/books/software-layered-architecture-rating.png","hash":"7693654a62488b8c99637816d3e26c8f562a4053","modified":1691026952096},{"_id":"source/images/books/software-microservices-architecture-rating.png","hash":"45e205a8679a2a471926782f894dfcd00bc70e44","modified":1691424786809},{"_id":"source/images/books/software-microkernel-architecture-rating.png","hash":"d78fdef135d3ff8486ca5eb4b34a7cb7a2640fed","modified":1691029455242},{"_id":"source/images/books/software-service-based-architecture-rating.png","hash":"dc893ac6cc8078e6b83b2c71e99551d5b40c9113","modified":1691424786921},{"_id":"source/images/books/software-pipeline-architecture-rating.png","hash":"6c05f78a21e95b806efc4dd1c308073b71553fca","modified":1691027002128},{"_id":"source/images/books/software-space-based-architecture-rating.png","hash":"6b83e99ce384516de4afd377a001085cefced166","modified":1691424786874},{"_id":"source/images/faang-google-thumbnail.jpg","hash":"0bb66e4bb79ae0ae7902caa63311640030e60d8f","modified":1689634030543},{"_id":"source/images/faang-thumbnail.jpg","hash":"75a354c7c96ea65514780e5e70061ac982d60bd4","modified":1689634030544},{"_id":"source/images/books/software-architecture-characteristics-table.png","hash":"09b0455065b40f70e259bd5c866fba467c3c56b9","modified":1689970605544},{"_id":"source/images/books/software-architecture-mediator-topology-example.png","hash":"fb0fb0f727ccfb7c7f9c8bdd32d57de90c9f72e8","modified":1691432875899},{"_id":"source/images/books/software-architecture-technical-and-domain-partioning.png","hash":"f394f323dd686284efae570ea18128eaf60ba515","modified":1689973094496},{"_id":"source/images/books/software-distributed-architectures.png","hash":"63721992a6d7f3b50ece9ca079419c86e2138d45","modified":1691444211139},{"_id":"source/images/books/software-tradeoffs-event-driven-architecture.png","hash":"8bc61e20278fe921795b2b5ffc131f176d989eee","modified":1691443105234},{"_id":"source/images/books/software-tradeoffs-broker-topology.png","hash":"ba2ddd3932b1e7f83cd876a69ccb291a849a7825","modified":1691443105274},{"_id":"source/images/books/software-tradeoffs-mediator-topology.png","hash":"4663224bd994151199e806b9c15ea8eec7b767c3","modified":1691443105255},{"_id":"source/images/books/software-architecture-component-levels.png","hash":"4549eaa97337c2d7b1556d747dfb00677e54cd14","modified":1689973063860},{"_id":"source/images/books/software-architecture-traditional-approach.png","hash":"eb6b87dc3607cb134bfd58738df5a56f613c154b","modified":1689800324489},{"_id":"source/images/books/cover-fundamentals-software-architecture.png","hash":"0cdcaf8b7a3b0a46d703eccbd7c025ab7b633d3e","modified":1689636239581},{"_id":"source/images/working-at-google-leetcode-and-other-resources-hero.jpg","hash":"95a66f3ec14798d8ad23835f4c24f2cb3ff4ad61","modified":1689634030558},{"_id":"source/images/working-at-google-preparation-plan-hero.jpg","hash":"d8f4fd3f91d2c187ca9ba39480011ce20e1a4442","modified":1689634030562},{"_id":"source/images/books/software-architecture-four-dimensions.png","hash":"5e0238e57931596b0ee09f94e9eb8d14b85b0976","modified":1689635247151},{"_id":"node_modules/hexo-theme-inside/README.md","hash":"e646ba8a95ba31d088ca21e518bd59a0390ec588","modified":1693311008684},{"_id":"node_modules/hexo-theme-inside/_config.yml","hash":"fe3f71e89395398c71ac629d6351412fa33b2c48","modified":1693311008684},{"_id":"node_modules/hexo-theme-inside/package.json","hash":"4cb0c940e3a473cab8b1140ba2b74783057f455d","modified":1693311008679},{"_id":"node_modules/hexo-theme-inside/LICENSE","hash":"80e42bdfa4902549136f3a2445f16bff8ec46be8","modified":1693311008104},{"_id":"node_modules/hexo-theme-inside/README_zh-Hans.md","hash":"4fbdd86fba6988352422144ae917993bb68e82d9","modified":1693311008680},{"_id":"node_modules/hexo-theme-inside/lib/config.js","hash":"c1a36889230c0e744074e45a3ba5f1b551dc18c4","modified":1693311008659},{"_id":"node_modules/hexo-theme-inside/languages/en.yml","hash":"9cb7e597a23fc9e1cf10b4f283ccbc0ea97cbb20","modified":1693311008684},{"_id":"node_modules/hexo-theme-inside/languages/zh-Hans.yml","hash":"c19d12bc4326f7963c7a21b83bd4279213310bc2","modified":1693311008684},{"_id":"node_modules/hexo-theme-inside/languages/ja.yml","hash":"757de0ada468d30ff0b575981e3fc3b0c1d7a143","modified":1693311008684},{"_id":"node_modules/hexo-theme-inside/lib/configSchema.json","hash":"43f14fe0592685bedf493cfa1ae578548dbab99f","modified":1693311008679},{"_id":"node_modules/hexo-theme-inside/languages/zh-Hant.yml","hash":"e35078d3d5e6299178135aabdbb1b2a95252a42a","modified":1693311008684},{"_id":"node_modules/hexo-theme-inside/layout/index.njk","hash":"c9badf67c9048e1c46a4c6f232e33d33937342f0","modified":1693311008684},{"_id":"node_modules/hexo-theme-inside/lib/utils.js","hash":"59cb0cf6828efa2c7229564292c9e139c9f10080","modified":1693311008676},{"_id":"node_modules/hexo-theme-inside/scripts/index.js","hash":"2163e057444c2e5e3b786d28500e9cc5467e3c6b","modified":1693311008659},{"_id":"node_modules/hexo-theme-inside/source/3rdpartylicenses.txt","hash":"1b7039121dbb0d2772eb0bfe827e029a144caef7","modified":1693311008684},{"_id":"node_modules/hexo-theme-inside/source/_manifest.json","hash":"da1182fcbe3cdfd9c1a031187b03208f088c89ac","modified":1693311008676},{"_id":"node_modules/hexo-theme-inside/source/runtime.1ed960b0635ea0669f87.js","hash":"1a23d8cab7062a7fae5ed6184d88f6b37c77516b","modified":1693311008674},{"_id":"node_modules/hexo-theme-inside/source/theme.9ecc9ab1.js","hash":"c8ddb3e8d21e4591fd8d3c8c002234183deb49a0","modified":1693311008676},{"_id":"node_modules/hexo-theme-inside/source/polyfills.b7bf56fc45f931a8b83e.js","hash":"4f742c8c6f028dc25a8a020f6909128b03cfda48","modified":1693311008674},{"_id":"node_modules/hexo-theme-inside/lib/filter/post.js","hash":"23f17c0964fbe649a2b7ed1030755cc81455eadf","modified":1693311008674},{"_id":"node_modules/hexo-theme-inside/source/styles.91e7dfca63c7c151daa6.css","hash":"be513488e892c07b5734dd0a095d0c4fc4c7804b","modified":1693311008138},{"_id":"node_modules/hexo-theme-inside/lib/filter/ssr.js","hash":"ed3786805f1be7a791efd7185e25ea41e7322d5e","modified":1693311008674},{"_id":"node_modules/hexo-theme-inside/lib/filter/index.js","hash":"ab87beb03adc8f8f273d59dd4403c4da8268ef83","modified":1693311008659},{"_id":"node_modules/hexo-theme-inside/lib/filter/templates.js","hash":"86b31cec8512f37824dc4b18c89d0cf7b5987de5","modified":1693311008675},{"_id":"node_modules/hexo-theme-inside/lib/generator/config.js","hash":"495d9dee09f186e7ebe96cee18732e0a59b6d0a9","modified":1693311008659},{"_id":"node_modules/hexo-theme-inside/lib/generator/manifest.js","hash":"e6eb7d3353fb1e13218535a3987cd31d569fc5bd","modified":1693311008669},{"_id":"node_modules/hexo-theme-inside/lib/generator/sw.js","hash":"216cc78d48e0dd3d0cff374c49bdc8e83b2ecd62","modified":1693311008675},{"_id":"node_modules/hexo-theme-inside/lib/generator/index.js","hash":"31cb0d3cf08b65deb78e7a02110b6424d1fe2f04","modified":1693311008659},{"_id":"node_modules/hexo-theme-inside/lib/helper/ga.js","hash":"adc62bd06443a781d6046d3e78aa57b5e4291611","modified":1693311008660},{"_id":"node_modules/hexo-theme-inside/lib/generator/sitemap.js","hash":"7939aac2e0d38ec342c0c289b37aed42262e86f2","modified":1693311008674},{"_id":"node_modules/hexo-theme-inside/lib/helper/url_trim.js","hash":"a88302c028d2667d9336b72b50e0590e0b2edcd1","modified":1693311008675},{"_id":"node_modules/hexo-theme-inside/lib/helper/index.js","hash":"93fbe9d8fe364cf4e2e55cc3d4d3156dde028f56","modified":1693311008659},{"_id":"node_modules/hexo-theme-inside/lib/helper/structured_data.js","hash":"682cfb827880ccfe5a972bb326ab4691cd8c470d","modified":1693311008674},{"_id":"node_modules/hexo-theme-inside/lib/tag/index.js","hash":"bf75dd670a1d6ffffbacb183b406235780d680c6","modified":1693311008660},{"_id":"node_modules/hexo-theme-inside/lib/plugins/cipher.js","hash":"ebf9e166e856980e27c1e8203e0a8dcf6ec3b69a","modified":1693311008658},{"_id":"node_modules/hexo-theme-inside/lib/plugins/disqus.js","hash":"363b194bf1441a40890ecc264622f4730a2a943b","modified":1693311008659},{"_id":"node_modules/hexo-theme-inside/lib/tag/gist.js","hash":"4bedda6e6c07e2eeac3a3fc97617181287d77d34","modified":1693311008659},{"_id":"node_modules/hexo-theme-inside/lib/plugins/palette.js","hash":"29430b1146a30fa44406995d244a749cd8a77856","modified":1693311008669},{"_id":"node_modules/hexo-theme-inside/lib/plugins/manifest.json","hash":"65717c8073e334628d9c2821e848b47d2bac7919","modified":1693311008679},{"_id":"node_modules/hexo-theme-inside/lib/tag/canvas.js","hash":"24c02f85506c1f412a3386d14f1ceb074e4864e2","modified":1693311008653},{"_id":"node_modules/hexo-theme-inside/lib/generator/entries/pages.js","hash":"26b314ba0df5acf8b18a152811441b58a69201d0","modified":1693311008669},{"_id":"node_modules/hexo-theme-inside/lib/generator/entries/index.js","hash":"9bac29a0223eaf7f3aa69b04502fc049969ae78b","modified":1693311008660},{"_id":"node_modules/hexo-theme-inside/lib/renderer/index.js","hash":"c35a04ff425742ad9768f8942a8b3fcb00202ede","modified":1693311008661},{"_id":"node_modules/hexo-theme-inside/lib/generator/entries/archives.js","hash":"b9c2e6ead1d280d8a2a4db4676b46b2fdf92ccb0","modified":1693311008652},{"_id":"node_modules/hexo-theme-inside/lib/generator/entries/categories.js","hash":"276dfc2d9e010a9f3815d76571a60ddcdb04b1fe","modified":1693311008653},{"_id":"node_modules/hexo-theme-inside/lib/generator/entries/search.js","hash":"d874785d284e1b8d18dbcb5358888e522b45988a","modified":1693311008676},{"_id":"node_modules/hexo-theme-inside/lib/generator/entries/posts.js","hash":"cf7cb8b58714b457a028b14c92958127839aba26","modified":1693311008674},{"_id":"node_modules/hexo-theme-inside/lib/renderer/markdown/index.js","hash":"cbad561e5fbaa126afcb7df990900afa4fc652ee","modified":1693311008659},{"_id":"node_modules/hexo-theme-inside/lib/generator/entries/properties.js","hash":"bb306150254015f9bf6f9e58340eb521231a7e55","modified":1693311008674},{"_id":"node_modules/hexo-theme-inside/lib/generator/entries/tags.js","hash":"2a10e4c4d9c92e0ac26b3884511f12472d43898f","modified":1693311008674},{"_id":"node_modules/hexo-theme-inside/lib/renderer/markdown/mixins.js","hash":"e1377839483f2e6dacf5f158bc29d21e5093f27a","modified":1693311008669},{"_id":"node_modules/hexo-theme-inside/lib/renderer/markdown/plugins/collapse.js","hash":"eda5c79868f2aac2a2d5f82fe8a483c88f0a43da","modified":1693311008658},{"_id":"node_modules/hexo-theme-inside/lib/renderer/markdown/plugins/index.js","hash":"6d185c7c171606907e663b0ab99a9bcafeef9783","modified":1693311008659},{"_id":"node_modules/hexo-theme-inside/lib/renderer/markdown/plugins/tree.js","hash":"f7f30e3a1a5d29864f42b693f7a4a6c0a7fb05c2","modified":1693311008675},{"_id":"node_modules/hexo-theme-inside/lib/renderer/markdown/plugins/timeline.js","hash":"16ffd617d146d672847a566a94e88aece0b642ea","modified":1693311008675},{"_id":"source/images/working-at-google-review-the-fundamentals-hero.jpg","hash":"761ca5ff3fa14c5837c2a4120331668c191a00d4","modified":1689634030567},{"_id":"source/images/working-at-google-study-google-specifc-topics-hero.jpg","hash":"65a6dcc862b3e9a62f6305c4f60a83e049aa0d11","modified":1689634030571},{"_id":"source/images/behavioral-questions.jpg","hash":"f38849e9011ce0e756fc02e20663e4ed65c9c12e","modified":1689634030542},{"_id":"source/images/working-at-google-interview-process-hero.jpg","hash":"10e2a99fb435d5a9bfec7ceab8341fafb832fb8a","modified":1689634030553},{"_id":"node_modules/hexo-theme-inside/source/main.543c891b4aad158701f3.js","hash":"9d0edfa9c6b5f269f1c2c5d622e23ec6dbd8141c","modified":1693311008669},{"_id":"node_modules/hexo-theme-inside/source/_ssr.js","hash":"cdc036e56f497b4d2f933bc5fc19d61564e36beb","modified":1693311008652},{"_id":"public/config.5e6898fe6bd7df80cf78.js","hash":"ad442821dc6c91c9321e3f12fe83021996e24299","modified":1697678937696},{"_id":"public/api/YWJvdXQ.json","hash":"7128b34501ef3ff26794b9666f2ed932e29227ec","modified":1697678937696},{"_id":"public/api/MjAyMy8wOC8wNy9lbi9mdW5kYW1lbnRhbHMtb2Ytc29mdHdhcmUtYXJjaGl0ZWN0dXJlLXBhcnQtNA.json","hash":"3904c1957aebc9aa5eec38781a4ac7d39a880cc8","modified":1697678937696},{"_id":"public/api/MjAyMy8wOC8wMi9lbi9mdW5kYW1lbnRhbHMtb2Ytc29mdHdhcmUtYXJjaGl0ZWN0dXJlLXBhcnQtMw.json","hash":"ac909ac3020ec1c5c928587436a5833c803a966e","modified":1697678937696},{"_id":"public/api/MjAyMy8wNy8yMS9lbi9mdW5kYW1lbnRhbHMtb2Ytc29mdHdhcmUtYXJjaGl0ZWN0dXJlLXBhcnQtMg.json","hash":"b6941447627b64d072750aa311cc2481739add0b","modified":1697678937696},{"_id":"public/api/MjAyMy8wNy8xNy9lbi9mdW5kYW1lbnRhbHMtb2Ytc29mdHdhcmUtYXJjaGl0ZWN0dXJlLXBhcnQtMQ.json","hash":"5e1f55808c6380ce22425c43931fa9a9d40e6ce2","modified":1697678937696},{"_id":"public/api/MjAyMy8wMy8yOC9lbi9ob3ctY2FuLW1vY2staW50ZXJ2aWV3cy1oZWxwLXlvdQ.json","hash":"b06143dd09119d9ebb34729a402b88201d6d0d9d","modified":1697678937696},{"_id":"public/api/MjAyMy8wMy8yNi9lbi9ob3ctdG8tc3VjY2VlZC1iZWhhdmlvcmFsLXF1ZXN0aW9ucw.json","hash":"668c9101ae06d0f4d90e9d7fc6d595d7d6e3c087","modified":1697678937696},{"_id":"public/api/MjAyMy8wMy8yNi9lbi93b3JraW5nLWF0LWdvb2dsZS1vcHRpbWl6ZS15b3VyLXByb2JsZW0tc29sdmluZw.json","hash":"de96d25fe3fb76ca0fc01555b92700f47506d174","modified":1697678937696},{"_id":"public/api/MjAyMy8wMy8yNS9lbi93b3JraW5nLWF0LWdvb2dsZS1sZWV0Y29kZS1hbmQtb3RoZXItcmVzb3VyY2Vz.json","hash":"e0531ded797d9ba6fd37254d0253f5918b30fb76","modified":1697678937696},{"_id":"public/api/MjAyMy8wMy8yNS9lbi93b3JraW5nLWF0LWdvb2dsZS1zdHVkeS1nb29nbGUtc3BlY2lmYy10b3BpY3M.json","hash":"2f6618bc293889ec6dd8df0e63d536dff31f58af","modified":1697678937696},{"_id":"public/api/MjAyMy8wMy8yNS9lbi93b3JraW5nLWF0LWdvb2dsZS1yZXZpZXctdGhlLWZ1bmRhbWVudGFscw.json","hash":"5e6dc814a8467a73635bb988f0bbf45bd09d3291","modified":1697678937696},{"_id":"public/api/MjAyMy8wMy8yNS9lbi93b3JraW5nLWF0LWdvb2dsZS1pbnRlcnZpZXctcHJvY2Vzcw.json","hash":"625003c5be3c2cd6e8a1e591eb829460961462ef","modified":1697678937696},{"_id":"public/api/MjAyMy8wMy8yNS9lbi93b3JraW5nLWF0LWdvb2dsZS1wcmVwYXJhdGlvbi1wbGFu.json","hash":"4d61821e49d79686ae4252fd8a03a498ca8a4f25","modified":1697678937696},{"_id":"public/api/cGFnZQ.json","hash":"b54438680eda4e80fc66bf64c283722d6aa7881d","modified":1697678937696},{"_id":"public/api/cGFnZS8y.json","hash":"dd2be8bb43dd7bbfdd933c22aa0a92938deb0a16","modified":1697678937696},{"_id":"public/api/dGFncw.json","hash":"a589694bbc5415c2506bdd263b4f483f26fd8950","modified":1697678937696},{"_id":"public/api/dGFncy9ib29rcw.json","hash":"e705de918f1ba7bd8013667bf25a6aaa04a70510","modified":1697678937696},{"_id":"public/api/dGFncy9nb29nbGU.json","hash":"be328665d9d9917ac03e5313ff836a97d740686c","modified":1697678937696},{"_id":"public/api/dGFncy9pbnRlcnZpZXc.json","hash":"c75cdb6a50bc3256898d3f19b95d17be9872ae60","modified":1697678937696},{"_id":"public/api/dGFncy9sZWV0Y29kZQ.json","hash":"4e9be48eb60a5b2a172cac934fd3bd8ea8c6070a","modified":1697678937696},{"_id":"public/api/dGFncy9zb2Z0d2FyZQ.json","hash":"ebdf9486fce67fe3588aa443706accfe47071a37","modified":1697678937696},{"_id":"public/api/dGFncy9zb2Z0d2FyZS1hcmNoaXRlY3R1cmU.json","hash":"86982d8f8396f180cb8f461e8fd016a2841f27e4","modified":1697678937696},{"_id":"public/api/Y2F0ZWdvcmllcw.json","hash":"1b81a46a0852df51af4ffc50cb2f2d74a0905181","modified":1697678937696},{"_id":"public/api/Y2F0ZWdvcmllcy9GQUFORw.json","hash":"b661cd8d3aa7d372118214e83477ab6434f28530","modified":1697678937696},{"_id":"public/api/Y2F0ZWdvcmllcy9Tb2Z0d2FyZSBBcmNoaXRlY3R1cmU.json","hash":"dfcea649c693eb1d3b1ae92b7f13ef3186646c5e","modified":1697678937696},{"_id":"public/api/YXJjaGl2ZXM.json","hash":"8451deab1959e428d5dc6a36d3f96a02887e9238","modified":1697678937696},{"_id":"public/api/YXJjaGl2ZXMvMg.json","hash":"9d501fd5fba5f4a45ab6e4613d3bb24f7934ffae","modified":1697678937696},{"_id":"public/api/c2VhcmNo.json","hash":"225ae34ef70bb36da5cf28056cf771020f1a3630","modified":1697678937696},{"_id":"public/sitemap.xml","hash":"0ce43d78a98941ec3737dd0f87c3510a90e362e7","modified":1697678937696},{"_id":"public/about/index.html","hash":"9ef547b53e10ccd6fab9773b4444b71589fe17f4","modified":1697678937696},{"_id":"public/404/index.html","hash":"4f62bffcd8b04de5b0f1f8de9b1beee9c2a9e300","modified":1697678937696},{"_id":"public/2023/08/07/en/fundamentals-of-software-architecture-part-4/index.html","hash":"ad99b9481beaf743a211b14e5b15b8003e1d3a71","modified":1697678937696},{"_id":"public/2023/08/02/en/fundamentals-of-software-architecture-part-3/index.html","hash":"c5df0d2d4f7c724a492039425f9b2e18dd50d23d","modified":1697678937696},{"_id":"public/2023/07/21/en/fundamentals-of-software-architecture-part-2/index.html","hash":"4c95bb448233dbb5b7a29b6297b680a6e70338b3","modified":1697678937696},{"_id":"public/2023/07/17/en/fundamentals-of-software-architecture-part-1/index.html","hash":"97acd2628aecd3f2019ff2f095aaa1f08eb1ce27","modified":1697678937696},{"_id":"public/2023/03/28/en/how-can-mock-interviews-help-you/index.html","hash":"b6fd4dd60dfa3d1dc13feb30c4b2930535ebced2","modified":1697678937696},{"_id":"public/2023/03/26/en/how-to-succeed-behavioral-questions/index.html","hash":"dd26687ec598782809c5f5d72ba875f7044050c1","modified":1697678937696},{"_id":"public/2023/03/26/en/working-at-google-optimize-your-problem-solving/index.html","hash":"a90e8db9b66ad754cab7da4dea91f59eb3dab417","modified":1697678937696},{"_id":"public/2023/03/25/en/working-at-google-leetcode-and-other-resources/index.html","hash":"91fd584dc54f02f484141fde86ceca99514c25da","modified":1697678937696},{"_id":"public/2023/03/25/en/working-at-google-study-google-specifc-topics/index.html","hash":"e2ed5b82e07102b9061d85ca1a3e0c4233b638dd","modified":1697678937696},{"_id":"public/2023/03/25/en/working-at-google-review-the-fundamentals/index.html","hash":"068becdef0871291852c66495cf34433c9375034","modified":1697678937696},{"_id":"public/2023/03/25/en/working-at-google-interview-process/index.html","hash":"0f9c507c75dc9f5a36329b94942d11fbdc274804","modified":1697678937696},{"_id":"public/2023/03/25/en/working-at-google-preparation-plan/index.html","hash":"de1313fcc3c250a30368ee37558f4329a7cd8140","modified":1697678937696},{"_id":"public/index.html","hash":"835a0b0374d37c7425066b024ba5d05aa829eca0","modified":1697678937696},{"_id":"public/tags/index.html","hash":"8622ba4152367b6dea1fda217729ab1ccf27f855","modified":1697678937696},{"_id":"public/page/2/index.html","hash":"f5ed73ff2732858a887642524ad6e91d9b20a227","modified":1697678937696},{"_id":"public/tags/books/index.html","hash":"5094e030a9f85cfce7b63c411ec639cf97ee78f9","modified":1697678937696},{"_id":"public/tags/google/index.html","hash":"8136f7a4247fb33efd78a8a69928f24379a4b692","modified":1697678937696},{"_id":"public/tags/interview/index.html","hash":"f7ecd6a879cc81a2f6871c534319116cab0989de","modified":1697678937696},{"_id":"public/tags/leetcode/index.html","hash":"1255d5ded9009a6c1d2cb93a311bba2d2e6ce895","modified":1697678937696},{"_id":"public/tags/software/index.html","hash":"8bb2980a62b336458bfaf42ad293675171c70d4e","modified":1697678937696},{"_id":"public/tags/software-architecture/index.html","hash":"2351fa6c9e943b3f3d441de0e85fab81da59be4e","modified":1697678937696},{"_id":"public/categories/index.html","hash":"7651b91c49ff5c01cc77562c4604ace612df5a26","modified":1697678937696},{"_id":"public/categories/FAANG/index.html","hash":"39b3505ffdf1299780a059c72ef80f418d4126b3","modified":1697678937696},{"_id":"public/categories/Software Architecture/index.html","hash":"7d0dc5e9e43e2c5c68b1ce88005c8c4aa0bc05f2","modified":1697678937696},{"_id":"public/archives/index.html","hash":"4465feea91dbd3919aaea39d56a071815db1fe99","modified":1697678937696},{"_id":"public/archives/2/index.html","hash":"acb5db1bb0c05ca2d856b5bfebcae5a430b8348f","modified":1697678937696},{"_id":"public/search/index.html","hash":"7e069f47a8d1e82859c44e10c92417d3d8397fc0","modified":1697678937696},{"_id":"public/images/favicon-16x16.png","hash":"7cb20742f7b709d3fbe5f9abb5e1217a63adcab2","modified":1697678937696},{"_id":"public/images/favicon-192x192.png","hash":"43db3b89f864f7862e266930107aa2c448019161","modified":1697678937696},{"_id":"public/images/favicon.ico","hash":"bc14a08e4f44875dde3c3c8336746cf7355ce8a9","modified":1697678937696},{"_id":"public/images/favicon-32x32.png","hash":"6687c65a3712c9683d147967d79d473354a8dfbd","modified":1697678937696},{"_id":"public/images/xfaang-google-thumbnail.jpg","hash":"3587836dc92c6f9a7146145237c81d0d77399709","modified":1697678937696},{"_id":"public/images/books/software-architecture-characteristics.png","hash":"b66bf0ebdaf1dcf9e0b9b47a0e1893c3478be91c","modified":1697678937696},{"_id":"public/images/books/software-architecture-explicit-implicit-characteristics.png","hash":"bcd5e47f4ac8136a881b282a839f8712729c352b","modified":1697678937696},{"_id":"public/images/books/software-architecture-knowledge-representation.png","hash":"a3f21194ba66fc1f7f3753a7f9ec1257c1d37ded","modified":1697678937696},{"_id":"public/3rdpartylicenses.txt","hash":"1b7039121dbb0d2772eb0bfe827e029a144caef7","modified":1697678937696},{"_id":"public/images/books/software-architecture-broker-topology-example.png","hash":"60a6dd551f4f34110015773baf38258b904ea310","modified":1697678937696},{"_id":"public/images/books/software-architecture-database-logical-partitioning.png","hash":"c1dd81c3e9b0d0335906e798350d3c405c486ae7","modified":1697678937696},{"_id":"public/images/books/software-architecture-styles.png","hash":"b8e4071868f74b8cc82cb4679833d85f4efa05bb","modified":1697678937696},{"_id":"public/images/books/software-event-driven-architecture-rating.png","hash":"c9ca54d0927b2463a08b371f8fd07f0d71d6ac47","modified":1697678937696},{"_id":"public/images/books/software-layered-architecture-rating.png","hash":"7693654a62488b8c99637816d3e26c8f562a4053","modified":1697678937696},{"_id":"public/images/books/software-microkernel-architecture-rating.png","hash":"d78fdef135d3ff8486ca5eb4b34a7cb7a2640fed","modified":1697678937696},{"_id":"public/images/books/software-microservices-architecture-rating.png","hash":"45e205a8679a2a471926782f894dfcd00bc70e44","modified":1697678937696},{"_id":"public/images/books/software-orchestration-driven-service-oriented-architecture-rating.png","hash":"a70329b6b02a8188a202474f01977d0110fa6ab3","modified":1697678937696},{"_id":"public/images/books/software-pipeline-architecture-rating.png","hash":"6c05f78a21e95b806efc4dd1c308073b71553fca","modified":1697678937696},{"_id":"public/images/books/software-service-based-architecture-rating.png","hash":"dc893ac6cc8078e6b83b2c71e99551d5b40c9113","modified":1697678937696},{"_id":"public/images/books/software-space-based-architecture-rating.png","hash":"6b83e99ce384516de4afd377a001085cefced166","modified":1697678937696},{"_id":"public/runtime.1ed960b0635ea0669f87.js","hash":"1a23d8cab7062a7fae5ed6184d88f6b37c77516b","modified":1697678937696},{"_id":"public/theme.9ecc9ab1.js","hash":"c8ddb3e8d21e4591fd8d3c8c002234183deb49a0","modified":1697678937696},{"_id":"public/polyfills.b7bf56fc45f931a8b83e.js","hash":"4f742c8c6f028dc25a8a020f6909128b03cfda48","modified":1697678937696},{"_id":"public/main.543c891b4aad158701f3.js","hash":"9d0edfa9c6b5f269f1c2c5d622e23ec6dbd8141c","modified":1697678937696},{"_id":"public/styles.91e7dfca63c7c151daa6.css","hash":"be513488e892c07b5734dd0a095d0c4fc4c7804b","modified":1697678937696},{"_id":"public/images/faang-google-thumbnail.jpg","hash":"0bb66e4bb79ae0ae7902caa63311640030e60d8f","modified":1697678937696},{"_id":"public/images/faang-thumbnail.jpg","hash":"75a354c7c96ea65514780e5e70061ac982d60bd4","modified":1697678937696},{"_id":"public/images/books/software-architecture-characteristics-table.png","hash":"09b0455065b40f70e259bd5c866fba467c3c56b9","modified":1697678937696},{"_id":"public/images/books/software-architecture-mediator-topology-example.png","hash":"fb0fb0f727ccfb7c7f9c8bdd32d57de90c9f72e8","modified":1697678937696},{"_id":"public/images/books/software-architecture-technical-and-domain-partioning.png","hash":"f394f323dd686284efae570ea18128eaf60ba515","modified":1697678937696},{"_id":"public/images/books/software-distributed-architectures.png","hash":"63721992a6d7f3b50ece9ca079419c86e2138d45","modified":1697678937696},{"_id":"public/images/books/software-tradeoffs-event-driven-architecture.png","hash":"8bc61e20278fe921795b2b5ffc131f176d989eee","modified":1697678937696},{"_id":"public/images/books/software-tradeoffs-broker-topology.png","hash":"ba2ddd3932b1e7f83cd876a69ccb291a849a7825","modified":1697678937696},{"_id":"public/images/books/software-tradeoffs-mediator-topology.png","hash":"4663224bd994151199e806b9c15ea8eec7b767c3","modified":1697678937696},{"_id":"public/images/books/software-architecture-component-levels.png","hash":"4549eaa97337c2d7b1556d747dfb00677e54cd14","modified":1697678937696},{"_id":"public/images/books/software-architecture-traditional-approach.png","hash":"eb6b87dc3607cb134bfd58738df5a56f613c154b","modified":1697678937696},{"_id":"public/images/books/cover-fundamentals-software-architecture.png","hash":"0cdcaf8b7a3b0a46d703eccbd7c025ab7b633d3e","modified":1697678937696},{"_id":"public/images/working-at-google-leetcode-and-other-resources-hero.jpg","hash":"95a66f3ec14798d8ad23835f4c24f2cb3ff4ad61","modified":1697678937696},{"_id":"public/images/working-at-google-preparation-plan-hero.jpg","hash":"d8f4fd3f91d2c187ca9ba39480011ce20e1a4442","modified":1697678937696},{"_id":"public/images/books/software-architecture-four-dimensions.png","hash":"5e0238e57931596b0ee09f94e9eb8d14b85b0976","modified":1697678937696},{"_id":"public/images/working-at-google-review-the-fundamentals-hero.jpg","hash":"761ca5ff3fa14c5837c2a4120331668c191a00d4","modified":1697678937696},{"_id":"public/images/working-at-google-study-google-specifc-topics-hero.jpg","hash":"65a6dcc862b3e9a62f6305c4f60a83e049aa0d11","modified":1697678937696},{"_id":"public/images/behavioral-questions.jpg","hash":"f38849e9011ce0e756fc02e20663e4ed65c9c12e","modified":1697678937696},{"_id":"public/images/working-at-google-interview-process-hero.jpg","hash":"10e2a99fb435d5a9bfec7ceab8341fafb832fb8a","modified":1697678937696}],"Category":[{"name":"Software Architecture","_id":"clnwi7gap0003qbt2fzswhnek"},{"name":"FAANG","_id":"clnwi7gb1000kqbt27ktg848m"}],"Data":[],"Page":[{"title":"👋 Hello","date":"2023-07-18T23:54:24.000Z","author":"codesandtags","_content":"\n<div style=\"width:100%; text-align:center\">\n  <img src=\"https://media.licdn.com/dms/image/C5603AQGPHNBZbhb3uA/profile-displayphoto-shrink_400_400/0/1654718787328?e=1695254400&v=beta&t=kb7cjNa7i5DfpIPT27slp5KjrbzsIlPWlbjY2MS2uDA\" style=\"width:150px;border-radius:50%;\"/>\n</div>\n\nI'm [Edwin Torres](https://www.linkedin.com/in/edwintorresdeveloper/), a human passionate by learning new stuffs, help others and I'm in love by the Front end Development, cool visual stuffs, and soon Machine Learning. One of my biggest purpose in life is to create a change in the world by helping people in the things I'm good, that's why I keep continue learning everyday to be a better professional and person.\n\n[Codes and Tags](https://codesandtags.org) is my personal project where I have fun, learn and share things with the world.\n","source":"about/index.md","raw":"---\ntitle: 👋 Hello\ndate: 2023-07-18 19:54:24\nauthor: codesandtags\n---\n\n<div style=\"width:100%; text-align:center\">\n  <img src=\"https://media.licdn.com/dms/image/C5603AQGPHNBZbhb3uA/profile-displayphoto-shrink_400_400/0/1654718787328?e=1695254400&v=beta&t=kb7cjNa7i5DfpIPT27slp5KjrbzsIlPWlbjY2MS2uDA\" style=\"width:150px;border-radius:50%;\"/>\n</div>\n\nI'm [Edwin Torres](https://www.linkedin.com/in/edwintorresdeveloper/), a human passionate by learning new stuffs, help others and I'm in love by the Front end Development, cool visual stuffs, and soon Machine Learning. One of my biggest purpose in life is to create a change in the world by helping people in the things I'm good, that's why I keep continue learning everyday to be a better professional and person.\n\n[Codes and Tags](https://codesandtags.org) is my personal project where I have fun, learn and share things with the world.\n","updated":"2023-07-19T00:28:47.878Z","path":"about/index.html","comments":0,"layout":"page","_id":"clnwi7gag0000qbt2g9sv2x80","content":"<div style=\"width:100%; text-align:center\">\n  <img src=\"https://media.licdn.com/dms/image/C5603AQGPHNBZbhb3uA/profile-displayphoto-shrink_400_400/0/1654718787328?e=1695254400&v=beta&t=kb7cjNa7i5DfpIPT27slp5KjrbzsIlPWlbjY2MS2uDA\" style=\"width:150px;border-radius:50%;\"/>\n</div>\n<p>I’m <a href=\"https://www.linkedin.com/in/edwintorresdeveloper/\" target=\"_blank\">Edwin Torres</a>, a human passionate by learning new stuffs, help others and I’m in love by the Front end Development, cool visual stuffs, and soon Machine Learning. One of my biggest purpose in life is to create a change in the world by helping people in the things I’m good, that’s why I keep continue learning everyday to be a better professional and person.</p>\n<p><a href=\"https://codesandtags.org\" target=\"_blank\">Codes and Tags</a> is my personal project where I have fun, learn and share things with the world.</p>\n","site":{"data":{}},"excerpt":"","more":"<div style=\"width:100%; text-align:center\">\n  <img src=\"https://media.licdn.com/dms/image/C5603AQGPHNBZbhb3uA/profile-displayphoto-shrink_400_400/0/1654718787328?e=1695254400&v=beta&t=kb7cjNa7i5DfpIPT27slp5KjrbzsIlPWlbjY2MS2uDA\" style=\"width:150px;border-radius:50%;\"/>\n</div>\n<p>I’m <a href=\"https://www.linkedin.com/in/edwintorresdeveloper/\" target=\"_blank\">Edwin Torres</a>, a human passionate by learning new stuffs, help others and I’m in love by the Front end Development, cool visual stuffs, and soon Machine Learning. One of my biggest purpose in life is to create a change in the world by helping people in the things I’m good, that’s why I keep continue learning everyday to be a better professional and person.</p>\n<p><a href=\"https://codesandtags.org\" target=\"_blank\">Codes and Tags</a> is my personal project where I have fun, learn and share things with the world.</p>\n","date_formatted":{"ll":"Jul 18, 2023","L":"07/18/2023","MM-DD":"07-18"},"link":"about","plink":"http://codesandtags.io/blog/about/","type":"page","reading_time":"105 words in 1 min"}],"Post":[{"title":"Fundamentals of Software Architecture Book - Part 5","author":"codesandtags","date":"2023-08-12T22:43:27.000Z","thumbnail":"images/books/cover-fundamentals-software-architecture.png","excerpt":"Here I have the relevant points to me of the book Fundamentals of Software Architecture by Mark Richards and Neal Ford. This part is focused on Architecture decisions.","_content":"\n## Fundamentals of Software Architecture\n\n### Book Details\n\n- **Title**: [Fundamentals of Software Architecture](https://www.oreilly.com/library/view/fundamentals-of-software/9781492043447/)\n- **Author**: Mark Richards, Neal Ford\n- **Publication Year**: 2020\n\n### Summary\n\nThis book is a great introduction to software architecture, it covers the basics of software architecture, and it's a great starting point for anyone who wants to learn more about software architecture. Here are some of the topics covered in this book and I want to answer the self-assessment questions for each chapter.\n\n---\n\n## Chapter 13: Service-Based Architecture\n\nHow many services are there in a typical service-based architecture?\n\n🤓 ...\n\nDo you have to break apart a database in service-based architecture?\n\n🤓 ...\n\nUnder what circumstances might you want to break apart a database?\n\n🤓 ...\n\nWhat technique can you use to manage database changes within a service-based architecture?\n\n🤓 ...\n\nDo domain services require a container (such as Docker) to run?\n\n🤓 ...\n\nWhich architecture characteristics are well supported by the service-based architecture style?\n\n🤓 ...\n\nWhy isn’t elasticity well supported in a service-based architecture?\n\n🤓 ...\n\nHow can you increase the number of architecture quanta in a service-based architecture?\n\n🤓 ...\n\n---\n\n## Chapter 14: Event-Driven Architecture Style\n\nWhat are the primary differences between the broker and mediator topologies?\n\n🤓 ...\n\nFor better workflow control, would you use the mediator or broker topology?\n\n🤓 ...\n\nDoes the broker topology usually leverage a publish-and-subscribe model with topics or a point-to-point model with queues?\n\n🤓 ...\n\nName two primary advantage of asynchronous communications.\n\n🤓 ...\n\nGive an example of a typical request within the request-based model.\n\n🤓 ...\n\nGive an example of a typical request in an event-based model.\n\n🤓 ...\n\nWhat is the difference between an initiating event and a processing event in event-driven architecture?\n\n🤓 ...\n\nWhat are some of the techniques for preventing data loss when sending and receiving messages from a queue?\n\n🤓 ...\n\nWhat are three main driving architecture characteristics for using event-driven architecture?\n\n🤓 ...\n\nWhat are some of the architecture characteristics that are not well supported in event-driven architecture?\n\n🤓 ...\n\n---\n\n## Chapter 15: Space-Based Architecture\n\nWhere does space-based architecture get its name from?\n\nWhat is a primary aspect of space-based architecture that differentiates it from other architecture styles?\n\nName the four components that make up the virtualized middleware within a space-based architecture.\n\nWhat is the role of the messaging grid?\n\nWhat is the role of a data writer in space-based architecture?\n\nUnder what conditions would a service need to access data through the data reader?\n\nDoes a small cache size increase or decrease the chances for a data collision?\n\nWhat is the difference between a replicated cache and a distributed cache? Which one is typically used in space-based architecture?\n\nList three of the most strongly supported architecture characteristics in space-based architecture.\n\nWhy does testability rate so low for space-based architecture?\n\n---\n\n## Chapter 16: Orchestration-Driven Service-Oriented Architecture\n\nWhat was the main driving force behind service-oriented architecture?\n\nWhat are the four primary service types within a service-oriented architecture?\n\nList some of the factors that led to the downfall of service-oriented architecture.\n\nIs service-oriented architecture technically partitioned or domain partitioned?\n\nHow is domain reuse addressed in SOA? How is operational reuse addressed?\n\n---\n\n## Chapter 17: Microservices Architecture\n\nWhy is the bounded context concept so critical for microservices architecture?\n\n🤓 ...\n\nWhat are three ways of determining if you have the right level of granularity in a microservice?\n\n🤓 ...\n\nWhat functionality might be contained within a sidecar?\n\n🤓 ...\n\nWhat is the difference between orchestration and choreography? Which does microservices support? Is one communication style easier in microservices?\n\n🤓 ...\n\nWhat is a saga in microservices?\n\n🤓 ...\n\nWhy are agility, testability, and deployability so well supported in microservices?\n\n🤓 ...\n\nWhat are two reasons performance is usually an issue in microservices?\n\n🤓 ...\n\nIs microservices a domain-partitioned architecture or a technically partitioned one?\n\n🤓 ...\n\nDescribe a topology where a microservices ecosystem might be only a single quantum.\n\n🤓 ...\n\nHow was domain reuse addressed in microservices? How was operational reuse addressed?\n\n🤓 ...\n\n---\n\n## Chapter 18: Choosing the Appropriate Architecture Style\n\nIn what way does the data architecture (structure of the logical and physical data models) influence the choice of architecture style?\n\n🤓 ...\n\nHow does it influence your choice of architecture style to use?\n\n🤓 ...\n\nDelineate the steps an architect uses to determine style of architecture, data partitioning, and communication styles.\n\n🤓 ...\n\nWhat factor leads an architect toward a distributed architecture?\n\n🤓 ...\n\n## Chapter 19: Architecture Decisions\n\nWhat is the covering your assets anti-pattern?\n\nWhat are some techniques for avoiding the email-driven architecture anti-pattern?\n\nWhat are the five factors Michael Nygard defines for identifying something as architecturally significant?\n\nWhat are the five basic sections of an architecture decision record?\n\nIn which section of an ADR do you typically add the justification for an architecture decision?\n\nAssuming you don’t need a separate Alternatives section, in which section of an ADR would you list the alternatives to your proposed solution?\n\nWhat are three basic criteria in which you would mark the status of an ADR as Proposed?\n\n---\n\n## Chapter 20: Analyzing Architecture Risk\n\nWhat are the two dimensions of the risk assessment matrix?\n\nWhat are some ways to show direction of particular risk within a risk assessment? Can you think of other ways to indicate whether risk is getting better or worse?\n\nWhy is it necessary for risk storming to be a collaborative exercise?\n\nWhy is it necessary for the identification activity within risk storming to be an individual activity and not a collaborative one?\n\nWhat would you do if three participants identified risk as high (6) for a particular area of the architecture, but another participant identified it as only medium (3)?\n\nWhat risk rating (1-9) would you assign to unproven or unknown technologies?\n\n---\n\n## Chapter 21: Diagramming and Presenting Architecture\n\nWhat is irrational artifact attachment, and why is it significant with respect to documenting and diagramming architecture?\n\nWhat do the 4 C’s refer to in the C4 modeling technique?\n\nWhen diagramming architecture, what do dotted lines between components mean?\n\nWhat is the bullet-riddled corpse anti-pattern? How can you avoid this anti-pattern when creating presentations?\n\nWhat are the two primary information channels a presenter has when giving a presentation?\n\n---\n\n## Chapter 22: Making Teams Effective\n\nWhat are three types of architecture personalities? What type of boundary does each personality create?\n\nWhat are the five factors that go into determining the level of control you should exhibit on the team?\n\nWhat are three warning signs you can look at to determine if your team is getting too big?\n\nList three basic checklists that would be good for a development team.\n\n---\n\n## Chapter 23: Negotiation and Leadership Skills\n\nWhy is negotiation so important as an architect?\n\nName some negotiation techniques when a business stakeholder insists on five nines of availability, but only three nines are really needed.\n\nWhat can you derive from a business stakeholder telling you “I needed it yesterday”?\n\nWhy is it important to save a discussion about time and cost for last in a negotiation?\n\nWhat is the divide-and-conquer rule? How can it be applied when negotiating architecture characteristics with a business stakeholder? Provide an example.\n\nList the 4 C’s of architecture.\n\nExplain why it is important for an architect to be both pragmatic and visionary.\n\nWhat are some techniques for managing and reducing the number of meetings you are invited to?\n\n---\n\n## Chapter 24: Developing a Career Path\n\nWhat is the 20-minute rule, and when is it best to apply it?\n\nWhat are the four rings in the ThoughtWorks technology radar, and what do they mean? How can they be applied to your radar?\n\nDescribe the difference between depth and breadth of knowledge as it applies to software architects. Which should architects aspire to maximize?\n","source":"_drafts/en/fundamentals-of-software-architecture-part-5.md","raw":"---\ntitle: Fundamentals of Software Architecture Book - Part 5\nauthor: codesandtags\ndate: 2023-08-12 18:43:27\ncategory: Software Architecture\nthumbnail: images/books/cover-fundamentals-software-architecture.png\ntags: [software-architecture, books]\nexcerpt: Here I have the relevant points to me of the book Fundamentals of Software Architecture by Mark Richards and Neal Ford. This part is focused on Architecture decisions.\n---\n\n## Fundamentals of Software Architecture\n\n### Book Details\n\n- **Title**: [Fundamentals of Software Architecture](https://www.oreilly.com/library/view/fundamentals-of-software/9781492043447/)\n- **Author**: Mark Richards, Neal Ford\n- **Publication Year**: 2020\n\n### Summary\n\nThis book is a great introduction to software architecture, it covers the basics of software architecture, and it's a great starting point for anyone who wants to learn more about software architecture. Here are some of the topics covered in this book and I want to answer the self-assessment questions for each chapter.\n\n---\n\n## Chapter 13: Service-Based Architecture\n\nHow many services are there in a typical service-based architecture?\n\n🤓 ...\n\nDo you have to break apart a database in service-based architecture?\n\n🤓 ...\n\nUnder what circumstances might you want to break apart a database?\n\n🤓 ...\n\nWhat technique can you use to manage database changes within a service-based architecture?\n\n🤓 ...\n\nDo domain services require a container (such as Docker) to run?\n\n🤓 ...\n\nWhich architecture characteristics are well supported by the service-based architecture style?\n\n🤓 ...\n\nWhy isn’t elasticity well supported in a service-based architecture?\n\n🤓 ...\n\nHow can you increase the number of architecture quanta in a service-based architecture?\n\n🤓 ...\n\n---\n\n## Chapter 14: Event-Driven Architecture Style\n\nWhat are the primary differences between the broker and mediator topologies?\n\n🤓 ...\n\nFor better workflow control, would you use the mediator or broker topology?\n\n🤓 ...\n\nDoes the broker topology usually leverage a publish-and-subscribe model with topics or a point-to-point model with queues?\n\n🤓 ...\n\nName two primary advantage of asynchronous communications.\n\n🤓 ...\n\nGive an example of a typical request within the request-based model.\n\n🤓 ...\n\nGive an example of a typical request in an event-based model.\n\n🤓 ...\n\nWhat is the difference between an initiating event and a processing event in event-driven architecture?\n\n🤓 ...\n\nWhat are some of the techniques for preventing data loss when sending and receiving messages from a queue?\n\n🤓 ...\n\nWhat are three main driving architecture characteristics for using event-driven architecture?\n\n🤓 ...\n\nWhat are some of the architecture characteristics that are not well supported in event-driven architecture?\n\n🤓 ...\n\n---\n\n## Chapter 15: Space-Based Architecture\n\nWhere does space-based architecture get its name from?\n\nWhat is a primary aspect of space-based architecture that differentiates it from other architecture styles?\n\nName the four components that make up the virtualized middleware within a space-based architecture.\n\nWhat is the role of the messaging grid?\n\nWhat is the role of a data writer in space-based architecture?\n\nUnder what conditions would a service need to access data through the data reader?\n\nDoes a small cache size increase or decrease the chances for a data collision?\n\nWhat is the difference between a replicated cache and a distributed cache? Which one is typically used in space-based architecture?\n\nList three of the most strongly supported architecture characteristics in space-based architecture.\n\nWhy does testability rate so low for space-based architecture?\n\n---\n\n## Chapter 16: Orchestration-Driven Service-Oriented Architecture\n\nWhat was the main driving force behind service-oriented architecture?\n\nWhat are the four primary service types within a service-oriented architecture?\n\nList some of the factors that led to the downfall of service-oriented architecture.\n\nIs service-oriented architecture technically partitioned or domain partitioned?\n\nHow is domain reuse addressed in SOA? How is operational reuse addressed?\n\n---\n\n## Chapter 17: Microservices Architecture\n\nWhy is the bounded context concept so critical for microservices architecture?\n\n🤓 ...\n\nWhat are three ways of determining if you have the right level of granularity in a microservice?\n\n🤓 ...\n\nWhat functionality might be contained within a sidecar?\n\n🤓 ...\n\nWhat is the difference between orchestration and choreography? Which does microservices support? Is one communication style easier in microservices?\n\n🤓 ...\n\nWhat is a saga in microservices?\n\n🤓 ...\n\nWhy are agility, testability, and deployability so well supported in microservices?\n\n🤓 ...\n\nWhat are two reasons performance is usually an issue in microservices?\n\n🤓 ...\n\nIs microservices a domain-partitioned architecture or a technically partitioned one?\n\n🤓 ...\n\nDescribe a topology where a microservices ecosystem might be only a single quantum.\n\n🤓 ...\n\nHow was domain reuse addressed in microservices? How was operational reuse addressed?\n\n🤓 ...\n\n---\n\n## Chapter 18: Choosing the Appropriate Architecture Style\n\nIn what way does the data architecture (structure of the logical and physical data models) influence the choice of architecture style?\n\n🤓 ...\n\nHow does it influence your choice of architecture style to use?\n\n🤓 ...\n\nDelineate the steps an architect uses to determine style of architecture, data partitioning, and communication styles.\n\n🤓 ...\n\nWhat factor leads an architect toward a distributed architecture?\n\n🤓 ...\n\n## Chapter 19: Architecture Decisions\n\nWhat is the covering your assets anti-pattern?\n\nWhat are some techniques for avoiding the email-driven architecture anti-pattern?\n\nWhat are the five factors Michael Nygard defines for identifying something as architecturally significant?\n\nWhat are the five basic sections of an architecture decision record?\n\nIn which section of an ADR do you typically add the justification for an architecture decision?\n\nAssuming you don’t need a separate Alternatives section, in which section of an ADR would you list the alternatives to your proposed solution?\n\nWhat are three basic criteria in which you would mark the status of an ADR as Proposed?\n\n---\n\n## Chapter 20: Analyzing Architecture Risk\n\nWhat are the two dimensions of the risk assessment matrix?\n\nWhat are some ways to show direction of particular risk within a risk assessment? Can you think of other ways to indicate whether risk is getting better or worse?\n\nWhy is it necessary for risk storming to be a collaborative exercise?\n\nWhy is it necessary for the identification activity within risk storming to be an individual activity and not a collaborative one?\n\nWhat would you do if three participants identified risk as high (6) for a particular area of the architecture, but another participant identified it as only medium (3)?\n\nWhat risk rating (1-9) would you assign to unproven or unknown technologies?\n\n---\n\n## Chapter 21: Diagramming and Presenting Architecture\n\nWhat is irrational artifact attachment, and why is it significant with respect to documenting and diagramming architecture?\n\nWhat do the 4 C’s refer to in the C4 modeling technique?\n\nWhen diagramming architecture, what do dotted lines between components mean?\n\nWhat is the bullet-riddled corpse anti-pattern? How can you avoid this anti-pattern when creating presentations?\n\nWhat are the two primary information channels a presenter has when giving a presentation?\n\n---\n\n## Chapter 22: Making Teams Effective\n\nWhat are three types of architecture personalities? What type of boundary does each personality create?\n\nWhat are the five factors that go into determining the level of control you should exhibit on the team?\n\nWhat are three warning signs you can look at to determine if your team is getting too big?\n\nList three basic checklists that would be good for a development team.\n\n---\n\n## Chapter 23: Negotiation and Leadership Skills\n\nWhy is negotiation so important as an architect?\n\nName some negotiation techniques when a business stakeholder insists on five nines of availability, but only three nines are really needed.\n\nWhat can you derive from a business stakeholder telling you “I needed it yesterday”?\n\nWhy is it important to save a discussion about time and cost for last in a negotiation?\n\nWhat is the divide-and-conquer rule? How can it be applied when negotiating architecture characteristics with a business stakeholder? Provide an example.\n\nList the 4 C’s of architecture.\n\nExplain why it is important for an architect to be both pragmatic and visionary.\n\nWhat are some techniques for managing and reducing the number of meetings you are invited to?\n\n---\n\n## Chapter 24: Developing a Career Path\n\nWhat is the 20-minute rule, and when is it best to apply it?\n\nWhat are the four rings in the ThoughtWorks technology radar, and what do they mean? How can they be applied to your radar?\n\nDescribe the difference between depth and breadth of knowledge as it applies to software architects. Which should architects aspire to maximize?\n","slug":"en/fundamentals-of-software-architecture-part-5","published":0,"updated":"2023-08-07T15:17:40.670Z","comments":0,"layout":"post","photos":[],"link":"2023/08/12/en/fundamentals-of-software-architecture-part-5","_id":"clnwi7gak0001qbt23w6ad5es","content":"<h2 id=\"fundamentals-of-software-architecture\">Fundamentals of Software Architecture<a title=\"#fundamentals-of-software-architecture\" href=\"#fundamentals-of-software-architecture\"></a></h2>\n<h3 id=\"book-details\">Book Details<a title=\"#book-details\" href=\"#book-details\"></a></h3>\n<ul>\n<li><strong>Title</strong>: <a href=\"https://www.oreilly.com/library/view/fundamentals-of-software/9781492043447/\" target=\"_blank\">Fundamentals of Software Architecture</a></li>\n<li><strong>Author</strong>: Mark Richards, Neal Ford</li>\n<li><strong>Publication Year</strong>: 2020</li>\n</ul>\n<h3 id=\"summary\">Summary<a title=\"#summary\" href=\"#summary\"></a></h3>\n<p>This book is a great introduction to software architecture, it covers the basics of software architecture, and it’s a great starting point for anyone who wants to learn more about software architecture. Here are some of the topics covered in this book and I want to answer the self-assessment questions for each chapter.</p>\n<hr>\n<h2 id=\"chapter-13:-service-based-architecture\">Chapter 13: Service-Based Architecture<a title=\"#chapter-13:-service-based-architecture\" href=\"#chapter-13:-service-based-architecture\"></a></h2>\n<p>How many services are there in a typical service-based architecture?</p>\n<p>🤓 …</p>\n<p>Do you have to break apart a database in service-based architecture?</p>\n<p>🤓 …</p>\n<p>Under what circumstances might you want to break apart a database?</p>\n<p>🤓 …</p>\n<p>What technique can you use to manage database changes within a service-based architecture?</p>\n<p>🤓 …</p>\n<p>Do domain services require a container (such as Docker) to run?</p>\n<p>🤓 …</p>\n<p>Which architecture characteristics are well supported by the service-based architecture style?</p>\n<p>🤓 …</p>\n<p>Why isn’t elasticity well supported in a service-based architecture?</p>\n<p>🤓 …</p>\n<p>How can you increase the number of architecture quanta in a service-based architecture?</p>\n<p>🤓 …</p>\n<hr>\n<h2 id=\"chapter-14:-event-driven-architecture-style\">Chapter 14: Event-Driven Architecture Style<a title=\"#chapter-14:-event-driven-architecture-style\" href=\"#chapter-14:-event-driven-architecture-style\"></a></h2>\n<p>What are the primary differences between the broker and mediator topologies?</p>\n<p>🤓 …</p>\n<p>For better workflow control, would you use the mediator or broker topology?</p>\n<p>🤓 …</p>\n<p>Does the broker topology usually leverage a publish-and-subscribe model with topics or a point-to-point model with queues?</p>\n<p>🤓 …</p>\n<p>Name two primary advantage of asynchronous communications.</p>\n<p>🤓 …</p>\n<p>Give an example of a typical request within the request-based model.</p>\n<p>🤓 …</p>\n<p>Give an example of a typical request in an event-based model.</p>\n<p>🤓 …</p>\n<p>What is the difference between an initiating event and a processing event in event-driven architecture?</p>\n<p>🤓 …</p>\n<p>What are some of the techniques for preventing data loss when sending and receiving messages from a queue?</p>\n<p>🤓 …</p>\n<p>What are three main driving architecture characteristics for using event-driven architecture?</p>\n<p>🤓 …</p>\n<p>What are some of the architecture characteristics that are not well supported in event-driven architecture?</p>\n<p>🤓 …</p>\n<hr>\n<h2 id=\"chapter-15:-space-based-architecture\">Chapter 15: Space-Based Architecture<a title=\"#chapter-15:-space-based-architecture\" href=\"#chapter-15:-space-based-architecture\"></a></h2>\n<p>Where does space-based architecture get its name from?</p>\n<p>What is a primary aspect of space-based architecture that differentiates it from other architecture styles?</p>\n<p>Name the four components that make up the virtualized middleware within a space-based architecture.</p>\n<p>What is the role of the messaging grid?</p>\n<p>What is the role of a data writer in space-based architecture?</p>\n<p>Under what conditions would a service need to access data through the data reader?</p>\n<p>Does a small cache size increase or decrease the chances for a data collision?</p>\n<p>What is the difference between a replicated cache and a distributed cache? Which one is typically used in space-based architecture?</p>\n<p>List three of the most strongly supported architecture characteristics in space-based architecture.</p>\n<p>Why does testability rate so low for space-based architecture?</p>\n<hr>\n<h2 id=\"chapter-16:-orchestration-driven-service-oriented-architecture\">Chapter 16: Orchestration-Driven Service-Oriented Architecture<a title=\"#chapter-16:-orchestration-driven-service-oriented-architecture\" href=\"#chapter-16:-orchestration-driven-service-oriented-architecture\"></a></h2>\n<p>What was the main driving force behind service-oriented architecture?</p>\n<p>What are the four primary service types within a service-oriented architecture?</p>\n<p>List some of the factors that led to the downfall of service-oriented architecture.</p>\n<p>Is service-oriented architecture technically partitioned or domain partitioned?</p>\n<p>How is domain reuse addressed in SOA? How is operational reuse addressed?</p>\n<hr>\n<h2 id=\"chapter-17:-microservices-architecture\">Chapter 17: Microservices Architecture<a title=\"#chapter-17:-microservices-architecture\" href=\"#chapter-17:-microservices-architecture\"></a></h2>\n<p>Why is the bounded context concept so critical for microservices architecture?</p>\n<p>🤓 …</p>\n<p>What are three ways of determining if you have the right level of granularity in a microservice?</p>\n<p>🤓 …</p>\n<p>What functionality might be contained within a sidecar?</p>\n<p>🤓 …</p>\n<p>What is the difference between orchestration and choreography? Which does microservices support? Is one communication style easier in microservices?</p>\n<p>🤓 …</p>\n<p>What is a saga in microservices?</p>\n<p>🤓 …</p>\n<p>Why are agility, testability, and deployability so well supported in microservices?</p>\n<p>🤓 …</p>\n<p>What are two reasons performance is usually an issue in microservices?</p>\n<p>🤓 …</p>\n<p>Is microservices a domain-partitioned architecture or a technically partitioned one?</p>\n<p>🤓 …</p>\n<p>Describe a topology where a microservices ecosystem might be only a single quantum.</p>\n<p>🤓 …</p>\n<p>How was domain reuse addressed in microservices? How was operational reuse addressed?</p>\n<p>🤓 …</p>\n<hr>\n<h2 id=\"chapter-18:-choosing-the-appropriate-architecture-style\">Chapter 18: Choosing the Appropriate Architecture Style<a title=\"#chapter-18:-choosing-the-appropriate-architecture-style\" href=\"#chapter-18:-choosing-the-appropriate-architecture-style\"></a></h2>\n<p>In what way does the data architecture (structure of the logical and physical data models) influence the choice of architecture style?</p>\n<p>🤓 …</p>\n<p>How does it influence your choice of architecture style to use?</p>\n<p>🤓 …</p>\n<p>Delineate the steps an architect uses to determine style of architecture, data partitioning, and communication styles.</p>\n<p>🤓 …</p>\n<p>What factor leads an architect toward a distributed architecture?</p>\n<p>🤓 …</p>\n<h2 id=\"chapter-19:-architecture-decisions\">Chapter 19: Architecture Decisions<a title=\"#chapter-19:-architecture-decisions\" href=\"#chapter-19:-architecture-decisions\"></a></h2>\n<p>What is the covering your assets anti-pattern?</p>\n<p>What are some techniques for avoiding the email-driven architecture anti-pattern?</p>\n<p>What are the five factors Michael Nygard defines for identifying something as architecturally significant?</p>\n<p>What are the five basic sections of an architecture decision record?</p>\n<p>In which section of an ADR do you typically add the justification for an architecture decision?</p>\n<p>Assuming you don’t need a separate Alternatives section, in which section of an ADR would you list the alternatives to your proposed solution?</p>\n<p>What are three basic criteria in which you would mark the status of an ADR as Proposed?</p>\n<hr>\n<h2 id=\"chapter-20:-analyzing-architecture-risk\">Chapter 20: Analyzing Architecture Risk<a title=\"#chapter-20:-analyzing-architecture-risk\" href=\"#chapter-20:-analyzing-architecture-risk\"></a></h2>\n<p>What are the two dimensions of the risk assessment matrix?</p>\n<p>What are some ways to show direction of particular risk within a risk assessment? Can you think of other ways to indicate whether risk is getting better or worse?</p>\n<p>Why is it necessary for risk storming to be a collaborative exercise?</p>\n<p>Why is it necessary for the identification activity within risk storming to be an individual activity and not a collaborative one?</p>\n<p>What would you do if three participants identified risk as high (6) for a particular area of the architecture, but another participant identified it as only medium (3)?</p>\n<p>What risk rating (1-9) would you assign to unproven or unknown technologies?</p>\n<hr>\n<h2 id=\"chapter-21:-diagramming-and-presenting-architecture\">Chapter 21: Diagramming and Presenting Architecture<a title=\"#chapter-21:-diagramming-and-presenting-architecture\" href=\"#chapter-21:-diagramming-and-presenting-architecture\"></a></h2>\n<p>What is irrational artifact attachment, and why is it significant with respect to documenting and diagramming architecture?</p>\n<p>What do the 4 C’s refer to in the C4 modeling technique?</p>\n<p>When diagramming architecture, what do dotted lines between components mean?</p>\n<p>What is the bullet-riddled corpse anti-pattern? How can you avoid this anti-pattern when creating presentations?</p>\n<p>What are the two primary information channels a presenter has when giving a presentation?</p>\n<hr>\n<h2 id=\"chapter-22:-making-teams-effective\">Chapter 22: Making Teams Effective<a title=\"#chapter-22:-making-teams-effective\" href=\"#chapter-22:-making-teams-effective\"></a></h2>\n<p>What are three types of architecture personalities? What type of boundary does each personality create?</p>\n<p>What are the five factors that go into determining the level of control you should exhibit on the team?</p>\n<p>What are three warning signs you can look at to determine if your team is getting too big?</p>\n<p>List three basic checklists that would be good for a development team.</p>\n<hr>\n<h2 id=\"chapter-23:-negotiation-and-leadership-skills\">Chapter 23: Negotiation and Leadership Skills<a title=\"#chapter-23:-negotiation-and-leadership-skills\" href=\"#chapter-23:-negotiation-and-leadership-skills\"></a></h2>\n<p>Why is negotiation so important as an architect?</p>\n<p>Name some negotiation techniques when a business stakeholder insists on five nines of availability, but only three nines are really needed.</p>\n<p>What can you derive from a business stakeholder telling you “I needed it yesterday”?</p>\n<p>Why is it important to save a discussion about time and cost for last in a negotiation?</p>\n<p>What is the divide-and-conquer rule? How can it be applied when negotiating architecture characteristics with a business stakeholder? Provide an example.</p>\n<p>List the 4 C’s of architecture.</p>\n<p>Explain why it is important for an architect to be both pragmatic and visionary.</p>\n<p>What are some techniques for managing and reducing the number of meetings you are invited to?</p>\n<hr>\n<h2 id=\"chapter-24:-developing-a-career-path\">Chapter 24: Developing a Career Path<a title=\"#chapter-24:-developing-a-career-path\" href=\"#chapter-24:-developing-a-career-path\"></a></h2>\n<p>What is the 20-minute rule, and when is it best to apply it?</p>\n<p>What are the four rings in the ThoughtWorks technology radar, and what do they mean? How can they be applied to your radar?</p>\n<p>Describe the difference between depth and breadth of knowledge as it applies to software architects. Which should architects aspire to maximize?</p>\n","site":{"data":{}},"more":"<h2 id=\"fundamentals-of-software-architecture\">Fundamentals of Software Architecture<a title=\"#fundamentals-of-software-architecture\" href=\"#fundamentals-of-software-architecture\"></a></h2>\n<h3 id=\"book-details\">Book Details<a title=\"#book-details\" href=\"#book-details\"></a></h3>\n<ul>\n<li><strong>Title</strong>: <a href=\"https://www.oreilly.com/library/view/fundamentals-of-software/9781492043447/\" target=\"_blank\">Fundamentals of Software Architecture</a></li>\n<li><strong>Author</strong>: Mark Richards, Neal Ford</li>\n<li><strong>Publication Year</strong>: 2020</li>\n</ul>\n<h3 id=\"summary\">Summary<a title=\"#summary\" href=\"#summary\"></a></h3>\n<p>This book is a great introduction to software architecture, it covers the basics of software architecture, and it’s a great starting point for anyone who wants to learn more about software architecture. Here are some of the topics covered in this book and I want to answer the self-assessment questions for each chapter.</p>\n<hr>\n<h2 id=\"chapter-13:-service-based-architecture\">Chapter 13: Service-Based Architecture<a title=\"#chapter-13:-service-based-architecture\" href=\"#chapter-13:-service-based-architecture\"></a></h2>\n<p>How many services are there in a typical service-based architecture?</p>\n<p>🤓 …</p>\n<p>Do you have to break apart a database in service-based architecture?</p>\n<p>🤓 …</p>\n<p>Under what circumstances might you want to break apart a database?</p>\n<p>🤓 …</p>\n<p>What technique can you use to manage database changes within a service-based architecture?</p>\n<p>🤓 …</p>\n<p>Do domain services require a container (such as Docker) to run?</p>\n<p>🤓 …</p>\n<p>Which architecture characteristics are well supported by the service-based architecture style?</p>\n<p>🤓 …</p>\n<p>Why isn’t elasticity well supported in a service-based architecture?</p>\n<p>🤓 …</p>\n<p>How can you increase the number of architecture quanta in a service-based architecture?</p>\n<p>🤓 …</p>\n<hr>\n<h2 id=\"chapter-14:-event-driven-architecture-style\">Chapter 14: Event-Driven Architecture Style<a title=\"#chapter-14:-event-driven-architecture-style\" href=\"#chapter-14:-event-driven-architecture-style\"></a></h2>\n<p>What are the primary differences between the broker and mediator topologies?</p>\n<p>🤓 …</p>\n<p>For better workflow control, would you use the mediator or broker topology?</p>\n<p>🤓 …</p>\n<p>Does the broker topology usually leverage a publish-and-subscribe model with topics or a point-to-point model with queues?</p>\n<p>🤓 …</p>\n<p>Name two primary advantage of asynchronous communications.</p>\n<p>🤓 …</p>\n<p>Give an example of a typical request within the request-based model.</p>\n<p>🤓 …</p>\n<p>Give an example of a typical request in an event-based model.</p>\n<p>🤓 …</p>\n<p>What is the difference between an initiating event and a processing event in event-driven architecture?</p>\n<p>🤓 …</p>\n<p>What are some of the techniques for preventing data loss when sending and receiving messages from a queue?</p>\n<p>🤓 …</p>\n<p>What are three main driving architecture characteristics for using event-driven architecture?</p>\n<p>🤓 …</p>\n<p>What are some of the architecture characteristics that are not well supported in event-driven architecture?</p>\n<p>🤓 …</p>\n<hr>\n<h2 id=\"chapter-15:-space-based-architecture\">Chapter 15: Space-Based Architecture<a title=\"#chapter-15:-space-based-architecture\" href=\"#chapter-15:-space-based-architecture\"></a></h2>\n<p>Where does space-based architecture get its name from?</p>\n<p>What is a primary aspect of space-based architecture that differentiates it from other architecture styles?</p>\n<p>Name the four components that make up the virtualized middleware within a space-based architecture.</p>\n<p>What is the role of the messaging grid?</p>\n<p>What is the role of a data writer in space-based architecture?</p>\n<p>Under what conditions would a service need to access data through the data reader?</p>\n<p>Does a small cache size increase or decrease the chances for a data collision?</p>\n<p>What is the difference between a replicated cache and a distributed cache? Which one is typically used in space-based architecture?</p>\n<p>List three of the most strongly supported architecture characteristics in space-based architecture.</p>\n<p>Why does testability rate so low for space-based architecture?</p>\n<hr>\n<h2 id=\"chapter-16:-orchestration-driven-service-oriented-architecture\">Chapter 16: Orchestration-Driven Service-Oriented Architecture<a title=\"#chapter-16:-orchestration-driven-service-oriented-architecture\" href=\"#chapter-16:-orchestration-driven-service-oriented-architecture\"></a></h2>\n<p>What was the main driving force behind service-oriented architecture?</p>\n<p>What are the four primary service types within a service-oriented architecture?</p>\n<p>List some of the factors that led to the downfall of service-oriented architecture.</p>\n<p>Is service-oriented architecture technically partitioned or domain partitioned?</p>\n<p>How is domain reuse addressed in SOA? How is operational reuse addressed?</p>\n<hr>\n<h2 id=\"chapter-17:-microservices-architecture\">Chapter 17: Microservices Architecture<a title=\"#chapter-17:-microservices-architecture\" href=\"#chapter-17:-microservices-architecture\"></a></h2>\n<p>Why is the bounded context concept so critical for microservices architecture?</p>\n<p>🤓 …</p>\n<p>What are three ways of determining if you have the right level of granularity in a microservice?</p>\n<p>🤓 …</p>\n<p>What functionality might be contained within a sidecar?</p>\n<p>🤓 …</p>\n<p>What is the difference between orchestration and choreography? Which does microservices support? Is one communication style easier in microservices?</p>\n<p>🤓 …</p>\n<p>What is a saga in microservices?</p>\n<p>🤓 …</p>\n<p>Why are agility, testability, and deployability so well supported in microservices?</p>\n<p>🤓 …</p>\n<p>What are two reasons performance is usually an issue in microservices?</p>\n<p>🤓 …</p>\n<p>Is microservices a domain-partitioned architecture or a technically partitioned one?</p>\n<p>🤓 …</p>\n<p>Describe a topology where a microservices ecosystem might be only a single quantum.</p>\n<p>🤓 …</p>\n<p>How was domain reuse addressed in microservices? How was operational reuse addressed?</p>\n<p>🤓 …</p>\n<hr>\n<h2 id=\"chapter-18:-choosing-the-appropriate-architecture-style\">Chapter 18: Choosing the Appropriate Architecture Style<a title=\"#chapter-18:-choosing-the-appropriate-architecture-style\" href=\"#chapter-18:-choosing-the-appropriate-architecture-style\"></a></h2>\n<p>In what way does the data architecture (structure of the logical and physical data models) influence the choice of architecture style?</p>\n<p>🤓 …</p>\n<p>How does it influence your choice of architecture style to use?</p>\n<p>🤓 …</p>\n<p>Delineate the steps an architect uses to determine style of architecture, data partitioning, and communication styles.</p>\n<p>🤓 …</p>\n<p>What factor leads an architect toward a distributed architecture?</p>\n<p>🤓 …</p>\n<h2 id=\"chapter-19:-architecture-decisions\">Chapter 19: Architecture Decisions<a title=\"#chapter-19:-architecture-decisions\" href=\"#chapter-19:-architecture-decisions\"></a></h2>\n<p>What is the covering your assets anti-pattern?</p>\n<p>What are some techniques for avoiding the email-driven architecture anti-pattern?</p>\n<p>What are the five factors Michael Nygard defines for identifying something as architecturally significant?</p>\n<p>What are the five basic sections of an architecture decision record?</p>\n<p>In which section of an ADR do you typically add the justification for an architecture decision?</p>\n<p>Assuming you don’t need a separate Alternatives section, in which section of an ADR would you list the alternatives to your proposed solution?</p>\n<p>What are three basic criteria in which you would mark the status of an ADR as Proposed?</p>\n<hr>\n<h2 id=\"chapter-20:-analyzing-architecture-risk\">Chapter 20: Analyzing Architecture Risk<a title=\"#chapter-20:-analyzing-architecture-risk\" href=\"#chapter-20:-analyzing-architecture-risk\"></a></h2>\n<p>What are the two dimensions of the risk assessment matrix?</p>\n<p>What are some ways to show direction of particular risk within a risk assessment? Can you think of other ways to indicate whether risk is getting better or worse?</p>\n<p>Why is it necessary for risk storming to be a collaborative exercise?</p>\n<p>Why is it necessary for the identification activity within risk storming to be an individual activity and not a collaborative one?</p>\n<p>What would you do if three participants identified risk as high (6) for a particular area of the architecture, but another participant identified it as only medium (3)?</p>\n<p>What risk rating (1-9) would you assign to unproven or unknown technologies?</p>\n<hr>\n<h2 id=\"chapter-21:-diagramming-and-presenting-architecture\">Chapter 21: Diagramming and Presenting Architecture<a title=\"#chapter-21:-diagramming-and-presenting-architecture\" href=\"#chapter-21:-diagramming-and-presenting-architecture\"></a></h2>\n<p>What is irrational artifact attachment, and why is it significant with respect to documenting and diagramming architecture?</p>\n<p>What do the 4 C’s refer to in the C4 modeling technique?</p>\n<p>When diagramming architecture, what do dotted lines between components mean?</p>\n<p>What is the bullet-riddled corpse anti-pattern? How can you avoid this anti-pattern when creating presentations?</p>\n<p>What are the two primary information channels a presenter has when giving a presentation?</p>\n<hr>\n<h2 id=\"chapter-22:-making-teams-effective\">Chapter 22: Making Teams Effective<a title=\"#chapter-22:-making-teams-effective\" href=\"#chapter-22:-making-teams-effective\"></a></h2>\n<p>What are three types of architecture personalities? What type of boundary does each personality create?</p>\n<p>What are the five factors that go into determining the level of control you should exhibit on the team?</p>\n<p>What are three warning signs you can look at to determine if your team is getting too big?</p>\n<p>List three basic checklists that would be good for a development team.</p>\n<hr>\n<h2 id=\"chapter-23:-negotiation-and-leadership-skills\">Chapter 23: Negotiation and Leadership Skills<a title=\"#chapter-23:-negotiation-and-leadership-skills\" href=\"#chapter-23:-negotiation-and-leadership-skills\"></a></h2>\n<p>Why is negotiation so important as an architect?</p>\n<p>Name some negotiation techniques when a business stakeholder insists on five nines of availability, but only three nines are really needed.</p>\n<p>What can you derive from a business stakeholder telling you “I needed it yesterday”?</p>\n<p>Why is it important to save a discussion about time and cost for last in a negotiation?</p>\n<p>What is the divide-and-conquer rule? How can it be applied when negotiating architecture characteristics with a business stakeholder? Provide an example.</p>\n<p>List the 4 C’s of architecture.</p>\n<p>Explain why it is important for an architect to be both pragmatic and visionary.</p>\n<p>What are some techniques for managing and reducing the number of meetings you are invited to?</p>\n<hr>\n<h2 id=\"chapter-24:-developing-a-career-path\">Chapter 24: Developing a Career Path<a title=\"#chapter-24:-developing-a-career-path\" href=\"#chapter-24:-developing-a-career-path\"></a></h2>\n<p>What is the 20-minute rule, and when is it best to apply it?</p>\n<p>What are the four rings in the ThoughtWorks technology radar, and what do they mean? How can they be applied to your radar?</p>\n<p>Describe the difference between depth and breadth of knowledge as it applies to software architects. Which should architects aspire to maximize?</p>\n","date_formatted":{"ll":"Aug 12, 2023","L":"08/12/2023","MM-DD":"08-12"},"plink":"http://codesandtags.io/blog/2023/08/12/en/fundamentals-of-software-architecture-part-5/","type":"post","toc":[{"id":"fundamentals-of-software-architecture","title":"Fundamentals of Software Architecture","index":"1","children":[{"id":"book-details","title":"Book Details","index":"1.1"},{"id":"summary","title":"Summary","index":"1.2"}]},{"id":"chapter-13:-service-based-architecture","title":"Chapter 13: Service-Based Architecture","index":"2"},{"id":"chapter-14:-event-driven-architecture-style","title":"Chapter 14: Event-Driven Architecture Style","index":"3"},{"id":"chapter-15:-space-based-architecture","title":"Chapter 15: Space-Based Architecture","index":"4"},{"id":"chapter-16:-orchestration-driven-service-oriented-architecture","title":"Chapter 16: Orchestration-Driven Service-Oriented Architecture","index":"5"},{"id":"chapter-17:-microservices-architecture","title":"Chapter 17: Microservices Architecture","index":"6"},{"id":"chapter-18:-choosing-the-appropriate-architecture-style","title":"Chapter 18: Choosing the Appropriate Architecture Style","index":"7"},{"id":"chapter-19:-architecture-decisions","title":"Chapter 19: Architecture Decisions","index":"8"},{"id":"chapter-20:-analyzing-architecture-risk","title":"Chapter 20: Analyzing Architecture Risk","index":"9"},{"id":"chapter-21:-diagramming-and-presenting-architecture","title":"Chapter 21: Diagramming and Presenting Architecture","index":"10"},{"id":"chapter-22:-making-teams-effective","title":"Chapter 22: Making Teams Effective","index":"11"},{"id":"chapter-23:-negotiation-and-leadership-skills","title":"Chapter 23: Negotiation and Leadership Skills","index":"12"},{"id":"chapter-24:-developing-a-career-path","title":"Chapter 24: Developing a Career Path","index":"13"}],"reading_time":"1268 words in 8 min"},{"title":"Fundamentals of Software Architecture Book - Part 1","date":"2023-07-17T22:50:03.000Z","thumbnail":"images/books/cover-fundamentals-software-architecture.png","excerpt":"Here I have the relevant points to me of the book Fundamentals of Software Architecture by Mark Richards and Neal Ford. This part is focused on foundations.","_content":"\n## Fundamentals of Software Architecture\n\n### Book Details\n\n- 📖 **Title**: [Fundamentals of Software Architecture](https://www.oreilly.com/library/view/fundamentals-of-software/9781492043447/)\n- ✍️ **Author**: Mark Richards, Neal Ford\n- 📆 **Publication Year**: 2020\n\nThis year **2023** I've started to read more books, and I've decided to write a summary of each book I read. This is the first one, and I hope you enjoy it.\n\n### Summary\n\nThis book is a great introduction to software architecture, it covers the basics of software architecture, and it's a great starting point for anyone who wants to learn more about software architecture. Here are some of the topics covered in this book and I want to answer the self-assessment questions for each chapter.\n\n---\n\n## Chapter 1: Introduction\n\n1. **What are the four dimensions that define software architecture?**\n\n![four dimensions software architecture](images/books/software-architecture-four-dimensions.png)\n\n- **Architecture characteristics**: Define the success criteria of a system, which is generally orthogonal to the functionality of the system. Notice that all of the characteristics listed do not require knowledge of the functionality of the system, yet they are required in order for the system to function properly.\n- **Architecture Decisions**: Define the rules for how a system should be constructed. For example, an architect might make an architecture decision that only the business and services layers within a layered architecture can access the database.\n- **Structure**: Refers to the type of architecture style (or styles) the system is implemented in (such as microservices, layered, or microkernel)\n- Design principles: Define a guideline of principles rather than a hard-and-fast rule.\n\n2. **What is the difference between an architecture decision and a design principle?**\n\n- Architecture decisions form the constraints of the system and direct the development teams on what is and what isn’t allowed.\n- Design principles are guidelines that help development teams make decisions about how to implement the system.\n\n3. **List the eight core expectations of a software architect**\n\n🤓 The eight core expectations of a software architect are:\n\n- Make architecture decisions\n- Continually analyze the architecture\n- Keep current with latest trends\n- Ensure compliance with decisions\n- Diverse exposure and experience\n- Have business domain knowledge\n- Possess interpersonal skills\n- Understand and navigate politics\n\n4. **What is the First Law of Software Architecture?**\n\n> Everything in software architecture is a trade-off. -- First Law of Software Architecture\n\n> Why is more important than how. -- Second Law of Software Architecture\n\n---\n\n## Chapter 2: Architectural Thinking\n\n1. **Describe the traditional approach of architecture versus development and explain why that approach no longer works.**\n\n![Traditional approach architecture vs design](images/books/software-architecture-traditional-approach.png)\n\n🤓 The traditional approach implies that architecture is something that is fully defined up front and then merely implemented by developers. However, this approach has been found to have several major drawbacks:\n\n- **Lack of Flexibility**: Once the architecture is defined, it can be very difficult to change. However, software development is often a highly unpredictable process, and changes in requirements or technologies may necessitate changes in the architecture.\n\n- **Communication Breakdown**: Because architects and developers often work in isolation from each other, there can be a lack of understanding and communication between the two groups. Architects may make decisions without fully understanding the implementation implications, and developers may struggle to implement an architecture they had no part in designing.\n\n- **Reality Gap**: Architectural designs often look good on paper but may not work as well when actually implemented. This gap between design and reality can lead to problems and delays.\n\n2. **List the three levels of knowledge in the knowledge triangle and provide an example of each.**\n\n![Knowledge representation](images/books/software-architecture-knowledge-representation.png)\n\n🤓 Our knowledge pyramid illustrates how fundamentally different the role of architect compares to developer. Developers spend their whole careers honing expertise, and transitioning to the architect role means a shift in that perspective, which many individuals find difficult. The architect role requires a different set of skills, and the knowledge pyramid illustrates this shift.\n\n3. **Why is it more important for an architect to focus on technical breadth rather than technical depth?**\n\n🤓 Focusing on technical breadth means acquiring a wide-ranging understanding of various technologies, patterns, languages, platforms, and principles. This breadth allows architects to:\n\n- **See the Big Picture**: Understand how different components and technologies fit together and influence each other. This is essential when designing complex systems where decisions in one area can significantly impact other areas.\n\n- **Make Informed Decisions**: Choose the most suitable technologies and designs for the system's requirements. A broad knowledge allows architects to consider a wider range of options and make more informed decisions.\n\n- **Communicate Effectively**: Communicate with different stakeholders, including developers, project managers, business stakeholders, and others. Each group may have different areas of expertise and concerns, and a broad understanding helps architects bridge these gaps.\n\n- **Adapt to Change**: Stay adaptable and resilient in the face of changing requirements, technologies, and business environments. A wide knowledge base allows architects to learn and adopt new technologies more easily.\n\nFor example, as an architect, it is more beneficial to know that five solutions exist for a particular problem than to have singular expertise in only one.\n\n4. **What are some of the ways of maintaining your technical depth and remaining hands-on as an architect?**\n\n- 🤓 **Coding**: Try to spend some of your time coding. This could be writing prototypes, creating proofs of concept, fixing bugs, or contributing to critical parts of the system. This not only helps maintain your coding skills but also gives you firsthand experience with the technologies you're using.\n\n- **Education**: Continually educate yourself about new technologies, languages, and methodologies. This can involve reading books, articles, or research papers, attending conferences or webinars, or taking online courses.\n\n- **Personal Projects**: Work on personal projects outside of your day-to-day work. This can be a great way to learn new technologies, experiment with different architectures, or just keep your coding skills sharp.\n\n- **Code Reviews**: Participate in code reviews. This gives you a chance to see how the architecture is being implemented, spot potential issues, and provide valuable feedback to developers.\n\n- **Pair Programming**: Occasionally pair program with developers. This is another great way to stay familiar with the codebase and the challenges that developers face.\n\n- **Prototyping**: When considering a new technology or architectural approach, create a small prototype. This can provide valuable insights that you wouldn't get from reading about it alone.\n\n- **Stay Connected with the Developer Community**: Participate in tech meetups, online forums, open-source projects, and other communities. This can keep you updated on new technologies and best practices, and provide opportunities to learn from others.\n\nBy staying hands-on and maintaining technical depth, you'll be a more effective architect. You'll understand the challenges that developers face, make better architectural decisions, and be able to communicate more effectively with your team.\n\n---\n\n## Chapter 3 - Modularity\n\n1. What is meant by the term connascence?\n\n🤓 **Connascence** is a metric used to describe the coupling or the degree of interdependence between two or more parts of a software system.\n\n2. What is the difference between static and dynamic connascence?\n\n🤓 **Static connascence** is coupling that can be determined by examining the source code, while **dynamic connascence** is coupling that can only be determined when the code is running.\n\n3. What does connascence of type mean? Is it static or dynamic connascence?\n\n🤓 **Connascence of type** is when multiple parts of a program must agree on the type of an entity. It is a form of static connascence.\n\n4. What is the strongest form of connascence?\n\n🤓 **Connascence of Identity** is the strongest form of connascence. It refers to when multiple parts of the system depend on a mutable entity's identity.\n\n5. What is the weakest form of connascence?\n\n🤓 **Connascence of Name**, where multiple parts of the system must agree on the name of an entity, is considered the weakest form of connascence.\n\n6. Which is preferred within a code base—static or dynamic connascence?\n\n🤓 **Static connascence** is generally preferred within a code base as it is easier to identify and manage than dynamic connascence.\n\n---\n\n## Chapter 4 - Modularity\n\n![Architecture Characteristics](images/books/software-architecture-characteristics.png)\n\n**1. What three criteria must an attribute meet to be considered an architecture characteristic?**\n\n🤓 An attribute must be testable, contribute to the architecture of the system, and provide a way to measure and quantify it.\n\n**2. What is the difference between an implicit characteristic and an explicit one? Provide an example of each.**\n\n![Architecture Characteristics](images/books/software-architecture-explicit-implicit-characteristics.png)\n\n🤓 An implicit characteristic is one that is required or assumed but not explicitly stated, like usability. An explicit characteristic is one that is directly stated and designed for, such as response time.\n\n**3. Provide an example of an operational characteristic**\n\n🤓 An example of an operational characteristic is availability, which refers to the system's ability to be in a state to perform its designated function during operation.\n\n**4. Provide an example of a structural characteristic.**\n\n🤓 An example of a structural characteristic is modularity, referring to the degree to which a system's components may be separated and recombined.\n\n**5. Provide an example of a cross-cutting characteristic.**\n\n🤓 An example of a cross-cutting characteristic is security, which is the system's ability to resist unauthorized attempts at usage or behavior modification, affecting multiple components of the system.\n\n**6. Which architecture characteristic is more important to strive for—availability or performance?**\n\n🤓 The importance of availability versus performance **depends on the specific needs of the system being developed**. For a critical system where downtime could be costly, availability may be more important. For a system where speed is crucial for user satisfaction, performance may be more important. The context and requirements of the system dictate which characteristic is more important to strive for.\n","source":"_posts/en/fundamentals-of-software-architecture-part-1.md","raw":"---\ntitle: Fundamentals of Software Architecture Book - Part 1\ndate: 2023-07-17 18:50:03\ntags: [software-architecture, books]\ncategory: Software Architecture\nthumbnail: images/books/cover-fundamentals-software-architecture.png\nexcerpt: Here I have the relevant points to me of the book Fundamentals of Software Architecture by Mark Richards and Neal Ford. This part is focused on foundations.\n---\n\n## Fundamentals of Software Architecture\n\n### Book Details\n\n- 📖 **Title**: [Fundamentals of Software Architecture](https://www.oreilly.com/library/view/fundamentals-of-software/9781492043447/)\n- ✍️ **Author**: Mark Richards, Neal Ford\n- 📆 **Publication Year**: 2020\n\nThis year **2023** I've started to read more books, and I've decided to write a summary of each book I read. This is the first one, and I hope you enjoy it.\n\n### Summary\n\nThis book is a great introduction to software architecture, it covers the basics of software architecture, and it's a great starting point for anyone who wants to learn more about software architecture. Here are some of the topics covered in this book and I want to answer the self-assessment questions for each chapter.\n\n---\n\n## Chapter 1: Introduction\n\n1. **What are the four dimensions that define software architecture?**\n\n![four dimensions software architecture](images/books/software-architecture-four-dimensions.png)\n\n- **Architecture characteristics**: Define the success criteria of a system, which is generally orthogonal to the functionality of the system. Notice that all of the characteristics listed do not require knowledge of the functionality of the system, yet they are required in order for the system to function properly.\n- **Architecture Decisions**: Define the rules for how a system should be constructed. For example, an architect might make an architecture decision that only the business and services layers within a layered architecture can access the database.\n- **Structure**: Refers to the type of architecture style (or styles) the system is implemented in (such as microservices, layered, or microkernel)\n- Design principles: Define a guideline of principles rather than a hard-and-fast rule.\n\n2. **What is the difference between an architecture decision and a design principle?**\n\n- Architecture decisions form the constraints of the system and direct the development teams on what is and what isn’t allowed.\n- Design principles are guidelines that help development teams make decisions about how to implement the system.\n\n3. **List the eight core expectations of a software architect**\n\n🤓 The eight core expectations of a software architect are:\n\n- Make architecture decisions\n- Continually analyze the architecture\n- Keep current with latest trends\n- Ensure compliance with decisions\n- Diverse exposure and experience\n- Have business domain knowledge\n- Possess interpersonal skills\n- Understand and navigate politics\n\n4. **What is the First Law of Software Architecture?**\n\n> Everything in software architecture is a trade-off. -- First Law of Software Architecture\n\n> Why is more important than how. -- Second Law of Software Architecture\n\n---\n\n## Chapter 2: Architectural Thinking\n\n1. **Describe the traditional approach of architecture versus development and explain why that approach no longer works.**\n\n![Traditional approach architecture vs design](images/books/software-architecture-traditional-approach.png)\n\n🤓 The traditional approach implies that architecture is something that is fully defined up front and then merely implemented by developers. However, this approach has been found to have several major drawbacks:\n\n- **Lack of Flexibility**: Once the architecture is defined, it can be very difficult to change. However, software development is often a highly unpredictable process, and changes in requirements or technologies may necessitate changes in the architecture.\n\n- **Communication Breakdown**: Because architects and developers often work in isolation from each other, there can be a lack of understanding and communication between the two groups. Architects may make decisions without fully understanding the implementation implications, and developers may struggle to implement an architecture they had no part in designing.\n\n- **Reality Gap**: Architectural designs often look good on paper but may not work as well when actually implemented. This gap between design and reality can lead to problems and delays.\n\n2. **List the three levels of knowledge in the knowledge triangle and provide an example of each.**\n\n![Knowledge representation](images/books/software-architecture-knowledge-representation.png)\n\n🤓 Our knowledge pyramid illustrates how fundamentally different the role of architect compares to developer. Developers spend their whole careers honing expertise, and transitioning to the architect role means a shift in that perspective, which many individuals find difficult. The architect role requires a different set of skills, and the knowledge pyramid illustrates this shift.\n\n3. **Why is it more important for an architect to focus on technical breadth rather than technical depth?**\n\n🤓 Focusing on technical breadth means acquiring a wide-ranging understanding of various technologies, patterns, languages, platforms, and principles. This breadth allows architects to:\n\n- **See the Big Picture**: Understand how different components and technologies fit together and influence each other. This is essential when designing complex systems where decisions in one area can significantly impact other areas.\n\n- **Make Informed Decisions**: Choose the most suitable technologies and designs for the system's requirements. A broad knowledge allows architects to consider a wider range of options and make more informed decisions.\n\n- **Communicate Effectively**: Communicate with different stakeholders, including developers, project managers, business stakeholders, and others. Each group may have different areas of expertise and concerns, and a broad understanding helps architects bridge these gaps.\n\n- **Adapt to Change**: Stay adaptable and resilient in the face of changing requirements, technologies, and business environments. A wide knowledge base allows architects to learn and adopt new technologies more easily.\n\nFor example, as an architect, it is more beneficial to know that five solutions exist for a particular problem than to have singular expertise in only one.\n\n4. **What are some of the ways of maintaining your technical depth and remaining hands-on as an architect?**\n\n- 🤓 **Coding**: Try to spend some of your time coding. This could be writing prototypes, creating proofs of concept, fixing bugs, or contributing to critical parts of the system. This not only helps maintain your coding skills but also gives you firsthand experience with the technologies you're using.\n\n- **Education**: Continually educate yourself about new technologies, languages, and methodologies. This can involve reading books, articles, or research papers, attending conferences or webinars, or taking online courses.\n\n- **Personal Projects**: Work on personal projects outside of your day-to-day work. This can be a great way to learn new technologies, experiment with different architectures, or just keep your coding skills sharp.\n\n- **Code Reviews**: Participate in code reviews. This gives you a chance to see how the architecture is being implemented, spot potential issues, and provide valuable feedback to developers.\n\n- **Pair Programming**: Occasionally pair program with developers. This is another great way to stay familiar with the codebase and the challenges that developers face.\n\n- **Prototyping**: When considering a new technology or architectural approach, create a small prototype. This can provide valuable insights that you wouldn't get from reading about it alone.\n\n- **Stay Connected with the Developer Community**: Participate in tech meetups, online forums, open-source projects, and other communities. This can keep you updated on new technologies and best practices, and provide opportunities to learn from others.\n\nBy staying hands-on and maintaining technical depth, you'll be a more effective architect. You'll understand the challenges that developers face, make better architectural decisions, and be able to communicate more effectively with your team.\n\n---\n\n## Chapter 3 - Modularity\n\n1. What is meant by the term connascence?\n\n🤓 **Connascence** is a metric used to describe the coupling or the degree of interdependence between two or more parts of a software system.\n\n2. What is the difference between static and dynamic connascence?\n\n🤓 **Static connascence** is coupling that can be determined by examining the source code, while **dynamic connascence** is coupling that can only be determined when the code is running.\n\n3. What does connascence of type mean? Is it static or dynamic connascence?\n\n🤓 **Connascence of type** is when multiple parts of a program must agree on the type of an entity. It is a form of static connascence.\n\n4. What is the strongest form of connascence?\n\n🤓 **Connascence of Identity** is the strongest form of connascence. It refers to when multiple parts of the system depend on a mutable entity's identity.\n\n5. What is the weakest form of connascence?\n\n🤓 **Connascence of Name**, where multiple parts of the system must agree on the name of an entity, is considered the weakest form of connascence.\n\n6. Which is preferred within a code base—static or dynamic connascence?\n\n🤓 **Static connascence** is generally preferred within a code base as it is easier to identify and manage than dynamic connascence.\n\n---\n\n## Chapter 4 - Modularity\n\n![Architecture Characteristics](images/books/software-architecture-characteristics.png)\n\n**1. What three criteria must an attribute meet to be considered an architecture characteristic?**\n\n🤓 An attribute must be testable, contribute to the architecture of the system, and provide a way to measure and quantify it.\n\n**2. What is the difference between an implicit characteristic and an explicit one? Provide an example of each.**\n\n![Architecture Characteristics](images/books/software-architecture-explicit-implicit-characteristics.png)\n\n🤓 An implicit characteristic is one that is required or assumed but not explicitly stated, like usability. An explicit characteristic is one that is directly stated and designed for, such as response time.\n\n**3. Provide an example of an operational characteristic**\n\n🤓 An example of an operational characteristic is availability, which refers to the system's ability to be in a state to perform its designated function during operation.\n\n**4. Provide an example of a structural characteristic.**\n\n🤓 An example of a structural characteristic is modularity, referring to the degree to which a system's components may be separated and recombined.\n\n**5. Provide an example of a cross-cutting characteristic.**\n\n🤓 An example of a cross-cutting characteristic is security, which is the system's ability to resist unauthorized attempts at usage or behavior modification, affecting multiple components of the system.\n\n**6. Which architecture characteristic is more important to strive for—availability or performance?**\n\n🤓 The importance of availability versus performance **depends on the specific needs of the system being developed**. For a critical system where downtime could be costly, availability may be more important. For a system where speed is crucial for user satisfaction, performance may be more important. The context and requirements of the system dictate which characteristic is more important to strive for.\n","slug":"en/fundamentals-of-software-architecture-part-1","published":1,"updated":"2023-08-07T15:32:38.334Z","comments":0,"layout":"post","photos":[],"link":"2023/07/17/en/fundamentals-of-software-architecture-part-1","_id":"clnwi7gan0002qbt28kvmc8bx","content":"<h2 id=\"fundamentals-of-software-architecture\">Fundamentals of Software Architecture<a title=\"#fundamentals-of-software-architecture\" href=\"#fundamentals-of-software-architecture\"></a></h2>\n<h3 id=\"book-details\">Book Details<a title=\"#book-details\" href=\"#book-details\"></a></h3>\n<ul>\n<li>📖 <strong>Title</strong>: <a href=\"https://www.oreilly.com/library/view/fundamentals-of-software/9781492043447/\" target=\"_blank\">Fundamentals of Software Architecture</a></li>\n<li>✍️ <strong>Author</strong>: Mark Richards, Neal Ford</li>\n<li>📆 <strong>Publication Year</strong>: 2020</li>\n</ul>\n<p>This year <strong>2023</strong> I’ve started to read more books, and I’ve decided to write a summary of each book I read. This is the first one, and I hope you enjoy it.</p>\n<h3 id=\"summary\">Summary<a title=\"#summary\" href=\"#summary\"></a></h3>\n<p>This book is a great introduction to software architecture, it covers the basics of software architecture, and it’s a great starting point for anyone who wants to learn more about software architecture. Here are some of the topics covered in this book and I want to answer the self-assessment questions for each chapter.</p>\n<hr>\n<h2 id=\"chapter-1:-introduction\">Chapter 1: Introduction<a title=\"#chapter-1:-introduction\" href=\"#chapter-1:-introduction\"></a></h2>\n<ol>\n<li><strong>What are the four dimensions that define software architecture?</strong></li>\n</ol>\n<p><img src=\"images/books/software-architecture-four-dimensions.png\" alt=\"four dimensions software architecture\" loading=\"lazy\" class=\"φbp\"></p>\n<ul>\n<li><strong>Architecture characteristics</strong>: Define the success criteria of a system, which is generally orthogonal to the functionality of the system. Notice that all of the characteristics listed do not require knowledge of the functionality of the system, yet they are required in order for the system to function properly.</li>\n<li><strong>Architecture Decisions</strong>: Define the rules for how a system should be constructed. For example, an architect might make an architecture decision that only the business and services layers within a layered architecture can access the database.</li>\n<li><strong>Structure</strong>: Refers to the type of architecture style (or styles) the system is implemented in (such as microservices, layered, or microkernel)</li>\n<li>Design principles: Define a guideline of principles rather than a hard-and-fast rule.</li>\n</ul>\n<ol start=\"2\">\n<li><strong>What is the difference between an architecture decision and a design principle?</strong></li>\n</ol>\n<ul>\n<li>Architecture decisions form the constraints of the system and direct the development teams on what is and what isn’t allowed.</li>\n<li>Design principles are guidelines that help development teams make decisions about how to implement the system.</li>\n</ul>\n<ol start=\"3\">\n<li><strong>List the eight core expectations of a software architect</strong></li>\n</ol>\n<p>🤓 The eight core expectations of a software architect are:</p>\n<ul>\n<li>Make architecture decisions</li>\n<li>Continually analyze the architecture</li>\n<li>Keep current with latest trends</li>\n<li>Ensure compliance with decisions</li>\n<li>Diverse exposure and experience</li>\n<li>Have business domain knowledge</li>\n<li>Possess interpersonal skills</li>\n<li>Understand and navigate politics</li>\n</ul>\n<ol start=\"4\">\n<li><strong>What is the First Law of Software Architecture?</strong></li>\n</ol>\n<blockquote>\n<p>Everything in software architecture is a trade-off. – First Law of Software Architecture</p>\n</blockquote>\n<blockquote>\n<p>Why is more important than how. – Second Law of Software Architecture</p>\n</blockquote>\n<hr>\n<h2 id=\"chapter-2:-architectural-thinking\">Chapter 2: Architectural Thinking<a title=\"#chapter-2:-architectural-thinking\" href=\"#chapter-2:-architectural-thinking\"></a></h2>\n<ol>\n<li><strong>Describe the traditional approach of architecture versus development and explain why that approach no longer works.</strong></li>\n</ol>\n<p><img src=\"images/books/software-architecture-traditional-approach.png\" alt=\"Traditional approach architecture vs design\" loading=\"lazy\" class=\"φbp\"></p>\n<p>🤓 The traditional approach implies that architecture is something that is fully defined up front and then merely implemented by developers. However, this approach has been found to have several major drawbacks:</p>\n<ul>\n<li>\n<p><strong>Lack of Flexibility</strong>: Once the architecture is defined, it can be very difficult to change. However, software development is often a highly unpredictable process, and changes in requirements or technologies may necessitate changes in the architecture.</p>\n</li>\n<li>\n<p><strong>Communication Breakdown</strong>: Because architects and developers often work in isolation from each other, there can be a lack of understanding and communication between the two groups. Architects may make decisions without fully understanding the implementation implications, and developers may struggle to implement an architecture they had no part in designing.</p>\n</li>\n<li>\n<p><strong>Reality Gap</strong>: Architectural designs often look good on paper but may not work as well when actually implemented. This gap between design and reality can lead to problems and delays.</p>\n</li>\n</ul>\n<ol start=\"2\">\n<li><strong>List the three levels of knowledge in the knowledge triangle and provide an example of each.</strong></li>\n</ol>\n<p><img src=\"images/books/software-architecture-knowledge-representation.png\" alt=\"Knowledge representation\" loading=\"lazy\" class=\"φbp\"></p>\n<p>🤓 Our knowledge pyramid illustrates how fundamentally different the role of architect compares to developer. Developers spend their whole careers honing expertise, and transitioning to the architect role means a shift in that perspective, which many individuals find difficult. The architect role requires a different set of skills, and the knowledge pyramid illustrates this shift.</p>\n<ol start=\"3\">\n<li><strong>Why is it more important for an architect to focus on technical breadth rather than technical depth?</strong></li>\n</ol>\n<p>🤓 Focusing on technical breadth means acquiring a wide-ranging understanding of various technologies, patterns, languages, platforms, and principles. This breadth allows architects to:</p>\n<ul>\n<li>\n<p><strong>See the Big Picture</strong>: Understand how different components and technologies fit together and influence each other. This is essential when designing complex systems where decisions in one area can significantly impact other areas.</p>\n</li>\n<li>\n<p><strong>Make Informed Decisions</strong>: Choose the most suitable technologies and designs for the system’s requirements. A broad knowledge allows architects to consider a wider range of options and make more informed decisions.</p>\n</li>\n<li>\n<p><strong>Communicate Effectively</strong>: Communicate with different stakeholders, including developers, project managers, business stakeholders, and others. Each group may have different areas of expertise and concerns, and a broad understanding helps architects bridge these gaps.</p>\n</li>\n<li>\n<p><strong>Adapt to Change</strong>: Stay adaptable and resilient in the face of changing requirements, technologies, and business environments. A wide knowledge base allows architects to learn and adopt new technologies more easily.</p>\n</li>\n</ul>\n<p>For example, as an architect, it is more beneficial to know that five solutions exist for a particular problem than to have singular expertise in only one.</p>\n<ol start=\"4\">\n<li><strong>What are some of the ways of maintaining your technical depth and remaining hands-on as an architect?</strong></li>\n</ol>\n<ul>\n<li>\n<p>🤓 <strong>Coding</strong>: Try to spend some of your time coding. This could be writing prototypes, creating proofs of concept, fixing bugs, or contributing to critical parts of the system. This not only helps maintain your coding skills but also gives you firsthand experience with the technologies you’re using.</p>\n</li>\n<li>\n<p><strong>Education</strong>: Continually educate yourself about new technologies, languages, and methodologies. This can involve reading books, articles, or research papers, attending conferences or webinars, or taking online courses.</p>\n</li>\n<li>\n<p><strong>Personal Projects</strong>: Work on personal projects outside of your day-to-day work. This can be a great way to learn new technologies, experiment with different architectures, or just keep your coding skills sharp.</p>\n</li>\n<li>\n<p><strong>Code Reviews</strong>: Participate in code reviews. This gives you a chance to see how the architecture is being implemented, spot potential issues, and provide valuable feedback to developers.</p>\n</li>\n<li>\n<p><strong>Pair Programming</strong>: Occasionally pair program with developers. This is another great way to stay familiar with the codebase and the challenges that developers face.</p>\n</li>\n<li>\n<p><strong>Prototyping</strong>: When considering a new technology or architectural approach, create a small prototype. This can provide valuable insights that you wouldn’t get from reading about it alone.</p>\n</li>\n<li>\n<p><strong>Stay Connected with the Developer Community</strong>: Participate in tech meetups, online forums, open-source projects, and other communities. This can keep you updated on new technologies and best practices, and provide opportunities to learn from others.</p>\n</li>\n</ul>\n<p>By staying hands-on and maintaining technical depth, you’ll be a more effective architect. You’ll understand the challenges that developers face, make better architectural decisions, and be able to communicate more effectively with your team.</p>\n<hr>\n<h2 id=\"chapter-3---modularity\">Chapter 3 - Modularity<a title=\"#chapter-3---modularity\" href=\"#chapter-3---modularity\"></a></h2>\n<ol>\n<li>What is meant by the term connascence?</li>\n</ol>\n<p>🤓 <strong>Connascence</strong> is a metric used to describe the coupling or the degree of interdependence between two or more parts of a software system.</p>\n<ol start=\"2\">\n<li>What is the difference between static and dynamic connascence?</li>\n</ol>\n<p>🤓 <strong>Static connascence</strong> is coupling that can be determined by examining the source code, while <strong>dynamic connascence</strong> is coupling that can only be determined when the code is running.</p>\n<ol start=\"3\">\n<li>What does connascence of type mean? Is it static or dynamic connascence?</li>\n</ol>\n<p>🤓 <strong>Connascence of type</strong> is when multiple parts of a program must agree on the type of an entity. It is a form of static connascence.</p>\n<ol start=\"4\">\n<li>What is the strongest form of connascence?</li>\n</ol>\n<p>🤓 <strong>Connascence of Identity</strong> is the strongest form of connascence. It refers to when multiple parts of the system depend on a mutable entity’s identity.</p>\n<ol start=\"5\">\n<li>What is the weakest form of connascence?</li>\n</ol>\n<p>🤓 <strong>Connascence of Name</strong>, where multiple parts of the system must agree on the name of an entity, is considered the weakest form of connascence.</p>\n<ol start=\"6\">\n<li>Which is preferred within a code base—static or dynamic connascence?</li>\n</ol>\n<p>🤓 <strong>Static connascence</strong> is generally preferred within a code base as it is easier to identify and manage than dynamic connascence.</p>\n<hr>\n<h2 id=\"chapter-4---modularity\">Chapter 4 - Modularity<a title=\"#chapter-4---modularity\" href=\"#chapter-4---modularity\"></a></h2>\n<p><img src=\"images/books/software-architecture-characteristics.png\" alt=\"Architecture Characteristics\" loading=\"lazy\" class=\"φbp\"></p>\n<p><strong>1. What three criteria must an attribute meet to be considered an architecture characteristic?</strong></p>\n<p>🤓 An attribute must be testable, contribute to the architecture of the system, and provide a way to measure and quantify it.</p>\n<p><strong>2. What is the difference between an implicit characteristic and an explicit one? Provide an example of each.</strong></p>\n<p><img src=\"images/books/software-architecture-explicit-implicit-characteristics.png\" alt=\"Architecture Characteristics\" loading=\"lazy\" class=\"φbp\"></p>\n<p>🤓 An implicit characteristic is one that is required or assumed but not explicitly stated, like usability. An explicit characteristic is one that is directly stated and designed for, such as response time.</p>\n<p><strong>3. Provide an example of an operational characteristic</strong></p>\n<p>🤓 An example of an operational characteristic is availability, which refers to the system’s ability to be in a state to perform its designated function during operation.</p>\n<p><strong>4. Provide an example of a structural characteristic.</strong></p>\n<p>🤓 An example of a structural characteristic is modularity, referring to the degree to which a system’s components may be separated and recombined.</p>\n<p><strong>5. Provide an example of a cross-cutting characteristic.</strong></p>\n<p>🤓 An example of a cross-cutting characteristic is security, which is the system’s ability to resist unauthorized attempts at usage or behavior modification, affecting multiple components of the system.</p>\n<p><strong>6. Which architecture characteristic is more important to strive for—availability or performance?</strong></p>\n<p>🤓 The importance of availability versus performance <strong>depends on the specific needs of the system being developed</strong>. For a critical system where downtime could be costly, availability may be more important. For a system where speed is crucial for user satisfaction, performance may be more important. The context and requirements of the system dictate which characteristic is more important to strive for.</p>\n","site":{"data":{}},"more":"<h2 id=\"fundamentals-of-software-architecture\">Fundamentals of Software Architecture<a title=\"#fundamentals-of-software-architecture\" href=\"#fundamentals-of-software-architecture\"></a></h2>\n<h3 id=\"book-details\">Book Details<a title=\"#book-details\" href=\"#book-details\"></a></h3>\n<ul>\n<li>📖 <strong>Title</strong>: <a href=\"https://www.oreilly.com/library/view/fundamentals-of-software/9781492043447/\" target=\"_blank\">Fundamentals of Software Architecture</a></li>\n<li>✍️ <strong>Author</strong>: Mark Richards, Neal Ford</li>\n<li>📆 <strong>Publication Year</strong>: 2020</li>\n</ul>\n<p>This year <strong>2023</strong> I’ve started to read more books, and I’ve decided to write a summary of each book I read. This is the first one, and I hope you enjoy it.</p>\n<h3 id=\"summary\">Summary<a title=\"#summary\" href=\"#summary\"></a></h3>\n<p>This book is a great introduction to software architecture, it covers the basics of software architecture, and it’s a great starting point for anyone who wants to learn more about software architecture. Here are some of the topics covered in this book and I want to answer the self-assessment questions for each chapter.</p>\n<hr>\n<h2 id=\"chapter-1:-introduction\">Chapter 1: Introduction<a title=\"#chapter-1:-introduction\" href=\"#chapter-1:-introduction\"></a></h2>\n<ol>\n<li><strong>What are the four dimensions that define software architecture?</strong></li>\n</ol>\n<p><img src=\"images/books/software-architecture-four-dimensions.png\" alt=\"four dimensions software architecture\" loading=\"lazy\" class=\"φbp\"></p>\n<ul>\n<li><strong>Architecture characteristics</strong>: Define the success criteria of a system, which is generally orthogonal to the functionality of the system. Notice that all of the characteristics listed do not require knowledge of the functionality of the system, yet they are required in order for the system to function properly.</li>\n<li><strong>Architecture Decisions</strong>: Define the rules for how a system should be constructed. For example, an architect might make an architecture decision that only the business and services layers within a layered architecture can access the database.</li>\n<li><strong>Structure</strong>: Refers to the type of architecture style (or styles) the system is implemented in (such as microservices, layered, or microkernel)</li>\n<li>Design principles: Define a guideline of principles rather than a hard-and-fast rule.</li>\n</ul>\n<ol start=\"2\">\n<li><strong>What is the difference between an architecture decision and a design principle?</strong></li>\n</ol>\n<ul>\n<li>Architecture decisions form the constraints of the system and direct the development teams on what is and what isn’t allowed.</li>\n<li>Design principles are guidelines that help development teams make decisions about how to implement the system.</li>\n</ul>\n<ol start=\"3\">\n<li><strong>List the eight core expectations of a software architect</strong></li>\n</ol>\n<p>🤓 The eight core expectations of a software architect are:</p>\n<ul>\n<li>Make architecture decisions</li>\n<li>Continually analyze the architecture</li>\n<li>Keep current with latest trends</li>\n<li>Ensure compliance with decisions</li>\n<li>Diverse exposure and experience</li>\n<li>Have business domain knowledge</li>\n<li>Possess interpersonal skills</li>\n<li>Understand and navigate politics</li>\n</ul>\n<ol start=\"4\">\n<li><strong>What is the First Law of Software Architecture?</strong></li>\n</ol>\n<blockquote>\n<p>Everything in software architecture is a trade-off. – First Law of Software Architecture</p>\n</blockquote>\n<blockquote>\n<p>Why is more important than how. – Second Law of Software Architecture</p>\n</blockquote>\n<hr>\n<h2 id=\"chapter-2:-architectural-thinking\">Chapter 2: Architectural Thinking<a title=\"#chapter-2:-architectural-thinking\" href=\"#chapter-2:-architectural-thinking\"></a></h2>\n<ol>\n<li><strong>Describe the traditional approach of architecture versus development and explain why that approach no longer works.</strong></li>\n</ol>\n<p><img src=\"images/books/software-architecture-traditional-approach.png\" alt=\"Traditional approach architecture vs design\" loading=\"lazy\" class=\"φbp\"></p>\n<p>🤓 The traditional approach implies that architecture is something that is fully defined up front and then merely implemented by developers. However, this approach has been found to have several major drawbacks:</p>\n<ul>\n<li>\n<p><strong>Lack of Flexibility</strong>: Once the architecture is defined, it can be very difficult to change. However, software development is often a highly unpredictable process, and changes in requirements or technologies may necessitate changes in the architecture.</p>\n</li>\n<li>\n<p><strong>Communication Breakdown</strong>: Because architects and developers often work in isolation from each other, there can be a lack of understanding and communication between the two groups. Architects may make decisions without fully understanding the implementation implications, and developers may struggle to implement an architecture they had no part in designing.</p>\n</li>\n<li>\n<p><strong>Reality Gap</strong>: Architectural designs often look good on paper but may not work as well when actually implemented. This gap between design and reality can lead to problems and delays.</p>\n</li>\n</ul>\n<ol start=\"2\">\n<li><strong>List the three levels of knowledge in the knowledge triangle and provide an example of each.</strong></li>\n</ol>\n<p><img src=\"images/books/software-architecture-knowledge-representation.png\" alt=\"Knowledge representation\" loading=\"lazy\" class=\"φbp\"></p>\n<p>🤓 Our knowledge pyramid illustrates how fundamentally different the role of architect compares to developer. Developers spend their whole careers honing expertise, and transitioning to the architect role means a shift in that perspective, which many individuals find difficult. The architect role requires a different set of skills, and the knowledge pyramid illustrates this shift.</p>\n<ol start=\"3\">\n<li><strong>Why is it more important for an architect to focus on technical breadth rather than technical depth?</strong></li>\n</ol>\n<p>🤓 Focusing on technical breadth means acquiring a wide-ranging understanding of various technologies, patterns, languages, platforms, and principles. This breadth allows architects to:</p>\n<ul>\n<li>\n<p><strong>See the Big Picture</strong>: Understand how different components and technologies fit together and influence each other. This is essential when designing complex systems where decisions in one area can significantly impact other areas.</p>\n</li>\n<li>\n<p><strong>Make Informed Decisions</strong>: Choose the most suitable technologies and designs for the system’s requirements. A broad knowledge allows architects to consider a wider range of options and make more informed decisions.</p>\n</li>\n<li>\n<p><strong>Communicate Effectively</strong>: Communicate with different stakeholders, including developers, project managers, business stakeholders, and others. Each group may have different areas of expertise and concerns, and a broad understanding helps architects bridge these gaps.</p>\n</li>\n<li>\n<p><strong>Adapt to Change</strong>: Stay adaptable and resilient in the face of changing requirements, technologies, and business environments. A wide knowledge base allows architects to learn and adopt new technologies more easily.</p>\n</li>\n</ul>\n<p>For example, as an architect, it is more beneficial to know that five solutions exist for a particular problem than to have singular expertise in only one.</p>\n<ol start=\"4\">\n<li><strong>What are some of the ways of maintaining your technical depth and remaining hands-on as an architect?</strong></li>\n</ol>\n<ul>\n<li>\n<p>🤓 <strong>Coding</strong>: Try to spend some of your time coding. This could be writing prototypes, creating proofs of concept, fixing bugs, or contributing to critical parts of the system. This not only helps maintain your coding skills but also gives you firsthand experience with the technologies you’re using.</p>\n</li>\n<li>\n<p><strong>Education</strong>: Continually educate yourself about new technologies, languages, and methodologies. This can involve reading books, articles, or research papers, attending conferences or webinars, or taking online courses.</p>\n</li>\n<li>\n<p><strong>Personal Projects</strong>: Work on personal projects outside of your day-to-day work. This can be a great way to learn new technologies, experiment with different architectures, or just keep your coding skills sharp.</p>\n</li>\n<li>\n<p><strong>Code Reviews</strong>: Participate in code reviews. This gives you a chance to see how the architecture is being implemented, spot potential issues, and provide valuable feedback to developers.</p>\n</li>\n<li>\n<p><strong>Pair Programming</strong>: Occasionally pair program with developers. This is another great way to stay familiar with the codebase and the challenges that developers face.</p>\n</li>\n<li>\n<p><strong>Prototyping</strong>: When considering a new technology or architectural approach, create a small prototype. This can provide valuable insights that you wouldn’t get from reading about it alone.</p>\n</li>\n<li>\n<p><strong>Stay Connected with the Developer Community</strong>: Participate in tech meetups, online forums, open-source projects, and other communities. This can keep you updated on new technologies and best practices, and provide opportunities to learn from others.</p>\n</li>\n</ul>\n<p>By staying hands-on and maintaining technical depth, you’ll be a more effective architect. You’ll understand the challenges that developers face, make better architectural decisions, and be able to communicate more effectively with your team.</p>\n<hr>\n<h2 id=\"chapter-3---modularity\">Chapter 3 - Modularity<a title=\"#chapter-3---modularity\" href=\"#chapter-3---modularity\"></a></h2>\n<ol>\n<li>What is meant by the term connascence?</li>\n</ol>\n<p>🤓 <strong>Connascence</strong> is a metric used to describe the coupling or the degree of interdependence between two or more parts of a software system.</p>\n<ol start=\"2\">\n<li>What is the difference between static and dynamic connascence?</li>\n</ol>\n<p>🤓 <strong>Static connascence</strong> is coupling that can be determined by examining the source code, while <strong>dynamic connascence</strong> is coupling that can only be determined when the code is running.</p>\n<ol start=\"3\">\n<li>What does connascence of type mean? Is it static or dynamic connascence?</li>\n</ol>\n<p>🤓 <strong>Connascence of type</strong> is when multiple parts of a program must agree on the type of an entity. It is a form of static connascence.</p>\n<ol start=\"4\">\n<li>What is the strongest form of connascence?</li>\n</ol>\n<p>🤓 <strong>Connascence of Identity</strong> is the strongest form of connascence. It refers to when multiple parts of the system depend on a mutable entity’s identity.</p>\n<ol start=\"5\">\n<li>What is the weakest form of connascence?</li>\n</ol>\n<p>🤓 <strong>Connascence of Name</strong>, where multiple parts of the system must agree on the name of an entity, is considered the weakest form of connascence.</p>\n<ol start=\"6\">\n<li>Which is preferred within a code base—static or dynamic connascence?</li>\n</ol>\n<p>🤓 <strong>Static connascence</strong> is generally preferred within a code base as it is easier to identify and manage than dynamic connascence.</p>\n<hr>\n<h2 id=\"chapter-4---modularity\">Chapter 4 - Modularity<a title=\"#chapter-4---modularity\" href=\"#chapter-4---modularity\"></a></h2>\n<p><img src=\"images/books/software-architecture-characteristics.png\" alt=\"Architecture Characteristics\" loading=\"lazy\" class=\"φbp\"></p>\n<p><strong>1. What three criteria must an attribute meet to be considered an architecture characteristic?</strong></p>\n<p>🤓 An attribute must be testable, contribute to the architecture of the system, and provide a way to measure and quantify it.</p>\n<p><strong>2. What is the difference between an implicit characteristic and an explicit one? Provide an example of each.</strong></p>\n<p><img src=\"images/books/software-architecture-explicit-implicit-characteristics.png\" alt=\"Architecture Characteristics\" loading=\"lazy\" class=\"φbp\"></p>\n<p>🤓 An implicit characteristic is one that is required or assumed but not explicitly stated, like usability. An explicit characteristic is one that is directly stated and designed for, such as response time.</p>\n<p><strong>3. Provide an example of an operational characteristic</strong></p>\n<p>🤓 An example of an operational characteristic is availability, which refers to the system’s ability to be in a state to perform its designated function during operation.</p>\n<p><strong>4. Provide an example of a structural characteristic.</strong></p>\n<p>🤓 An example of a structural characteristic is modularity, referring to the degree to which a system’s components may be separated and recombined.</p>\n<p><strong>5. Provide an example of a cross-cutting characteristic.</strong></p>\n<p>🤓 An example of a cross-cutting characteristic is security, which is the system’s ability to resist unauthorized attempts at usage or behavior modification, affecting multiple components of the system.</p>\n<p><strong>6. Which architecture characteristic is more important to strive for—availability or performance?</strong></p>\n<p>🤓 The importance of availability versus performance <strong>depends on the specific needs of the system being developed</strong>. For a critical system where downtime could be costly, availability may be more important. For a system where speed is crucial for user satisfaction, performance may be more important. The context and requirements of the system dictate which characteristic is more important to strive for.</p>\n","date_formatted":{"ll":"Jul 17, 2023","L":"07/17/2023","MM-DD":"07-17"},"plink":"http://codesandtags.io/blog/2023/07/17/en/fundamentals-of-software-architecture-part-1/","type":"post","toc":[{"id":"fundamentals-of-software-architecture","title":"Fundamentals of Software Architecture","index":"1","children":[{"id":"book-details","title":"Book Details","index":"1.1"},{"id":"summary","title":"Summary","index":"1.2"}]},{"id":"chapter-1:-introduction","title":"Chapter 1: Introduction","index":"2"},{"id":"chapter-2:-architectural-thinking","title":"Chapter 2: Architectural Thinking","index":"3"},{"id":"chapter-3---modularity","title":"Chapter 3 - Modularity","index":"4"},{"id":"chapter-4---modularity","title":"Chapter 4 - Modularity","index":"5"}],"reading_time":"1615 words in 11 min"},{"title":"Fundamentals of Software Architecture Book - Part 2","author":"codesandtags","date":"2023-07-21T22:43:27.000Z","thumbnail":"images/books/cover-fundamentals-software-architecture.png","excerpt":"Here I have the relevant points to me of the book Fundamentals of Software Architecture by Mark Richards and Neal Ford. This part is focused on Architecture characteristics and fitness functions.","_content":"\n## Fundamentals of Software Architecture\n\n### Book Details\n\n- 📖 **Title**: [Fundamentals of Software Architecture](https://www.oreilly.com/library/view/fundamentals-of-software/9781492043447/)\n- ✍️ **Author**: Mark Richards, Neal Ford\n- 📆 **Publication Year**: 2020\n\n### Summary\n\nHere I have the relevant points to me of the book Fundamentals of Software Architecture by Mark Richards and Neal Ford. This part is focused on Architecture characteristics and fitness functions.\n\n---\n\n## Chapter 5: Identifying Architecture Characteristics\n\n1. **Give a reason why it is a good practice to limit the number of characteristics (“-ilities”) an architecture should support.**\n\n🤓 It's good practice to limit the number of \"-ilities\" because each characteristic can introduce complexity into the architecture, potentially affecting its performance, maintainability, and other aspects. Moreover, some characteristics can conflict with others, making it a balancing act to satisfy all needs. Focusing on the most critical characteristics ensures a lean and effective architecture.\n\n2. **True or false: most architecture characteristics come from business requirements and user stories.**\n\n🤓 **False**. While business requirements and user stories do influence the architecture characteristics, they are not the sole sources. Architecture characteristics are often also derived from technical constraints, non-functional requirements, or the strategic direction of the organization.\n\n3. **If a business stakeholder states that time-to-market (i.e., getting new features and bug fixes pushed out to users as fast as possible) is the most important business concern, which architecture characteristics would the architecture need to support?**\n\n![Architectural Characteristics Table](images/books/software-architecture-characteristics-table.png)\n\n🤓 The architecture would need to support characteristics such as\n\n- **Agility** (for ease of implementing new features and fixing bugs)\n- **Deployability** (for fast and efficient deployment processes)\n- **Testability** (to quickly verify new features and bug fixes).\n\n4. **What is the difference between scalability and elasticity?**\n\n🤓 **Scalability** is the ability of a system to handle increased load by adding more resources or using existing resources more efficiently. **Elasticity**, on the other hand, is the ability of a system to dynamically scale up and down based on the demand, often realized through cloud-based infrastructures.\n\n5. **You find out that your company is about to undergo several major acquisitions to significantly increase its customer base. Which architectural characteristics should you be worried about?**\n\n🤓 The significant increase in the customer base would mean you should be particularly concerned about :\n\n- **Scalability** (to handle the increased load)\n- **Performance** (to ensure system responsiveness under increased load)\n- **Interoperability** (if the acquisitions involve integrating with other systems).\n\n---\n\n## Chapter 6: Measuring and Governing Architecture Characteristics\n\n1. **Why is cyclomatic complexity such an important metric to analyze for architecture?**\n\n🤓 **Cyclomatic complexity is a measure of the number of linearly independent paths through a program's source code**, essentially assessing its complexity. High cyclomatic complexity often indicates that a system might be hard to maintain, understand, and modify. Thus, it can serve as an early warning signal for potential architectural problems, encouraging refactoring or redesign to ensure simplicity and maintainability.\n\n2. **What is an architecture fitness function? How can they be used to analyze an architecture?**\n\n🤓 An architecture fitness function is a way to quantitatively measure an architectural characteristic to determine how well the architecture aligns with the intended design principles. They serve as a guide to developers by enforcing architectural constraints and driving architectural decisions. Fitness functions can be used to continually assess and validate that the evolving architecture remains fit for its purpose throughout its lifecycle.\n\n3. **Provide an example of an architecture fitness function to measure the scalability of an architecture.**\n\n🤓 An example of a fitness function for scalability could be the response time of the system as load increases. You could simulate a certain number of users (for instance, 10,000 users) hitting your system simultaneously, and measure the response time. If the response time stays within acceptable boundaries, your system can be considered scalable to that extent.\n\n4. **What is the most important criteria for an architecture characteristic to allow architects and developers to create fitness functions?**\n\n🤓 The most important criteria for an architecture characteristic is that it must be **quantifiable** and **measurable**. Fitness functions are objective metrics, so the architectural characteristic they are measuring must be translated into something that can be measured consistently and accurately. **If a characteristic can't be measured, it can't be tracked or evaluated through a fitness function**.\n\n---\n\n## Chapter 7: Scope of Architecture Characteristics\n\n1. **What is an architectural quantum, and why is it important to architecture?**\n\n🤓 An architectural quantum is the smallest independent, deployable unit in an architecture. The quantum often corresponds to a microservice in a microservices architecture. The concept is important because it helps architects design systems that are modular, loosely coupled, and can evolve independently.\n\n2. **Assume a system consisting of a single user interface with four independently deployed services, each containing its own separate database. Would this system have a single quantum or four quanta? Why?**\n\n🤓 This system would have four quanta. Each of the four services is independently deployable and contains its own database, thus each service is an architectural quantum.\n\n3. **Assume a system with an administration portion managing static reference data (such as the product catalog, and warehouse information) and a customer-facing portion managing the placement of orders. How many quanta should this system be and why? If you envision multiple quanta, could the admin quantum and customer-facing quantum share a database? If so, in which quantum would the database need to reside?**\n\n🤓 This system would most likely have two quanta - one for the administration portion and one for the customer-facing portion. Each has distinct responsibilities and could evolve independently. While the two quanta could technically share a database, it would be better for each to have its own to maintain the principle of independent deployability. Sharing a database would introduce a level of coupling that could inhibit the ability to deploy and scale each quantum independently. If they were to share a database, it would reside in neither quantum specifically, but would become a shared resource, which would need to be carefully managed to avoid conflicts and ensure consistency.\n\n---\n\n## Chapter 8: Component-Based Thinking\n\n1. **We define the term component as a building block of an application—something the application does. A component usually consist of a group of classes or source files. How are components typically manifested within an application or service?**\n\n![Architectural Characteristics Table](images/books/software-architecture-component-levels.png)\n\n🤓 Components are usually manifested within an application or service as distinct units of functionality. They can be organized as modules, packages, or services, each encapsulating a set of related functionalities. In object-oriented languages, a component can comprise multiple classes, interfaces, or packages. In a microservices architecture, each microservice can be considered a component.\n\n1. **What is the difference between technical partitioning and domain partitioning? Provide an example of each.**\n\n![Architectural Characteristics Table](images/books/software-architecture-technical-and-domain-partioning.png)\n\n🤓 **Technical partitioning** organizes components based on their technical role (like UI, business logic, data access), while **domain partitioning** organizes components based on business functionality or domain concepts. An example of technical partitioning could be a **three-tier architecture with separate layers** for presentation, business logic, and data storage. An example of domain partitioning **could be a microservices architecture** where each service corresponds to a specific business capability, like customer management or order processing.\n\n1. **What is the advantage of domain partitioning?**\n\n🤓 **Domain partitioning** aligns the software system with the business domain, making the system easier to understand and modify according to business changes. It facilitates independent development and deployment of different business capabilities, which can improve **speed, scalability, and resilience**.\n\n4. **Under what circumstances would technical partitioning be a better choice over domain partitioning?**\n\n🤓 Technical partitioning might be a better choice when building simple or monolithic applications where business functionality is not complex or diversified enough to justify the overhead of domain partitioning. It might also be preferred when the team's technical expertise significantly outweighs their understanding of the business domain.\n\n5. **What is the entity trap? Why is it not a good approach for component identification?**\n\n🤓 The entity trap is a common mistake made when identifying components based on entities in the business domain, **which often leads to anemic domain models with components that lack meaningful behavior**. This approach is problematic because it encourages a data-centric view of the system rather than focusing on the behavior and responsibilities of components, which can lead to poor encapsulation and high coupling.\n\n6. **When might you choose the workflow approach over the Actor/Actions approach when identifying core components?**\n\n🤓 The **workflow approach** might be preferred when the system's primary purpose is to facilitate a complex series of steps or transactions, where the sequence and interaction of operations are critical. On the other hand, the **Actor/Actions** approach could be better when the system is more centered around user interactions or when you have distinct user roles performing different actions on the system. The best choice depends on the specific context and requirements of the system.\n","source":"_posts/en/fundamentals-of-software-architecture-part-2.md","raw":"---\ntitle: Fundamentals of Software Architecture Book - Part 2\nauthor: codesandtags\ndate: 2023-07-21 18:43:27\ncategory: Software Architecture\nthumbnail: images/books/cover-fundamentals-software-architecture.png\ntags: [software-architecture, books]\nexcerpt: Here I have the relevant points to me of the book Fundamentals of Software Architecture by Mark Richards and Neal Ford. This part is focused on Architecture characteristics and fitness functions.\n---\n\n## Fundamentals of Software Architecture\n\n### Book Details\n\n- 📖 **Title**: [Fundamentals of Software Architecture](https://www.oreilly.com/library/view/fundamentals-of-software/9781492043447/)\n- ✍️ **Author**: Mark Richards, Neal Ford\n- 📆 **Publication Year**: 2020\n\n### Summary\n\nHere I have the relevant points to me of the book Fundamentals of Software Architecture by Mark Richards and Neal Ford. This part is focused on Architecture characteristics and fitness functions.\n\n---\n\n## Chapter 5: Identifying Architecture Characteristics\n\n1. **Give a reason why it is a good practice to limit the number of characteristics (“-ilities”) an architecture should support.**\n\n🤓 It's good practice to limit the number of \"-ilities\" because each characteristic can introduce complexity into the architecture, potentially affecting its performance, maintainability, and other aspects. Moreover, some characteristics can conflict with others, making it a balancing act to satisfy all needs. Focusing on the most critical characteristics ensures a lean and effective architecture.\n\n2. **True or false: most architecture characteristics come from business requirements and user stories.**\n\n🤓 **False**. While business requirements and user stories do influence the architecture characteristics, they are not the sole sources. Architecture characteristics are often also derived from technical constraints, non-functional requirements, or the strategic direction of the organization.\n\n3. **If a business stakeholder states that time-to-market (i.e., getting new features and bug fixes pushed out to users as fast as possible) is the most important business concern, which architecture characteristics would the architecture need to support?**\n\n![Architectural Characteristics Table](images/books/software-architecture-characteristics-table.png)\n\n🤓 The architecture would need to support characteristics such as\n\n- **Agility** (for ease of implementing new features and fixing bugs)\n- **Deployability** (for fast and efficient deployment processes)\n- **Testability** (to quickly verify new features and bug fixes).\n\n4. **What is the difference between scalability and elasticity?**\n\n🤓 **Scalability** is the ability of a system to handle increased load by adding more resources or using existing resources more efficiently. **Elasticity**, on the other hand, is the ability of a system to dynamically scale up and down based on the demand, often realized through cloud-based infrastructures.\n\n5. **You find out that your company is about to undergo several major acquisitions to significantly increase its customer base. Which architectural characteristics should you be worried about?**\n\n🤓 The significant increase in the customer base would mean you should be particularly concerned about :\n\n- **Scalability** (to handle the increased load)\n- **Performance** (to ensure system responsiveness under increased load)\n- **Interoperability** (if the acquisitions involve integrating with other systems).\n\n---\n\n## Chapter 6: Measuring and Governing Architecture Characteristics\n\n1. **Why is cyclomatic complexity such an important metric to analyze for architecture?**\n\n🤓 **Cyclomatic complexity is a measure of the number of linearly independent paths through a program's source code**, essentially assessing its complexity. High cyclomatic complexity often indicates that a system might be hard to maintain, understand, and modify. Thus, it can serve as an early warning signal for potential architectural problems, encouraging refactoring or redesign to ensure simplicity and maintainability.\n\n2. **What is an architecture fitness function? How can they be used to analyze an architecture?**\n\n🤓 An architecture fitness function is a way to quantitatively measure an architectural characteristic to determine how well the architecture aligns with the intended design principles. They serve as a guide to developers by enforcing architectural constraints and driving architectural decisions. Fitness functions can be used to continually assess and validate that the evolving architecture remains fit for its purpose throughout its lifecycle.\n\n3. **Provide an example of an architecture fitness function to measure the scalability of an architecture.**\n\n🤓 An example of a fitness function for scalability could be the response time of the system as load increases. You could simulate a certain number of users (for instance, 10,000 users) hitting your system simultaneously, and measure the response time. If the response time stays within acceptable boundaries, your system can be considered scalable to that extent.\n\n4. **What is the most important criteria for an architecture characteristic to allow architects and developers to create fitness functions?**\n\n🤓 The most important criteria for an architecture characteristic is that it must be **quantifiable** and **measurable**. Fitness functions are objective metrics, so the architectural characteristic they are measuring must be translated into something that can be measured consistently and accurately. **If a characteristic can't be measured, it can't be tracked or evaluated through a fitness function**.\n\n---\n\n## Chapter 7: Scope of Architecture Characteristics\n\n1. **What is an architectural quantum, and why is it important to architecture?**\n\n🤓 An architectural quantum is the smallest independent, deployable unit in an architecture. The quantum often corresponds to a microservice in a microservices architecture. The concept is important because it helps architects design systems that are modular, loosely coupled, and can evolve independently.\n\n2. **Assume a system consisting of a single user interface with four independently deployed services, each containing its own separate database. Would this system have a single quantum or four quanta? Why?**\n\n🤓 This system would have four quanta. Each of the four services is independently deployable and contains its own database, thus each service is an architectural quantum.\n\n3. **Assume a system with an administration portion managing static reference data (such as the product catalog, and warehouse information) and a customer-facing portion managing the placement of orders. How many quanta should this system be and why? If you envision multiple quanta, could the admin quantum and customer-facing quantum share a database? If so, in which quantum would the database need to reside?**\n\n🤓 This system would most likely have two quanta - one for the administration portion and one for the customer-facing portion. Each has distinct responsibilities and could evolve independently. While the two quanta could technically share a database, it would be better for each to have its own to maintain the principle of independent deployability. Sharing a database would introduce a level of coupling that could inhibit the ability to deploy and scale each quantum independently. If they were to share a database, it would reside in neither quantum specifically, but would become a shared resource, which would need to be carefully managed to avoid conflicts and ensure consistency.\n\n---\n\n## Chapter 8: Component-Based Thinking\n\n1. **We define the term component as a building block of an application—something the application does. A component usually consist of a group of classes or source files. How are components typically manifested within an application or service?**\n\n![Architectural Characteristics Table](images/books/software-architecture-component-levels.png)\n\n🤓 Components are usually manifested within an application or service as distinct units of functionality. They can be organized as modules, packages, or services, each encapsulating a set of related functionalities. In object-oriented languages, a component can comprise multiple classes, interfaces, or packages. In a microservices architecture, each microservice can be considered a component.\n\n1. **What is the difference between technical partitioning and domain partitioning? Provide an example of each.**\n\n![Architectural Characteristics Table](images/books/software-architecture-technical-and-domain-partioning.png)\n\n🤓 **Technical partitioning** organizes components based on their technical role (like UI, business logic, data access), while **domain partitioning** organizes components based on business functionality or domain concepts. An example of technical partitioning could be a **three-tier architecture with separate layers** for presentation, business logic, and data storage. An example of domain partitioning **could be a microservices architecture** where each service corresponds to a specific business capability, like customer management or order processing.\n\n1. **What is the advantage of domain partitioning?**\n\n🤓 **Domain partitioning** aligns the software system with the business domain, making the system easier to understand and modify according to business changes. It facilitates independent development and deployment of different business capabilities, which can improve **speed, scalability, and resilience**.\n\n4. **Under what circumstances would technical partitioning be a better choice over domain partitioning?**\n\n🤓 Technical partitioning might be a better choice when building simple or monolithic applications where business functionality is not complex or diversified enough to justify the overhead of domain partitioning. It might also be preferred when the team's technical expertise significantly outweighs their understanding of the business domain.\n\n5. **What is the entity trap? Why is it not a good approach for component identification?**\n\n🤓 The entity trap is a common mistake made when identifying components based on entities in the business domain, **which often leads to anemic domain models with components that lack meaningful behavior**. This approach is problematic because it encourages a data-centric view of the system rather than focusing on the behavior and responsibilities of components, which can lead to poor encapsulation and high coupling.\n\n6. **When might you choose the workflow approach over the Actor/Actions approach when identifying core components?**\n\n🤓 The **workflow approach** might be preferred when the system's primary purpose is to facilitate a complex series of steps or transactions, where the sequence and interaction of operations are critical. On the other hand, the **Actor/Actions** approach could be better when the system is more centered around user interactions or when you have distinct user roles performing different actions on the system. The best choice depends on the specific context and requirements of the system.\n","slug":"en/fundamentals-of-software-architecture-part-2","published":1,"updated":"2023-10-19T00:56:54.988Z","comments":0,"layout":"post","photos":[],"link":"2023/07/21/en/fundamentals-of-software-architecture-part-2","_id":"clnwi7gar0005qbt2amhxc97t","content":"<h2 id=\"fundamentals-of-software-architecture\">Fundamentals of Software Architecture<a title=\"#fundamentals-of-software-architecture\" href=\"#fundamentals-of-software-architecture\"></a></h2>\n<h3 id=\"book-details\">Book Details<a title=\"#book-details\" href=\"#book-details\"></a></h3>\n<ul>\n<li>📖 <strong>Title</strong>: <a href=\"https://www.oreilly.com/library/view/fundamentals-of-software/9781492043447/\" target=\"_blank\">Fundamentals of Software Architecture</a></li>\n<li>✍️ <strong>Author</strong>: Mark Richards, Neal Ford</li>\n<li>📆 <strong>Publication Year</strong>: 2020</li>\n</ul>\n<h3 id=\"summary\">Summary<a title=\"#summary\" href=\"#summary\"></a></h3>\n<p>Here I have the relevant points to me of the book Fundamentals of Software Architecture by Mark Richards and Neal Ford. This part is focused on Architecture characteristics and fitness functions.</p>\n<hr>\n<h2 id=\"chapter-5:-identifying-architecture-characteristics\">Chapter 5: Identifying Architecture Characteristics<a title=\"#chapter-5:-identifying-architecture-characteristics\" href=\"#chapter-5:-identifying-architecture-characteristics\"></a></h2>\n<ol>\n<li><strong>Give a reason why it is a good practice to limit the number of characteristics (“-ilities”) an architecture should support.</strong></li>\n</ol>\n<p>🤓 It’s good practice to limit the number of “-ilities” because each characteristic can introduce complexity into the architecture, potentially affecting its performance, maintainability, and other aspects. Moreover, some characteristics can conflict with others, making it a balancing act to satisfy all needs. Focusing on the most critical characteristics ensures a lean and effective architecture.</p>\n<ol start=\"2\">\n<li><strong>True or false: most architecture characteristics come from business requirements and user stories.</strong></li>\n</ol>\n<p>🤓 <strong>False</strong>. While business requirements and user stories do influence the architecture characteristics, they are not the sole sources. Architecture characteristics are often also derived from technical constraints, non-functional requirements, or the strategic direction of the organization.</p>\n<ol start=\"3\">\n<li><strong>If a business stakeholder states that time-to-market (i.e., getting new features and bug fixes pushed out to users as fast as possible) is the most important business concern, which architecture characteristics would the architecture need to support?</strong></li>\n</ol>\n<p><img src=\"images/books/software-architecture-characteristics-table.png\" alt=\"Architectural Characteristics Table\" loading=\"lazy\" class=\"φbp\"></p>\n<p>🤓 The architecture would need to support characteristics such as</p>\n<ul>\n<li><strong>Agility</strong> (for ease of implementing new features and fixing bugs)</li>\n<li><strong>Deployability</strong> (for fast and efficient deployment processes)</li>\n<li><strong>Testability</strong> (to quickly verify new features and bug fixes).</li>\n</ul>\n<ol start=\"4\">\n<li><strong>What is the difference between scalability and elasticity?</strong></li>\n</ol>\n<p>🤓 <strong>Scalability</strong> is the ability of a system to handle increased load by adding more resources or using existing resources more efficiently. <strong>Elasticity</strong>, on the other hand, is the ability of a system to dynamically scale up and down based on the demand, often realized through cloud-based infrastructures.</p>\n<ol start=\"5\">\n<li><strong>You find out that your company is about to undergo several major acquisitions to significantly increase its customer base. Which architectural characteristics should you be worried about?</strong></li>\n</ol>\n<p>🤓 The significant increase in the customer base would mean you should be particularly concerned about :</p>\n<ul>\n<li><strong>Scalability</strong> (to handle the increased load)</li>\n<li><strong>Performance</strong> (to ensure system responsiveness under increased load)</li>\n<li><strong>Interoperability</strong> (if the acquisitions involve integrating with other systems).</li>\n</ul>\n<hr>\n<h2 id=\"chapter-6:-measuring-and-governing-architecture-characteristics\">Chapter 6: Measuring and Governing Architecture Characteristics<a title=\"#chapter-6:-measuring-and-governing-architecture-characteristics\" href=\"#chapter-6:-measuring-and-governing-architecture-characteristics\"></a></h2>\n<ol>\n<li><strong>Why is cyclomatic complexity such an important metric to analyze for architecture?</strong></li>\n</ol>\n<p>🤓 <strong>Cyclomatic complexity is a measure of the number of linearly independent paths through a program’s source code</strong>, essentially assessing its complexity. High cyclomatic complexity often indicates that a system might be hard to maintain, understand, and modify. Thus, it can serve as an early warning signal for potential architectural problems, encouraging refactoring or redesign to ensure simplicity and maintainability.</p>\n<ol start=\"2\">\n<li><strong>What is an architecture fitness function? How can they be used to analyze an architecture?</strong></li>\n</ol>\n<p>🤓 An architecture fitness function is a way to quantitatively measure an architectural characteristic to determine how well the architecture aligns with the intended design principles. They serve as a guide to developers by enforcing architectural constraints and driving architectural decisions. Fitness functions can be used to continually assess and validate that the evolving architecture remains fit for its purpose throughout its lifecycle.</p>\n<ol start=\"3\">\n<li><strong>Provide an example of an architecture fitness function to measure the scalability of an architecture.</strong></li>\n</ol>\n<p>🤓 An example of a fitness function for scalability could be the response time of the system as load increases. You could simulate a certain number of users (for instance, 10,000 users) hitting your system simultaneously, and measure the response time. If the response time stays within acceptable boundaries, your system can be considered scalable to that extent.</p>\n<ol start=\"4\">\n<li><strong>What is the most important criteria for an architecture characteristic to allow architects and developers to create fitness functions?</strong></li>\n</ol>\n<p>🤓 The most important criteria for an architecture characteristic is that it must be <strong>quantifiable</strong> and <strong>measurable</strong>. Fitness functions are objective metrics, so the architectural characteristic they are measuring must be translated into something that can be measured consistently and accurately. <strong>If a characteristic can’t be measured, it can’t be tracked or evaluated through a fitness function</strong>.</p>\n<hr>\n<h2 id=\"chapter-7:-scope-of-architecture-characteristics\">Chapter 7: Scope of Architecture Characteristics<a title=\"#chapter-7:-scope-of-architecture-characteristics\" href=\"#chapter-7:-scope-of-architecture-characteristics\"></a></h2>\n<ol>\n<li><strong>What is an architectural quantum, and why is it important to architecture?</strong></li>\n</ol>\n<p>🤓 An architectural quantum is the smallest independent, deployable unit in an architecture. The quantum often corresponds to a microservice in a microservices architecture. The concept is important because it helps architects design systems that are modular, loosely coupled, and can evolve independently.</p>\n<ol start=\"2\">\n<li><strong>Assume a system consisting of a single user interface with four independently deployed services, each containing its own separate database. Would this system have a single quantum or four quanta? Why?</strong></li>\n</ol>\n<p>🤓 This system would have four quanta. Each of the four services is independently deployable and contains its own database, thus each service is an architectural quantum.</p>\n<ol start=\"3\">\n<li><strong>Assume a system with an administration portion managing static reference data (such as the product catalog, and warehouse information) and a customer-facing portion managing the placement of orders. How many quanta should this system be and why? If you envision multiple quanta, could the admin quantum and customer-facing quantum share a database? If so, in which quantum would the database need to reside?</strong></li>\n</ol>\n<p>🤓 This system would most likely have two quanta - one for the administration portion and one for the customer-facing portion. Each has distinct responsibilities and could evolve independently. While the two quanta could technically share a database, it would be better for each to have its own to maintain the principle of independent deployability. Sharing a database would introduce a level of coupling that could inhibit the ability to deploy and scale each quantum independently. If they were to share a database, it would reside in neither quantum specifically, but would become a shared resource, which would need to be carefully managed to avoid conflicts and ensure consistency.</p>\n<hr>\n<h2 id=\"chapter-8:-component-based-thinking\">Chapter 8: Component-Based Thinking<a title=\"#chapter-8:-component-based-thinking\" href=\"#chapter-8:-component-based-thinking\"></a></h2>\n<ol>\n<li><strong>We define the term component as a building block of an application—something the application does. A component usually consist of a group of classes or source files. How are components typically manifested within an application or service?</strong></li>\n</ol>\n<p><img src=\"images/books/software-architecture-component-levels.png\" alt=\"Architectural Characteristics Table\" loading=\"lazy\" class=\"φbp\"></p>\n<p>🤓 Components are usually manifested within an application or service as distinct units of functionality. They can be organized as modules, packages, or services, each encapsulating a set of related functionalities. In object-oriented languages, a component can comprise multiple classes, interfaces, or packages. In a microservices architecture, each microservice can be considered a component.</p>\n<ol>\n<li><strong>What is the difference between technical partitioning and domain partitioning? Provide an example of each.</strong></li>\n</ol>\n<p><img src=\"images/books/software-architecture-technical-and-domain-partioning.png\" alt=\"Architectural Characteristics Table\" loading=\"lazy\" class=\"φbp\"></p>\n<p>🤓 <strong>Technical partitioning</strong> organizes components based on their technical role (like UI, business logic, data access), while <strong>domain partitioning</strong> organizes components based on business functionality or domain concepts. An example of technical partitioning could be a <strong>three-tier architecture with separate layers</strong> for presentation, business logic, and data storage. An example of domain partitioning <strong>could be a microservices architecture</strong> where each service corresponds to a specific business capability, like customer management or order processing.</p>\n<ol>\n<li><strong>What is the advantage of domain partitioning?</strong></li>\n</ol>\n<p>🤓 <strong>Domain partitioning</strong> aligns the software system with the business domain, making the system easier to understand and modify according to business changes. It facilitates independent development and deployment of different business capabilities, which can improve <strong>speed, scalability, and resilience</strong>.</p>\n<ol start=\"4\">\n<li><strong>Under what circumstances would technical partitioning be a better choice over domain partitioning?</strong></li>\n</ol>\n<p>🤓 Technical partitioning might be a better choice when building simple or monolithic applications where business functionality is not complex or diversified enough to justify the overhead of domain partitioning. It might also be preferred when the team’s technical expertise significantly outweighs their understanding of the business domain.</p>\n<ol start=\"5\">\n<li><strong>What is the entity trap? Why is it not a good approach for component identification?</strong></li>\n</ol>\n<p>🤓 The entity trap is a common mistake made when identifying components based on entities in the business domain, <strong>which often leads to anemic domain models with components that lack meaningful behavior</strong>. This approach is problematic because it encourages a data-centric view of the system rather than focusing on the behavior and responsibilities of components, which can lead to poor encapsulation and high coupling.</p>\n<ol start=\"6\">\n<li><strong>When might you choose the workflow approach over the Actor/Actions approach when identifying core components?</strong></li>\n</ol>\n<p>🤓 The <strong>workflow approach</strong> might be preferred when the system’s primary purpose is to facilitate a complex series of steps or transactions, where the sequence and interaction of operations are critical. On the other hand, the <strong>Actor/Actions</strong> approach could be better when the system is more centered around user interactions or when you have distinct user roles performing different actions on the system. The best choice depends on the specific context and requirements of the system.</p>\n","site":{"data":{}},"more":"<h2 id=\"fundamentals-of-software-architecture\">Fundamentals of Software Architecture<a title=\"#fundamentals-of-software-architecture\" href=\"#fundamentals-of-software-architecture\"></a></h2>\n<h3 id=\"book-details\">Book Details<a title=\"#book-details\" href=\"#book-details\"></a></h3>\n<ul>\n<li>📖 <strong>Title</strong>: <a href=\"https://www.oreilly.com/library/view/fundamentals-of-software/9781492043447/\" target=\"_blank\">Fundamentals of Software Architecture</a></li>\n<li>✍️ <strong>Author</strong>: Mark Richards, Neal Ford</li>\n<li>📆 <strong>Publication Year</strong>: 2020</li>\n</ul>\n<h3 id=\"summary\">Summary<a title=\"#summary\" href=\"#summary\"></a></h3>\n<p>Here I have the relevant points to me of the book Fundamentals of Software Architecture by Mark Richards and Neal Ford. This part is focused on Architecture characteristics and fitness functions.</p>\n<hr>\n<h2 id=\"chapter-5:-identifying-architecture-characteristics\">Chapter 5: Identifying Architecture Characteristics<a title=\"#chapter-5:-identifying-architecture-characteristics\" href=\"#chapter-5:-identifying-architecture-characteristics\"></a></h2>\n<ol>\n<li><strong>Give a reason why it is a good practice to limit the number of characteristics (“-ilities”) an architecture should support.</strong></li>\n</ol>\n<p>🤓 It’s good practice to limit the number of “-ilities” because each characteristic can introduce complexity into the architecture, potentially affecting its performance, maintainability, and other aspects. Moreover, some characteristics can conflict with others, making it a balancing act to satisfy all needs. Focusing on the most critical characteristics ensures a lean and effective architecture.</p>\n<ol start=\"2\">\n<li><strong>True or false: most architecture characteristics come from business requirements and user stories.</strong></li>\n</ol>\n<p>🤓 <strong>False</strong>. While business requirements and user stories do influence the architecture characteristics, they are not the sole sources. Architecture characteristics are often also derived from technical constraints, non-functional requirements, or the strategic direction of the organization.</p>\n<ol start=\"3\">\n<li><strong>If a business stakeholder states that time-to-market (i.e., getting new features and bug fixes pushed out to users as fast as possible) is the most important business concern, which architecture characteristics would the architecture need to support?</strong></li>\n</ol>\n<p><img src=\"images/books/software-architecture-characteristics-table.png\" alt=\"Architectural Characteristics Table\" loading=\"lazy\" class=\"φbp\"></p>\n<p>🤓 The architecture would need to support characteristics such as</p>\n<ul>\n<li><strong>Agility</strong> (for ease of implementing new features and fixing bugs)</li>\n<li><strong>Deployability</strong> (for fast and efficient deployment processes)</li>\n<li><strong>Testability</strong> (to quickly verify new features and bug fixes).</li>\n</ul>\n<ol start=\"4\">\n<li><strong>What is the difference between scalability and elasticity?</strong></li>\n</ol>\n<p>🤓 <strong>Scalability</strong> is the ability of a system to handle increased load by adding more resources or using existing resources more efficiently. <strong>Elasticity</strong>, on the other hand, is the ability of a system to dynamically scale up and down based on the demand, often realized through cloud-based infrastructures.</p>\n<ol start=\"5\">\n<li><strong>You find out that your company is about to undergo several major acquisitions to significantly increase its customer base. Which architectural characteristics should you be worried about?</strong></li>\n</ol>\n<p>🤓 The significant increase in the customer base would mean you should be particularly concerned about :</p>\n<ul>\n<li><strong>Scalability</strong> (to handle the increased load)</li>\n<li><strong>Performance</strong> (to ensure system responsiveness under increased load)</li>\n<li><strong>Interoperability</strong> (if the acquisitions involve integrating with other systems).</li>\n</ul>\n<hr>\n<h2 id=\"chapter-6:-measuring-and-governing-architecture-characteristics\">Chapter 6: Measuring and Governing Architecture Characteristics<a title=\"#chapter-6:-measuring-and-governing-architecture-characteristics\" href=\"#chapter-6:-measuring-and-governing-architecture-characteristics\"></a></h2>\n<ol>\n<li><strong>Why is cyclomatic complexity such an important metric to analyze for architecture?</strong></li>\n</ol>\n<p>🤓 <strong>Cyclomatic complexity is a measure of the number of linearly independent paths through a program’s source code</strong>, essentially assessing its complexity. High cyclomatic complexity often indicates that a system might be hard to maintain, understand, and modify. Thus, it can serve as an early warning signal for potential architectural problems, encouraging refactoring or redesign to ensure simplicity and maintainability.</p>\n<ol start=\"2\">\n<li><strong>What is an architecture fitness function? How can they be used to analyze an architecture?</strong></li>\n</ol>\n<p>🤓 An architecture fitness function is a way to quantitatively measure an architectural characteristic to determine how well the architecture aligns with the intended design principles. They serve as a guide to developers by enforcing architectural constraints and driving architectural decisions. Fitness functions can be used to continually assess and validate that the evolving architecture remains fit for its purpose throughout its lifecycle.</p>\n<ol start=\"3\">\n<li><strong>Provide an example of an architecture fitness function to measure the scalability of an architecture.</strong></li>\n</ol>\n<p>🤓 An example of a fitness function for scalability could be the response time of the system as load increases. You could simulate a certain number of users (for instance, 10,000 users) hitting your system simultaneously, and measure the response time. If the response time stays within acceptable boundaries, your system can be considered scalable to that extent.</p>\n<ol start=\"4\">\n<li><strong>What is the most important criteria for an architecture characteristic to allow architects and developers to create fitness functions?</strong></li>\n</ol>\n<p>🤓 The most important criteria for an architecture characteristic is that it must be <strong>quantifiable</strong> and <strong>measurable</strong>. Fitness functions are objective metrics, so the architectural characteristic they are measuring must be translated into something that can be measured consistently and accurately. <strong>If a characteristic can’t be measured, it can’t be tracked or evaluated through a fitness function</strong>.</p>\n<hr>\n<h2 id=\"chapter-7:-scope-of-architecture-characteristics\">Chapter 7: Scope of Architecture Characteristics<a title=\"#chapter-7:-scope-of-architecture-characteristics\" href=\"#chapter-7:-scope-of-architecture-characteristics\"></a></h2>\n<ol>\n<li><strong>What is an architectural quantum, and why is it important to architecture?</strong></li>\n</ol>\n<p>🤓 An architectural quantum is the smallest independent, deployable unit in an architecture. The quantum often corresponds to a microservice in a microservices architecture. The concept is important because it helps architects design systems that are modular, loosely coupled, and can evolve independently.</p>\n<ol start=\"2\">\n<li><strong>Assume a system consisting of a single user interface with four independently deployed services, each containing its own separate database. Would this system have a single quantum or four quanta? Why?</strong></li>\n</ol>\n<p>🤓 This system would have four quanta. Each of the four services is independently deployable and contains its own database, thus each service is an architectural quantum.</p>\n<ol start=\"3\">\n<li><strong>Assume a system with an administration portion managing static reference data (such as the product catalog, and warehouse information) and a customer-facing portion managing the placement of orders. How many quanta should this system be and why? If you envision multiple quanta, could the admin quantum and customer-facing quantum share a database? If so, in which quantum would the database need to reside?</strong></li>\n</ol>\n<p>🤓 This system would most likely have two quanta - one for the administration portion and one for the customer-facing portion. Each has distinct responsibilities and could evolve independently. While the two quanta could technically share a database, it would be better for each to have its own to maintain the principle of independent deployability. Sharing a database would introduce a level of coupling that could inhibit the ability to deploy and scale each quantum independently. If they were to share a database, it would reside in neither quantum specifically, but would become a shared resource, which would need to be carefully managed to avoid conflicts and ensure consistency.</p>\n<hr>\n<h2 id=\"chapter-8:-component-based-thinking\">Chapter 8: Component-Based Thinking<a title=\"#chapter-8:-component-based-thinking\" href=\"#chapter-8:-component-based-thinking\"></a></h2>\n<ol>\n<li><strong>We define the term component as a building block of an application—something the application does. A component usually consist of a group of classes or source files. How are components typically manifested within an application or service?</strong></li>\n</ol>\n<p><img src=\"images/books/software-architecture-component-levels.png\" alt=\"Architectural Characteristics Table\" loading=\"lazy\" class=\"φbp\"></p>\n<p>🤓 Components are usually manifested within an application or service as distinct units of functionality. They can be organized as modules, packages, or services, each encapsulating a set of related functionalities. In object-oriented languages, a component can comprise multiple classes, interfaces, or packages. In a microservices architecture, each microservice can be considered a component.</p>\n<ol>\n<li><strong>What is the difference between technical partitioning and domain partitioning? Provide an example of each.</strong></li>\n</ol>\n<p><img src=\"images/books/software-architecture-technical-and-domain-partioning.png\" alt=\"Architectural Characteristics Table\" loading=\"lazy\" class=\"φbp\"></p>\n<p>🤓 <strong>Technical partitioning</strong> organizes components based on their technical role (like UI, business logic, data access), while <strong>domain partitioning</strong> organizes components based on business functionality or domain concepts. An example of technical partitioning could be a <strong>three-tier architecture with separate layers</strong> for presentation, business logic, and data storage. An example of domain partitioning <strong>could be a microservices architecture</strong> where each service corresponds to a specific business capability, like customer management or order processing.</p>\n<ol>\n<li><strong>What is the advantage of domain partitioning?</strong></li>\n</ol>\n<p>🤓 <strong>Domain partitioning</strong> aligns the software system with the business domain, making the system easier to understand and modify according to business changes. It facilitates independent development and deployment of different business capabilities, which can improve <strong>speed, scalability, and resilience</strong>.</p>\n<ol start=\"4\">\n<li><strong>Under what circumstances would technical partitioning be a better choice over domain partitioning?</strong></li>\n</ol>\n<p>🤓 Technical partitioning might be a better choice when building simple or monolithic applications where business functionality is not complex or diversified enough to justify the overhead of domain partitioning. It might also be preferred when the team’s technical expertise significantly outweighs their understanding of the business domain.</p>\n<ol start=\"5\">\n<li><strong>What is the entity trap? Why is it not a good approach for component identification?</strong></li>\n</ol>\n<p>🤓 The entity trap is a common mistake made when identifying components based on entities in the business domain, <strong>which often leads to anemic domain models with components that lack meaningful behavior</strong>. This approach is problematic because it encourages a data-centric view of the system rather than focusing on the behavior and responsibilities of components, which can lead to poor encapsulation and high coupling.</p>\n<ol start=\"6\">\n<li><strong>When might you choose the workflow approach over the Actor/Actions approach when identifying core components?</strong></li>\n</ol>\n<p>🤓 The <strong>workflow approach</strong> might be preferred when the system’s primary purpose is to facilitate a complex series of steps or transactions, where the sequence and interaction of operations are critical. On the other hand, the <strong>Actor/Actions</strong> approach could be better when the system is more centered around user interactions or when you have distinct user roles performing different actions on the system. The best choice depends on the specific context and requirements of the system.</p>\n","date_formatted":{"ll":"Jul 21, 2023","L":"07/21/2023","MM-DD":"07-21"},"plink":"http://codesandtags.io/blog/2023/07/21/en/fundamentals-of-software-architecture-part-2/","type":"post","toc":[{"id":"fundamentals-of-software-architecture","title":"Fundamentals of Software Architecture","index":"1","children":[{"id":"book-details","title":"Book Details","index":"1.1"},{"id":"summary","title":"Summary","index":"1.2"}]},{"id":"chapter-5:-identifying-architecture-characteristics","title":"Chapter 5: Identifying Architecture Characteristics","index":"2"},{"id":"chapter-6:-measuring-and-governing-architecture-characteristics","title":"Chapter 6: Measuring and Governing Architecture Characteristics","index":"3"},{"id":"chapter-7:-scope-of-architecture-characteristics","title":"Chapter 7: Scope of Architecture Characteristics","index":"4"},{"id":"chapter-8:-component-based-thinking","title":"Chapter 8: Component-Based Thinking","index":"5"}],"reading_time":"1487 words in 10 min"},{"title":"Fundamentals of Software Architecture Book - Part 3","author":"codesandtags","date":"2023-08-02T22:43:27.000Z","thumbnail":"images/books/cover-fundamentals-software-architecture.png","excerpt":"Here I have the relevant points to me of the book Fundamentals of Software Architecture by Mark Richards and Neal Ford. This part is focused on Architecture styles, starting with the Monolithic Architecture.","_content":"\n## Fundamentals of Software Architecture\n\n### Book Details\n\n- **Title**: [Fundamentals of Software Architecture](https://www.oreilly.com/library/view/fundamentals-of-software/9781492043447/)\n- **Author**: Mark Richards, Neal Ford\n- **Publication Year**: 2020\n\n### Summary\n\nThis book is a great introduction to software architecture, it covers the basics of software architecture, Here I have the relevant points to me of the book Fundamentals of Software Architecture by Mark Richards and Neal Ford. This part is focused on **Architecture styles**.\n\n---\n\n## Chapter 9: Architecture Styles\n\n<img src=\"images/books/software-architecture-styles.png\" alt=\"Layered Styles\" width=\"100%\"/>\n\n1. **List the eight fallacies of distributed computing.**\n\n- Falacy #1: The network is reliable.\n- Falacy #2: Latency is zero.\n- Falacy #3: Bandwidth is infinite.\n- Falacy #4: The network is secure.\n- Falacy #5: Topology doesn't change.\n- Falacy #6: There is only one administrator.\n- Falacy #7: Transport cost is zero.\n- Falacy #8: The network is homogeneous.\n\n2. **Name three challenges that distributed architectures have that monolithic architectures don’t.**\n\n- Distributed logging\n- Distributed transactions\n- Contract maintenance and versioning\n\n3. **What is stamp coupling?**\n\n🤓 Stamp coupling occurs when modules share a composite data structure and use only parts of it, possibly different parts (e.g., passing a whole record to a function that needs only one field of it).\n\n4. **What are some ways of addressing stamp coupling?**\n\n- Create private RESTful API endpoints\n- Use field selectors in the contract\n- Use GraphQL to decouple contracts\n- Use value-driven contracts with consumer-driven contracts (CDCs)\n- Use internal messaging endpoints\n\n---\n\n## Chapter 10: Layered Architecture Style\n\n### Layered Architecture Rating\n\n<img src=\"images/books/software-layered-architecture-rating.png\" alt=\"Layered Architecture Rating\" width=\"60%\"/>\n\n1. **What is the difference between an open layer and a closed layer?**\n\n🤓 A closed layer means that as a request moves top-down through the layers, it can only move to the next layer down. An open layer means that as a request moves top-down through the layers, it can move to any layer below it.\n\n2. **Describe the layers of isolation concept and what the benefits are of this concept.**\n\n🤓 The layers of isolation concept means that changes made in one layer of the architecture generally don't impact or affect components in other layers. This concept is important because it allows for the architecture to be more flexible and agile. The benefit is that any layer in the architecture can be changed without impacting other layers.\n\n3. **What is the architecture sinkhole anti-pattern?**\n\n🤓 This anti-pattern occurs when requests move from layer to layer as a simple pass-through. This is a problem because it means that the architecture is not providing any value.\n\n4. **What are some of the main architecture characteristics that would drive you to use a layered architecture?**\n\n🤓 Simplicity, Overall Cost, and Reliability are some of the main architecture characteristics that would drive you to use a layered architecture. It's also a good architecture style to use when you have a small team of developers or very tight budget.\n\n5. **Why isn’t testability well supported in the layered architecture style?**\n\n🤓 Most developers are not going to spend hours executing the entire regression test suite every time they make a change to a single layer, particularly along with dozens of other changes being made to the monolithic applicationi at the same time.\n\n6. **Why isn’t agility well supported in the layered architecture style?**\n\n🤓 Given the monolitic approach of the layered architecture style, it's not easy to make changes to the architecture quickly.\n\n---\n\n## Chapter 11: Pipeline Architecture\n\n### Pipeline Architecture Rating\n\n<img src=\"images/books/software-pipeline-architecture-rating.png\" alt=\"Layered Architecture Rating\" width=\"60%\"/>\n\n1. **Can pipes be bidirectional in a pipeline architecture?**\n\n🤓 No, pipes are unidirectional.\n\n2. **Name the four types of filters and their purpose.**\n\n- **Producer**: The starting point of a process, outbound only, sometimes called the source.\n\n**Transformer**: Accepts input, optionally performs a transformation on some or all of the data, then forwards it to the outbound pipe. Functional advocates will recognize this feature as map.\n\n- **Tester**: Accepts input, tests one or more criteria, then optionally produces output, based on the test. Functional programmers will recognize this as similar to reduce.\n\n- **Consumer**: The termination point for the pipeline flow. Consumers sometimes persist the final result of the pipeline process to a database, or they may display the final results on a user interface screen.\n\n3. **Can a filter send data out through multiple pipes?**\n\n🤓 Filters are self-contained, independent from other filters. Filters should perform one task only. Composite tasks should be handled by a sequence of filters rather than a single one.\n\n4. **Is the pipeline architecture style technically partitioned or domain partitioned?**\n\n🤓 Pipeline architecture is technically partitioned.\n\n5. **In what way does the pipeline architecture support modularity?**\n\n🤓 Pipeline Architecture supports modularity by allowing you to add or remove filters without impacting the rest of the pipeline.\n\n6. **Provide two examples of the pipeline architecture style.**\n\n- Unix pipes and the Java 8 Streams API.\n- Apache Kafka Streams\n- ETL (Extract, Transform, Load) processes\n\n---\n\n## Chapter 12: Microkernel Architecture\n\n### Microkernel Architecture Rating\n\n<img src=\"images/books/software-microkernel-architecture-rating.png\" alt=\"Layered Architecture Rating\" width=\"60%\"/>\n\n1. **What is another name for the microkernel architecture style?**\n\n🤓 The microkernel architecture style is also known as the plug-in architecture style.\n\n1. **Under what situations is it OK for plug-in components to be dependent on other plug-in components?**\n\n🤓 It's OK for plug-in components to be dependent on other plug-in components when the plug-in components are part of the same architecture quantum.\n\n2. **What are some of the tools and frameworks that can be used to manage plug-ins?**\n\n🤓 Open Service Gateway Initiative (OSGi) for Java, Penrose (Java), Jigsaw (Java), or Prism (.NET).\n\n3. **What would you do if you had a third-party plug-in that didn’t conform to the standard plug-in contract in the core system?**\n\n🤓 You would create an adapter to convert the third-party plug-in to conform to the standard plug-in contract in the core system.\n\n4. **Provide two examples of the microkernel architecture style.**\n\n- Eclipse IDE\n- Jira\n- Jenkins\n- Backstage (Spotify)\n\n5. **Is the microkernel architecture style technically partitioned or domain partitioned?**\n\n🤓 Microkernel architecture can be either technically partitioned or domain partitioned.\n\n1. **Why is the microkernel architecture always a single architecture quantum?**\n\n🤓 The microkernel architecture is always a single architecture quantum because the core system is the only component that is not a plug-in.\n\n7. **What is domain/architecture isomorphism?**\n\nDomain/architecture isomorphism is a concept that compares the shape of a problem domain with the shape of an architecture style, and determines how well they match. It is based on the mathematical term isomorphism, which means equal in form or shape. The idea is that different problems have different shapes, and different architectures have different shapes, and some shapes fit better than others\n\n---\n","source":"_posts/en/fundamentals-of-software-architecture-part-3.md","raw":"---\ntitle: Fundamentals of Software Architecture Book - Part 3\nauthor: codesandtags\ndate: 2023-08-02 18:43:27\ncategory: Software Architecture\nthumbnail: images/books/cover-fundamentals-software-architecture.png\ntags: [software-architecture, books]\nexcerpt: Here I have the relevant points to me of the book Fundamentals of Software Architecture by Mark Richards and Neal Ford. This part is focused on Architecture styles, starting with the Monolithic Architecture.\n---\n\n## Fundamentals of Software Architecture\n\n### Book Details\n\n- **Title**: [Fundamentals of Software Architecture](https://www.oreilly.com/library/view/fundamentals-of-software/9781492043447/)\n- **Author**: Mark Richards, Neal Ford\n- **Publication Year**: 2020\n\n### Summary\n\nThis book is a great introduction to software architecture, it covers the basics of software architecture, Here I have the relevant points to me of the book Fundamentals of Software Architecture by Mark Richards and Neal Ford. This part is focused on **Architecture styles**.\n\n---\n\n## Chapter 9: Architecture Styles\n\n<img src=\"images/books/software-architecture-styles.png\" alt=\"Layered Styles\" width=\"100%\"/>\n\n1. **List the eight fallacies of distributed computing.**\n\n- Falacy #1: The network is reliable.\n- Falacy #2: Latency is zero.\n- Falacy #3: Bandwidth is infinite.\n- Falacy #4: The network is secure.\n- Falacy #5: Topology doesn't change.\n- Falacy #6: There is only one administrator.\n- Falacy #7: Transport cost is zero.\n- Falacy #8: The network is homogeneous.\n\n2. **Name three challenges that distributed architectures have that monolithic architectures don’t.**\n\n- Distributed logging\n- Distributed transactions\n- Contract maintenance and versioning\n\n3. **What is stamp coupling?**\n\n🤓 Stamp coupling occurs when modules share a composite data structure and use only parts of it, possibly different parts (e.g., passing a whole record to a function that needs only one field of it).\n\n4. **What are some ways of addressing stamp coupling?**\n\n- Create private RESTful API endpoints\n- Use field selectors in the contract\n- Use GraphQL to decouple contracts\n- Use value-driven contracts with consumer-driven contracts (CDCs)\n- Use internal messaging endpoints\n\n---\n\n## Chapter 10: Layered Architecture Style\n\n### Layered Architecture Rating\n\n<img src=\"images/books/software-layered-architecture-rating.png\" alt=\"Layered Architecture Rating\" width=\"60%\"/>\n\n1. **What is the difference between an open layer and a closed layer?**\n\n🤓 A closed layer means that as a request moves top-down through the layers, it can only move to the next layer down. An open layer means that as a request moves top-down through the layers, it can move to any layer below it.\n\n2. **Describe the layers of isolation concept and what the benefits are of this concept.**\n\n🤓 The layers of isolation concept means that changes made in one layer of the architecture generally don't impact or affect components in other layers. This concept is important because it allows for the architecture to be more flexible and agile. The benefit is that any layer in the architecture can be changed without impacting other layers.\n\n3. **What is the architecture sinkhole anti-pattern?**\n\n🤓 This anti-pattern occurs when requests move from layer to layer as a simple pass-through. This is a problem because it means that the architecture is not providing any value.\n\n4. **What are some of the main architecture characteristics that would drive you to use a layered architecture?**\n\n🤓 Simplicity, Overall Cost, and Reliability are some of the main architecture characteristics that would drive you to use a layered architecture. It's also a good architecture style to use when you have a small team of developers or very tight budget.\n\n5. **Why isn’t testability well supported in the layered architecture style?**\n\n🤓 Most developers are not going to spend hours executing the entire regression test suite every time they make a change to a single layer, particularly along with dozens of other changes being made to the monolithic applicationi at the same time.\n\n6. **Why isn’t agility well supported in the layered architecture style?**\n\n🤓 Given the monolitic approach of the layered architecture style, it's not easy to make changes to the architecture quickly.\n\n---\n\n## Chapter 11: Pipeline Architecture\n\n### Pipeline Architecture Rating\n\n<img src=\"images/books/software-pipeline-architecture-rating.png\" alt=\"Layered Architecture Rating\" width=\"60%\"/>\n\n1. **Can pipes be bidirectional in a pipeline architecture?**\n\n🤓 No, pipes are unidirectional.\n\n2. **Name the four types of filters and their purpose.**\n\n- **Producer**: The starting point of a process, outbound only, sometimes called the source.\n\n**Transformer**: Accepts input, optionally performs a transformation on some or all of the data, then forwards it to the outbound pipe. Functional advocates will recognize this feature as map.\n\n- **Tester**: Accepts input, tests one or more criteria, then optionally produces output, based on the test. Functional programmers will recognize this as similar to reduce.\n\n- **Consumer**: The termination point for the pipeline flow. Consumers sometimes persist the final result of the pipeline process to a database, or they may display the final results on a user interface screen.\n\n3. **Can a filter send data out through multiple pipes?**\n\n🤓 Filters are self-contained, independent from other filters. Filters should perform one task only. Composite tasks should be handled by a sequence of filters rather than a single one.\n\n4. **Is the pipeline architecture style technically partitioned or domain partitioned?**\n\n🤓 Pipeline architecture is technically partitioned.\n\n5. **In what way does the pipeline architecture support modularity?**\n\n🤓 Pipeline Architecture supports modularity by allowing you to add or remove filters without impacting the rest of the pipeline.\n\n6. **Provide two examples of the pipeline architecture style.**\n\n- Unix pipes and the Java 8 Streams API.\n- Apache Kafka Streams\n- ETL (Extract, Transform, Load) processes\n\n---\n\n## Chapter 12: Microkernel Architecture\n\n### Microkernel Architecture Rating\n\n<img src=\"images/books/software-microkernel-architecture-rating.png\" alt=\"Layered Architecture Rating\" width=\"60%\"/>\n\n1. **What is another name for the microkernel architecture style?**\n\n🤓 The microkernel architecture style is also known as the plug-in architecture style.\n\n1. **Under what situations is it OK for plug-in components to be dependent on other plug-in components?**\n\n🤓 It's OK for plug-in components to be dependent on other plug-in components when the plug-in components are part of the same architecture quantum.\n\n2. **What are some of the tools and frameworks that can be used to manage plug-ins?**\n\n🤓 Open Service Gateway Initiative (OSGi) for Java, Penrose (Java), Jigsaw (Java), or Prism (.NET).\n\n3. **What would you do if you had a third-party plug-in that didn’t conform to the standard plug-in contract in the core system?**\n\n🤓 You would create an adapter to convert the third-party plug-in to conform to the standard plug-in contract in the core system.\n\n4. **Provide two examples of the microkernel architecture style.**\n\n- Eclipse IDE\n- Jira\n- Jenkins\n- Backstage (Spotify)\n\n5. **Is the microkernel architecture style technically partitioned or domain partitioned?**\n\n🤓 Microkernel architecture can be either technically partitioned or domain partitioned.\n\n1. **Why is the microkernel architecture always a single architecture quantum?**\n\n🤓 The microkernel architecture is always a single architecture quantum because the core system is the only component that is not a plug-in.\n\n7. **What is domain/architecture isomorphism?**\n\nDomain/architecture isomorphism is a concept that compares the shape of a problem domain with the shape of an architecture style, and determines how well they match. It is based on the mathematical term isomorphism, which means equal in form or shape. The idea is that different problems have different shapes, and different architectures have different shapes, and some shapes fit better than others\n\n---\n","slug":"en/fundamentals-of-software-architecture-part-3","published":1,"updated":"2023-08-03T14:00:13.976Z","comments":0,"layout":"post","photos":[],"link":"2023/08/02/en/fundamentals-of-software-architecture-part-3","_id":"clnwi7gas0006qbt290lmg9ej","content":"<h2 id=\"fundamentals-of-software-architecture\">Fundamentals of Software Architecture<a title=\"#fundamentals-of-software-architecture\" href=\"#fundamentals-of-software-architecture\"></a></h2>\n<h3 id=\"book-details\">Book Details<a title=\"#book-details\" href=\"#book-details\"></a></h3>\n<ul>\n<li><strong>Title</strong>: <a href=\"https://www.oreilly.com/library/view/fundamentals-of-software/9781492043447/\" target=\"_blank\">Fundamentals of Software Architecture</a></li>\n<li><strong>Author</strong>: Mark Richards, Neal Ford</li>\n<li><strong>Publication Year</strong>: 2020</li>\n</ul>\n<h3 id=\"summary\">Summary<a title=\"#summary\" href=\"#summary\"></a></h3>\n<p>This book is a great introduction to software architecture, it covers the basics of software architecture, Here I have the relevant points to me of the book Fundamentals of Software Architecture by Mark Richards and Neal Ford. This part is focused on <strong>Architecture styles</strong>.</p>\n<hr>\n<h2 id=\"chapter-9:-architecture-styles\">Chapter 9: Architecture Styles<a title=\"#chapter-9:-architecture-styles\" href=\"#chapter-9:-architecture-styles\"></a></h2>\n<img src=\"images/books/software-architecture-styles.png\" alt=\"Layered Styles\" width=\"100%\"/>\n<ol>\n<li><strong>List the eight fallacies of distributed computing.</strong></li>\n</ol>\n<ul>\n<li>Falacy #1: The network is reliable.</li>\n<li>Falacy #2: Latency is zero.</li>\n<li>Falacy #3: Bandwidth is infinite.</li>\n<li>Falacy #4: The network is secure.</li>\n<li>Falacy #5: Topology doesn’t change.</li>\n<li>Falacy #6: There is only one administrator.</li>\n<li>Falacy #7: Transport cost is zero.</li>\n<li>Falacy #8: The network is homogeneous.</li>\n</ul>\n<ol start=\"2\">\n<li><strong>Name three challenges that distributed architectures have that monolithic architectures don’t.</strong></li>\n</ol>\n<ul>\n<li>Distributed logging</li>\n<li>Distributed transactions</li>\n<li>Contract maintenance and versioning</li>\n</ul>\n<ol start=\"3\">\n<li><strong>What is stamp coupling?</strong></li>\n</ol>\n<p>🤓 Stamp coupling occurs when modules share a composite data structure and use only parts of it, possibly different parts (e.g., passing a whole record to a function that needs only one field of it).</p>\n<ol start=\"4\">\n<li><strong>What are some ways of addressing stamp coupling?</strong></li>\n</ol>\n<ul>\n<li>Create private RESTful API endpoints</li>\n<li>Use field selectors in the contract</li>\n<li>Use GraphQL to decouple contracts</li>\n<li>Use value-driven contracts with consumer-driven contracts (CDCs)</li>\n<li>Use internal messaging endpoints</li>\n</ul>\n<hr>\n<h2 id=\"chapter-10:-layered-architecture-style\">Chapter 10: Layered Architecture Style<a title=\"#chapter-10:-layered-architecture-style\" href=\"#chapter-10:-layered-architecture-style\"></a></h2>\n<h3 id=\"layered-architecture-rating\">Layered Architecture Rating<a title=\"#layered-architecture-rating\" href=\"#layered-architecture-rating\"></a></h3>\n<img src=\"images/books/software-layered-architecture-rating.png\" alt=\"Layered Architecture Rating\" width=\"60%\"/>\n<ol>\n<li><strong>What is the difference between an open layer and a closed layer?</strong></li>\n</ol>\n<p>🤓 A closed layer means that as a request moves top-down through the layers, it can only move to the next layer down. An open layer means that as a request moves top-down through the layers, it can move to any layer below it.</p>\n<ol start=\"2\">\n<li><strong>Describe the layers of isolation concept and what the benefits are of this concept.</strong></li>\n</ol>\n<p>🤓 The layers of isolation concept means that changes made in one layer of the architecture generally don’t impact or affect components in other layers. This concept is important because it allows for the architecture to be more flexible and agile. The benefit is that any layer in the architecture can be changed without impacting other layers.</p>\n<ol start=\"3\">\n<li><strong>What is the architecture sinkhole anti-pattern?</strong></li>\n</ol>\n<p>🤓 This anti-pattern occurs when requests move from layer to layer as a simple pass-through. This is a problem because it means that the architecture is not providing any value.</p>\n<ol start=\"4\">\n<li><strong>What are some of the main architecture characteristics that would drive you to use a layered architecture?</strong></li>\n</ol>\n<p>🤓 Simplicity, Overall Cost, and Reliability are some of the main architecture characteristics that would drive you to use a layered architecture. It’s also a good architecture style to use when you have a small team of developers or very tight budget.</p>\n<ol start=\"5\">\n<li><strong>Why isn’t testability well supported in the layered architecture style?</strong></li>\n</ol>\n<p>🤓 Most developers are not going to spend hours executing the entire regression test suite every time they make a change to a single layer, particularly along with dozens of other changes being made to the monolithic applicationi at the same time.</p>\n<ol start=\"6\">\n<li><strong>Why isn’t agility well supported in the layered architecture style?</strong></li>\n</ol>\n<p>🤓 Given the monolitic approach of the layered architecture style, it’s not easy to make changes to the architecture quickly.</p>\n<hr>\n<h2 id=\"chapter-11:-pipeline-architecture\">Chapter 11: Pipeline Architecture<a title=\"#chapter-11:-pipeline-architecture\" href=\"#chapter-11:-pipeline-architecture\"></a></h2>\n<h3 id=\"pipeline-architecture-rating\">Pipeline Architecture Rating<a title=\"#pipeline-architecture-rating\" href=\"#pipeline-architecture-rating\"></a></h3>\n<img src=\"images/books/software-pipeline-architecture-rating.png\" alt=\"Layered Architecture Rating\" width=\"60%\"/>\n<ol>\n<li><strong>Can pipes be bidirectional in a pipeline architecture?</strong></li>\n</ol>\n<p>🤓 No, pipes are unidirectional.</p>\n<ol start=\"2\">\n<li><strong>Name the four types of filters and their purpose.</strong></li>\n</ol>\n<ul>\n<li><strong>Producer</strong>: The starting point of a process, outbound only, sometimes called the source.</li>\n</ul>\n<p><strong>Transformer</strong>: Accepts input, optionally performs a transformation on some or all of the data, then forwards it to the outbound pipe. Functional advocates will recognize this feature as map.</p>\n<ul>\n<li>\n<p><strong>Tester</strong>: Accepts input, tests one or more criteria, then optionally produces output, based on the test. Functional programmers will recognize this as similar to reduce.</p>\n</li>\n<li>\n<p><strong>Consumer</strong>: The termination point for the pipeline flow. Consumers sometimes persist the final result of the pipeline process to a database, or they may display the final results on a user interface screen.</p>\n</li>\n</ul>\n<ol start=\"3\">\n<li><strong>Can a filter send data out through multiple pipes?</strong></li>\n</ol>\n<p>🤓 Filters are self-contained, independent from other filters. Filters should perform one task only. Composite tasks should be handled by a sequence of filters rather than a single one.</p>\n<ol start=\"4\">\n<li><strong>Is the pipeline architecture style technically partitioned or domain partitioned?</strong></li>\n</ol>\n<p>🤓 Pipeline architecture is technically partitioned.</p>\n<ol start=\"5\">\n<li><strong>In what way does the pipeline architecture support modularity?</strong></li>\n</ol>\n<p>🤓 Pipeline Architecture supports modularity by allowing you to add or remove filters without impacting the rest of the pipeline.</p>\n<ol start=\"6\">\n<li><strong>Provide two examples of the pipeline architecture style.</strong></li>\n</ol>\n<ul>\n<li>Unix pipes and the Java 8 Streams API.</li>\n<li>Apache Kafka Streams</li>\n<li>ETL (Extract, Transform, Load) processes</li>\n</ul>\n<hr>\n<h2 id=\"chapter-12:-microkernel-architecture\">Chapter 12: Microkernel Architecture<a title=\"#chapter-12:-microkernel-architecture\" href=\"#chapter-12:-microkernel-architecture\"></a></h2>\n<h3 id=\"microkernel-architecture-rating\">Microkernel Architecture Rating<a title=\"#microkernel-architecture-rating\" href=\"#microkernel-architecture-rating\"></a></h3>\n<img src=\"images/books/software-microkernel-architecture-rating.png\" alt=\"Layered Architecture Rating\" width=\"60%\"/>\n<ol>\n<li><strong>What is another name for the microkernel architecture style?</strong></li>\n</ol>\n<p>🤓 The microkernel architecture style is also known as the plug-in architecture style.</p>\n<ol>\n<li><strong>Under what situations is it OK for plug-in components to be dependent on other plug-in components?</strong></li>\n</ol>\n<p>🤓 It’s OK for plug-in components to be dependent on other plug-in components when the plug-in components are part of the same architecture quantum.</p>\n<ol start=\"2\">\n<li><strong>What are some of the tools and frameworks that can be used to manage plug-ins?</strong></li>\n</ol>\n<p>🤓 Open Service Gateway Initiative (OSGi) for Java, Penrose (Java), Jigsaw (Java), or Prism (.NET).</p>\n<ol start=\"3\">\n<li><strong>What would you do if you had a third-party plug-in that didn’t conform to the standard plug-in contract in the core system?</strong></li>\n</ol>\n<p>🤓 You would create an adapter to convert the third-party plug-in to conform to the standard plug-in contract in the core system.</p>\n<ol start=\"4\">\n<li><strong>Provide two examples of the microkernel architecture style.</strong></li>\n</ol>\n<ul>\n<li>Eclipse IDE</li>\n<li>Jira</li>\n<li>Jenkins</li>\n<li>Backstage (Spotify)</li>\n</ul>\n<ol start=\"5\">\n<li><strong>Is the microkernel architecture style technically partitioned or domain partitioned?</strong></li>\n</ol>\n<p>🤓 Microkernel architecture can be either technically partitioned or domain partitioned.</p>\n<ol>\n<li><strong>Why is the microkernel architecture always a single architecture quantum?</strong></li>\n</ol>\n<p>🤓 The microkernel architecture is always a single architecture quantum because the core system is the only component that is not a plug-in.</p>\n<ol start=\"7\">\n<li><strong>What is domain/architecture isomorphism?</strong></li>\n</ol>\n<p>Domain/architecture isomorphism is a concept that compares the shape of a problem domain with the shape of an architecture style, and determines how well they match. It is based on the mathematical term isomorphism, which means equal in form or shape. The idea is that different problems have different shapes, and different architectures have different shapes, and some shapes fit better than others</p>\n<hr>\n","site":{"data":{}},"more":"<h2 id=\"fundamentals-of-software-architecture\">Fundamentals of Software Architecture<a title=\"#fundamentals-of-software-architecture\" href=\"#fundamentals-of-software-architecture\"></a></h2>\n<h3 id=\"book-details\">Book Details<a title=\"#book-details\" href=\"#book-details\"></a></h3>\n<ul>\n<li><strong>Title</strong>: <a href=\"https://www.oreilly.com/library/view/fundamentals-of-software/9781492043447/\" target=\"_blank\">Fundamentals of Software Architecture</a></li>\n<li><strong>Author</strong>: Mark Richards, Neal Ford</li>\n<li><strong>Publication Year</strong>: 2020</li>\n</ul>\n<h3 id=\"summary\">Summary<a title=\"#summary\" href=\"#summary\"></a></h3>\n<p>This book is a great introduction to software architecture, it covers the basics of software architecture, Here I have the relevant points to me of the book Fundamentals of Software Architecture by Mark Richards and Neal Ford. This part is focused on <strong>Architecture styles</strong>.</p>\n<hr>\n<h2 id=\"chapter-9:-architecture-styles\">Chapter 9: Architecture Styles<a title=\"#chapter-9:-architecture-styles\" href=\"#chapter-9:-architecture-styles\"></a></h2>\n<img src=\"images/books/software-architecture-styles.png\" alt=\"Layered Styles\" width=\"100%\"/>\n<ol>\n<li><strong>List the eight fallacies of distributed computing.</strong></li>\n</ol>\n<ul>\n<li>Falacy #1: The network is reliable.</li>\n<li>Falacy #2: Latency is zero.</li>\n<li>Falacy #3: Bandwidth is infinite.</li>\n<li>Falacy #4: The network is secure.</li>\n<li>Falacy #5: Topology doesn’t change.</li>\n<li>Falacy #6: There is only one administrator.</li>\n<li>Falacy #7: Transport cost is zero.</li>\n<li>Falacy #8: The network is homogeneous.</li>\n</ul>\n<ol start=\"2\">\n<li><strong>Name three challenges that distributed architectures have that monolithic architectures don’t.</strong></li>\n</ol>\n<ul>\n<li>Distributed logging</li>\n<li>Distributed transactions</li>\n<li>Contract maintenance and versioning</li>\n</ul>\n<ol start=\"3\">\n<li><strong>What is stamp coupling?</strong></li>\n</ol>\n<p>🤓 Stamp coupling occurs when modules share a composite data structure and use only parts of it, possibly different parts (e.g., passing a whole record to a function that needs only one field of it).</p>\n<ol start=\"4\">\n<li><strong>What are some ways of addressing stamp coupling?</strong></li>\n</ol>\n<ul>\n<li>Create private RESTful API endpoints</li>\n<li>Use field selectors in the contract</li>\n<li>Use GraphQL to decouple contracts</li>\n<li>Use value-driven contracts with consumer-driven contracts (CDCs)</li>\n<li>Use internal messaging endpoints</li>\n</ul>\n<hr>\n<h2 id=\"chapter-10:-layered-architecture-style\">Chapter 10: Layered Architecture Style<a title=\"#chapter-10:-layered-architecture-style\" href=\"#chapter-10:-layered-architecture-style\"></a></h2>\n<h3 id=\"layered-architecture-rating\">Layered Architecture Rating<a title=\"#layered-architecture-rating\" href=\"#layered-architecture-rating\"></a></h3>\n<img src=\"images/books/software-layered-architecture-rating.png\" alt=\"Layered Architecture Rating\" width=\"60%\"/>\n<ol>\n<li><strong>What is the difference between an open layer and a closed layer?</strong></li>\n</ol>\n<p>🤓 A closed layer means that as a request moves top-down through the layers, it can only move to the next layer down. An open layer means that as a request moves top-down through the layers, it can move to any layer below it.</p>\n<ol start=\"2\">\n<li><strong>Describe the layers of isolation concept and what the benefits are of this concept.</strong></li>\n</ol>\n<p>🤓 The layers of isolation concept means that changes made in one layer of the architecture generally don’t impact or affect components in other layers. This concept is important because it allows for the architecture to be more flexible and agile. The benefit is that any layer in the architecture can be changed without impacting other layers.</p>\n<ol start=\"3\">\n<li><strong>What is the architecture sinkhole anti-pattern?</strong></li>\n</ol>\n<p>🤓 This anti-pattern occurs when requests move from layer to layer as a simple pass-through. This is a problem because it means that the architecture is not providing any value.</p>\n<ol start=\"4\">\n<li><strong>What are some of the main architecture characteristics that would drive you to use a layered architecture?</strong></li>\n</ol>\n<p>🤓 Simplicity, Overall Cost, and Reliability are some of the main architecture characteristics that would drive you to use a layered architecture. It’s also a good architecture style to use when you have a small team of developers or very tight budget.</p>\n<ol start=\"5\">\n<li><strong>Why isn’t testability well supported in the layered architecture style?</strong></li>\n</ol>\n<p>🤓 Most developers are not going to spend hours executing the entire regression test suite every time they make a change to a single layer, particularly along with dozens of other changes being made to the monolithic applicationi at the same time.</p>\n<ol start=\"6\">\n<li><strong>Why isn’t agility well supported in the layered architecture style?</strong></li>\n</ol>\n<p>🤓 Given the monolitic approach of the layered architecture style, it’s not easy to make changes to the architecture quickly.</p>\n<hr>\n<h2 id=\"chapter-11:-pipeline-architecture\">Chapter 11: Pipeline Architecture<a title=\"#chapter-11:-pipeline-architecture\" href=\"#chapter-11:-pipeline-architecture\"></a></h2>\n<h3 id=\"pipeline-architecture-rating\">Pipeline Architecture Rating<a title=\"#pipeline-architecture-rating\" href=\"#pipeline-architecture-rating\"></a></h3>\n<img src=\"images/books/software-pipeline-architecture-rating.png\" alt=\"Layered Architecture Rating\" width=\"60%\"/>\n<ol>\n<li><strong>Can pipes be bidirectional in a pipeline architecture?</strong></li>\n</ol>\n<p>🤓 No, pipes are unidirectional.</p>\n<ol start=\"2\">\n<li><strong>Name the four types of filters and their purpose.</strong></li>\n</ol>\n<ul>\n<li><strong>Producer</strong>: The starting point of a process, outbound only, sometimes called the source.</li>\n</ul>\n<p><strong>Transformer</strong>: Accepts input, optionally performs a transformation on some or all of the data, then forwards it to the outbound pipe. Functional advocates will recognize this feature as map.</p>\n<ul>\n<li>\n<p><strong>Tester</strong>: Accepts input, tests one or more criteria, then optionally produces output, based on the test. Functional programmers will recognize this as similar to reduce.</p>\n</li>\n<li>\n<p><strong>Consumer</strong>: The termination point for the pipeline flow. Consumers sometimes persist the final result of the pipeline process to a database, or they may display the final results on a user interface screen.</p>\n</li>\n</ul>\n<ol start=\"3\">\n<li><strong>Can a filter send data out through multiple pipes?</strong></li>\n</ol>\n<p>🤓 Filters are self-contained, independent from other filters. Filters should perform one task only. Composite tasks should be handled by a sequence of filters rather than a single one.</p>\n<ol start=\"4\">\n<li><strong>Is the pipeline architecture style technically partitioned or domain partitioned?</strong></li>\n</ol>\n<p>🤓 Pipeline architecture is technically partitioned.</p>\n<ol start=\"5\">\n<li><strong>In what way does the pipeline architecture support modularity?</strong></li>\n</ol>\n<p>🤓 Pipeline Architecture supports modularity by allowing you to add or remove filters without impacting the rest of the pipeline.</p>\n<ol start=\"6\">\n<li><strong>Provide two examples of the pipeline architecture style.</strong></li>\n</ol>\n<ul>\n<li>Unix pipes and the Java 8 Streams API.</li>\n<li>Apache Kafka Streams</li>\n<li>ETL (Extract, Transform, Load) processes</li>\n</ul>\n<hr>\n<h2 id=\"chapter-12:-microkernel-architecture\">Chapter 12: Microkernel Architecture<a title=\"#chapter-12:-microkernel-architecture\" href=\"#chapter-12:-microkernel-architecture\"></a></h2>\n<h3 id=\"microkernel-architecture-rating\">Microkernel Architecture Rating<a title=\"#microkernel-architecture-rating\" href=\"#microkernel-architecture-rating\"></a></h3>\n<img src=\"images/books/software-microkernel-architecture-rating.png\" alt=\"Layered Architecture Rating\" width=\"60%\"/>\n<ol>\n<li><strong>What is another name for the microkernel architecture style?</strong></li>\n</ol>\n<p>🤓 The microkernel architecture style is also known as the plug-in architecture style.</p>\n<ol>\n<li><strong>Under what situations is it OK for plug-in components to be dependent on other plug-in components?</strong></li>\n</ol>\n<p>🤓 It’s OK for plug-in components to be dependent on other plug-in components when the plug-in components are part of the same architecture quantum.</p>\n<ol start=\"2\">\n<li><strong>What are some of the tools and frameworks that can be used to manage plug-ins?</strong></li>\n</ol>\n<p>🤓 Open Service Gateway Initiative (OSGi) for Java, Penrose (Java), Jigsaw (Java), or Prism (.NET).</p>\n<ol start=\"3\">\n<li><strong>What would you do if you had a third-party plug-in that didn’t conform to the standard plug-in contract in the core system?</strong></li>\n</ol>\n<p>🤓 You would create an adapter to convert the third-party plug-in to conform to the standard plug-in contract in the core system.</p>\n<ol start=\"4\">\n<li><strong>Provide two examples of the microkernel architecture style.</strong></li>\n</ol>\n<ul>\n<li>Eclipse IDE</li>\n<li>Jira</li>\n<li>Jenkins</li>\n<li>Backstage (Spotify)</li>\n</ul>\n<ol start=\"5\">\n<li><strong>Is the microkernel architecture style technically partitioned or domain partitioned?</strong></li>\n</ol>\n<p>🤓 Microkernel architecture can be either technically partitioned or domain partitioned.</p>\n<ol>\n<li><strong>Why is the microkernel architecture always a single architecture quantum?</strong></li>\n</ol>\n<p>🤓 The microkernel architecture is always a single architecture quantum because the core system is the only component that is not a plug-in.</p>\n<ol start=\"7\">\n<li><strong>What is domain/architecture isomorphism?</strong></li>\n</ol>\n<p>Domain/architecture isomorphism is a concept that compares the shape of a problem domain with the shape of an architecture style, and determines how well they match. It is based on the mathematical term isomorphism, which means equal in form or shape. The idea is that different problems have different shapes, and different architectures have different shapes, and some shapes fit better than others</p>\n<hr>\n","date_formatted":{"ll":"Aug 2, 2023","L":"08/02/2023","MM-DD":"08-02"},"plink":"http://codesandtags.io/blog/2023/08/02/en/fundamentals-of-software-architecture-part-3/","type":"post","toc":[{"id":"fundamentals-of-software-architecture","title":"Fundamentals of Software Architecture","index":"1","children":[{"id":"book-details","title":"Book Details","index":"1.1"},{"id":"summary","title":"Summary","index":"1.2"}]},{"id":"chapter-9:-architecture-styles","title":"Chapter 9: Architecture Styles","index":"2"},{"id":"chapter-10:-layered-architecture-style","title":"Chapter 10: Layered Architecture Style","index":"3","children":[{"id":"layered-architecture-rating","title":"Layered Architecture Rating","index":"3.1"}]},{"id":"chapter-11:-pipeline-architecture","title":"Chapter 11: Pipeline Architecture","index":"4","children":[{"id":"pipeline-architecture-rating","title":"Pipeline Architecture Rating","index":"4.1"}]},{"id":"chapter-12:-microkernel-architecture","title":"Chapter 12: Microkernel Architecture","index":"5","children":[{"id":"microkernel-architecture-rating","title":"Microkernel Architecture Rating","index":"5.1"}]}],"reading_time":"1119 words in 7 min"},{"title":"Fundamentals of Software Architecture Book - Part 4","author":"codesandtags","date":"2023-08-07T22:43:27.000Z","thumbnail":"images/books/cover-fundamentals-software-architecture.png","excerpt":"Here I have the relevant points to me of the book Fundamentals of Software Architecture by Mark Richards and Neal Ford. This part is focused on distributed architecture styles.","_content":"\n## Fundamentals of Software Architecture\n\n### Book Details\n\n- **Title**: [Fundamentals of Software Architecture](https://www.oreilly.com/library/view/fundamentals-of-software/9781492043447/)\n- **Author**: Mark Richards, Neal Ford\n- **Publication Year**: 2020\n\n### Summary\n\nThis book is a great introduction to software architecture, it covers the basics of software architecture, Here I have the relevant points to me of the book Fundamentals of Software Architecture by Mark Richards and Neal Ford. This part is focused on the **Distributed Architecture styles**.\n\n<img src=\"images/books/software-distributed-architectures.png\" alt=\"Distributed Architectures\" width=\"100%\"/>\n\n---\n\n## Chapter 13: Service-Based Architecture\n\n<img src=\"images/books/software-service-based-architecture-rating.png\" alt=\"Service Based Architecture Rating\" width=\"60%\"/>\n\n**1. How many services are there in a typical service-based architecture?**\n\n🤓 The number of services within an application context generally range between 4 and 12 services, with the average being about 7 services.\n\n**2. Do you have to break apart a database in service-based architecture?**\n\n🤓 No, it's not mandatory to break apart a database in service-based architecture. However, it's often recommended to have a database per service to achieve data encapsulation and maintain bounded contexts. In these cases it is important to make sure the data in each separate database is not needed by another domain service\n\n**3. Under what circumstances might you want to break apart a database?**\n\n🤓 You might want to break apart a database when:\n\n- Services require independent scaling.\n- Different services have different data storage requirements.\n- You want to ensure loose coupling and high cohesion.\n- There are concerns about data integrity or security that can be mitigated by separating data.\n\n**4. What technique can you use to manage database changes within a service-based architecture?**\n\n🤓 One way to mitigate the impact and risk of database changes is to logically partition the database and manifest the logical partitioning through federated shared libraries.\n\n![Database Logical Partitioning](images/books/software-architecture-database-logical-partitioning.png)\n\n**5. Do domain services require a container (such as Docker) to run?**\n\n🤓 No, domain services don't inherently require a container. However, using containers like Docker can provide benefits in terms of isolation, repeatability, and scalability.\n\n**6. Which architecture characteristics are well supported by the service-based architecture style?**\n\n🤓 The service-based architecture style supports well characteristics like :\n\n- Deployability\n- Modularity\n- Fault Tolerance\n- Overall Cost\n- Reliability\n- Testability\n\n**7. Why isn’t elasticity well supported in a service-based architecture?**\n\n🤓 Although programmatic scalability and elasticity are certainly possible with this architecture style, more functionality is replicated than with finer-grained services (such as microservices) and as such is not as efficient in terms of machine resources and not as cost-effective. Additionally, if services share resources like databases, it might be harder to scale them independently.\n\n**8. How can you increase the number of architecture quanta in a service-based architecture?**\n\n🤓 You can increase the number of architecture quanta by decomposing larger services into smaller, more granular ones, ensuring each service encapsulates a specific piece of functionality or domain.\n\n---\n\n## Chapter 14: Event-Driven Architecture Style\n\n<img src=\"images/books/software-event-driven-architecture-rating.png\" alt=\"Event Driven Architecture Rating\" width=\"60%\"/>\n\n**1. What are the primary differences between the broker and mediator topologies?**\n\n<img src=\"images/books/software-tradeoffs-broker-topology.png\" alt=\"Broker Topology Tradeoff\" width=\"60%\"/>\n\n- In the **broker topology**, event producers and consumers are directly connected through an event channel, such as a message queue or a topic. The event channel is responsible for routing and delivering events to the consumers, without any central coordination or orchestration. The producers and consumers are loosely coupled and unaware of each other. It uses events.\n\n<img src=\"images/books/software-tradeoffs-mediator-topology.png\" alt=\"Mediator Topology\" width=\"60%\"/>\n\n- In the **mediator topology**, event producers and consumers are indirectly connected through a central mediator, such as an event processor or a stream processor. The mediator is responsible for orchestrating and coordinating the events and the consumers, according to some predefined logic or rules. The producers and consumers are still loosely coupled, but they depend on the mediator for event processing. It uses commands.\n\n**2. For better workflow control, would you use the mediator or broker topology?**\n\n🤓 I would use the mediator topology. The mediator topology allows me to define complex event processing logic, such as filtering, aggregating, transforming, or correlating events, and execute different actions based on the event data and context. The mediator topology also enables me to monitor and manage the event flow and handle errors or exceptions.\n\n**3. Does the broker topology usually leverage a publish-and-subscribe model with topics or a point-to-point model with queues?**\n\n🤓 The broker topology usually leverages a publish-and-subscribe model with topics. A topic is a logical channel that can have multiple subscribers who receive all the events published to that topic. A topic can also have multiple partitions to increase scalability and performance. A publish-and-subscribe model with topics allows me to broadcast events to multiple consumers without knowing who they are or how many there are.\n\n**4. Name two primary advantage of asynchronous communications.**\n\n🤓 Improved **performance and responsiveness**: Asynchronous communications allow the event producers to send events without waiting for a response from the event consumers, which reduces latency and improves throughput. Asynchronous communications also enable the event consumers to react to events as they occur, which increases responsiveness and user satisfaction.\n\n**5. Give an example of a typical request within the request-based model.**\n\n🤓 A user submits an online order form on a website. The website sends a synchronous HTTP request to an order service that validates the order details, calculates the total price, and returns a confirmation message to the website. The website displays the confirmation message to the user.\n\n**6. Give an example of a typical request in an event-based model.**\n\n🤓 A user submits an online order form on a website. The website publishes an OrderPlaced event to a message broker. An order service subscribes to the OrderPlaced event and receives a copy of it. The order service validates the order details, calculates the total price, and publishes an OrderConfirmed event to the message broker. A notification service subscribes to the OrderConfirmed event and receives a copy of it. The notification service sends an email confirmation to the user.\n\n**7. What is the difference between an initiating event and a processing event in event-driven architecture?**\n\n🤓 An **initiating event** is an event that triggers a new business process or workflow. It usually originates from an external source, such as a user action or a sensor input. For example, an OrderPlaced event is an initiating event that starts an order processing workflow.\n\nA **processing event** is an event that occurs as part of an existing business process or workflow. It usually originates from an internal source, such as another service or component. For example, an OrderConfirmed event is a processing event that continues an order processing workflow.\n\n**8. What are some of the techniques for preventing data loss when sending and receiving messages from a queue?**\n\n- **Synchronouse send**: Using durable queues that persist messages until they are consumed or expired.\n- **Client Acknowledge mode**: Using acknowledgements that confirm when a message is successfully received or processed by a consumer.\n- **Last Participant Support**: Using transactions that ensure atomicity and consistency of message operations.\n- Using retries and dead-letter queues that handle failed or poisoned messages.\n\n**9 What are three main driving architecture characteristics for using event-driven architecture?**\n\n<img src=\"images/books/software-tradeoffs-event-driven-architecture.png\" alt=\"Event Driven Architecture Tradeoffs\" width=\"60%\"/>\n\n- **Real-time processing**: Event-driven architecture enables near real-time processing of events as they occur, which supports scenarios such as IoT, streaming analytics, fraud detection, etc.\n- **Loose coupling**: Event-driven architecture enables loose coupling between event producers and consumers, which supports scenarios such as microservices, cloud-native applications, integration platforms, etc.\n- **High scalability**: Event-driven architecture enables high scalability of event producers and consumers, which supports scenarios such as big data, social media, e-commerce, etc.\n\n**10. What are some of the architecture characteristics that are not well supported in event-driven architecture?**\n\n- Simplicity\n- Testability\n- Overall cost\n- Deployability\n\nOther characteristics to consider are:\n\n- **Synchronous communication**: Event-driven architecture relies on asynchronous communication between event producers and consumers, which does not support scenarios that require immediate feedback or confirmation from another service or component.\n- **Complex transactions**: Event-driven architecture does not support complex transactions that span multiple services or components, which require coordination, consistency, and rollback mechanisms.\n- **Querying data**: Event-driven architecture does not support querying data across multiple services or components, which require aggregation, joining, filtering, and sorting mechanisms.\n\n---\n\n## Chapter 15: Space-Based Architecture\n\n<img src=\"images/books/software-space-based-architecture-rating.png\" alt=\"Layered Architecture Rating\" width=\"60%\"/>\n\nWhere does space-based architecture get its name from?\n\nWhat is a primary aspect of space-based architecture that differentiates it from other architecture styles?\n\nName the four components that make up the virtualized middleware within a space-based architecture.\n\nWhat is the role of the messaging grid?\n\nWhat is the role of a data writer in space-based architecture?\n\nUnder what conditions would a service need to access data through the data reader?\n\nDoes a small cache size increase or decrease the chances for a data collision?\n\nWhat is the difference between a replicated cache and a distributed cache? Which one is typically used in space-based architecture?\n\nList three of the most strongly supported architecture characteristics in space-based architecture.\n\nWhy does testability rate so low for space-based architecture?\n\n---\n\n## Chapter 16: Orchestration-Driven Service-Oriented Architecture\n\n<img src=\"images/books/software-orchestration-driven-service-oriented-architecture-rating.png\" alt=\"Layered Architecture Rating\" width=\"60%\"/>\n\n**What was the main driving force behind service-oriented architecture?**\n\n- The main driving force behind service-oriented architecture was the need to integrate disparate systems and applications and reuse existing functionality, given the costs and complexities of building and maintaining monolithic applications.\n\n**What are the four primary service types within a service-oriented architecture?**\n\n- **Business Services**: It provides the entry point into the service-oriented architecture and is responsible for exposing the business functionality to the outside world.\n- **Entprise Services**: It provides the core business functionality and is responsible for implementing the business logic.\n- **Application Services**: It provides the application-specific functionality and is responsible for implementing the application logic.\n- **Infrastructure Services**: It provides the infrastructure-specific functionality and is responsible for implementing the infrastructure logic, monitoring, logging or authentication.\n\n**List some of the factors that led to the downfall of service-oriented architecture.**\n\n- **Complexity**: Service-oriented architecture is inherently complex, which makes it difficult to design, develop, and maintain.\n- **Performance**: Service-oriented architecture is inherently slow, which makes it difficult to achieve high performance.\n- **Scalability**: Service-oriented architecture is inherently inefficient, which makes it difficult to scale.\n- **Coupling**: Service-oriented architecture is inherently tightly coupled, which makes it difficult to achieve loose coupling.\n\n**Is service-oriented architecture technically partitioned or domain partitioned?**\n\n- Service-oriented architecture is technically partitioned because it is based on the technical capabilities of the underlying infrastructure, such as messaging, transactions, or security.\n\n**How is domain reuse addressed in SOA? How is operational reuse addressed?**\n\n- Domain reuse is addressed in SOA by implementing the business logic as enterprise services that can be reused across multiple applications.\n\n---\n\n## Chapter 17: Microservices Architecture\n\n<img src=\"images/books/software-microservices-architecture-rating.png\" alt=\"Layered Architecture Rating\" width=\"60%\"/>\n\n**1. Why is the bounded context concept so critical for microservices architecture?**\n\n🤓 ...\n\n**2. What are three ways of determining if you have the right level of granularity in a microservice?**\n\n🤓 ...\n\n**3. What functionality might be contained within a sidecar?**\n\n🤓 ...\n\n**4. What is the difference between orchestration and choreography? Which does microservices support? Is one communication style easier in microservices?**\n\n🤓 ...\n\n**5. What is a saga in microservices?**\n\n🤓 ...\n\n**6. Why are agility, testability, and deployability so well supported in microservices?**\n\n🤓 ...\n\n**7. What are two reasons performance is usually an issue in microservices?**\n\n🤓 ...\n\n**8. Is microservices a domain-partitioned architecture or a technically partitioned one?**\n\n🤓 ...\n\n**9. Describe a topology where a microservices ecosystem might be only a single quantum.**\n\n🤓 ...\n\n**10. How was domain reuse addressed in microservices? How was operational reuse addressed?**\n\n🤓 ...\n","source":"_posts/en/fundamentals-of-software-architecture-part-4.md","raw":"---\ntitle: Fundamentals of Software Architecture Book - Part 4\nauthor: codesandtags\ndate: 2023-08-07 18:43:27\ncategory: Software Architecture\nthumbnail: images/books/cover-fundamentals-software-architecture.png\ntags: [software-architecture, books]\nexcerpt: Here I have the relevant points to me of the book Fundamentals of Software Architecture by Mark Richards and Neal Ford. This part is focused on distributed architecture styles.\n---\n\n## Fundamentals of Software Architecture\n\n### Book Details\n\n- **Title**: [Fundamentals of Software Architecture](https://www.oreilly.com/library/view/fundamentals-of-software/9781492043447/)\n- **Author**: Mark Richards, Neal Ford\n- **Publication Year**: 2020\n\n### Summary\n\nThis book is a great introduction to software architecture, it covers the basics of software architecture, Here I have the relevant points to me of the book Fundamentals of Software Architecture by Mark Richards and Neal Ford. This part is focused on the **Distributed Architecture styles**.\n\n<img src=\"images/books/software-distributed-architectures.png\" alt=\"Distributed Architectures\" width=\"100%\"/>\n\n---\n\n## Chapter 13: Service-Based Architecture\n\n<img src=\"images/books/software-service-based-architecture-rating.png\" alt=\"Service Based Architecture Rating\" width=\"60%\"/>\n\n**1. How many services are there in a typical service-based architecture?**\n\n🤓 The number of services within an application context generally range between 4 and 12 services, with the average being about 7 services.\n\n**2. Do you have to break apart a database in service-based architecture?**\n\n🤓 No, it's not mandatory to break apart a database in service-based architecture. However, it's often recommended to have a database per service to achieve data encapsulation and maintain bounded contexts. In these cases it is important to make sure the data in each separate database is not needed by another domain service\n\n**3. Under what circumstances might you want to break apart a database?**\n\n🤓 You might want to break apart a database when:\n\n- Services require independent scaling.\n- Different services have different data storage requirements.\n- You want to ensure loose coupling and high cohesion.\n- There are concerns about data integrity or security that can be mitigated by separating data.\n\n**4. What technique can you use to manage database changes within a service-based architecture?**\n\n🤓 One way to mitigate the impact and risk of database changes is to logically partition the database and manifest the logical partitioning through federated shared libraries.\n\n![Database Logical Partitioning](images/books/software-architecture-database-logical-partitioning.png)\n\n**5. Do domain services require a container (such as Docker) to run?**\n\n🤓 No, domain services don't inherently require a container. However, using containers like Docker can provide benefits in terms of isolation, repeatability, and scalability.\n\n**6. Which architecture characteristics are well supported by the service-based architecture style?**\n\n🤓 The service-based architecture style supports well characteristics like :\n\n- Deployability\n- Modularity\n- Fault Tolerance\n- Overall Cost\n- Reliability\n- Testability\n\n**7. Why isn’t elasticity well supported in a service-based architecture?**\n\n🤓 Although programmatic scalability and elasticity are certainly possible with this architecture style, more functionality is replicated than with finer-grained services (such as microservices) and as such is not as efficient in terms of machine resources and not as cost-effective. Additionally, if services share resources like databases, it might be harder to scale them independently.\n\n**8. How can you increase the number of architecture quanta in a service-based architecture?**\n\n🤓 You can increase the number of architecture quanta by decomposing larger services into smaller, more granular ones, ensuring each service encapsulates a specific piece of functionality or domain.\n\n---\n\n## Chapter 14: Event-Driven Architecture Style\n\n<img src=\"images/books/software-event-driven-architecture-rating.png\" alt=\"Event Driven Architecture Rating\" width=\"60%\"/>\n\n**1. What are the primary differences between the broker and mediator topologies?**\n\n<img src=\"images/books/software-tradeoffs-broker-topology.png\" alt=\"Broker Topology Tradeoff\" width=\"60%\"/>\n\n- In the **broker topology**, event producers and consumers are directly connected through an event channel, such as a message queue or a topic. The event channel is responsible for routing and delivering events to the consumers, without any central coordination or orchestration. The producers and consumers are loosely coupled and unaware of each other. It uses events.\n\n<img src=\"images/books/software-tradeoffs-mediator-topology.png\" alt=\"Mediator Topology\" width=\"60%\"/>\n\n- In the **mediator topology**, event producers and consumers are indirectly connected through a central mediator, such as an event processor or a stream processor. The mediator is responsible for orchestrating and coordinating the events and the consumers, according to some predefined logic or rules. The producers and consumers are still loosely coupled, but they depend on the mediator for event processing. It uses commands.\n\n**2. For better workflow control, would you use the mediator or broker topology?**\n\n🤓 I would use the mediator topology. The mediator topology allows me to define complex event processing logic, such as filtering, aggregating, transforming, or correlating events, and execute different actions based on the event data and context. The mediator topology also enables me to monitor and manage the event flow and handle errors or exceptions.\n\n**3. Does the broker topology usually leverage a publish-and-subscribe model with topics or a point-to-point model with queues?**\n\n🤓 The broker topology usually leverages a publish-and-subscribe model with topics. A topic is a logical channel that can have multiple subscribers who receive all the events published to that topic. A topic can also have multiple partitions to increase scalability and performance. A publish-and-subscribe model with topics allows me to broadcast events to multiple consumers without knowing who they are or how many there are.\n\n**4. Name two primary advantage of asynchronous communications.**\n\n🤓 Improved **performance and responsiveness**: Asynchronous communications allow the event producers to send events without waiting for a response from the event consumers, which reduces latency and improves throughput. Asynchronous communications also enable the event consumers to react to events as they occur, which increases responsiveness and user satisfaction.\n\n**5. Give an example of a typical request within the request-based model.**\n\n🤓 A user submits an online order form on a website. The website sends a synchronous HTTP request to an order service that validates the order details, calculates the total price, and returns a confirmation message to the website. The website displays the confirmation message to the user.\n\n**6. Give an example of a typical request in an event-based model.**\n\n🤓 A user submits an online order form on a website. The website publishes an OrderPlaced event to a message broker. An order service subscribes to the OrderPlaced event and receives a copy of it. The order service validates the order details, calculates the total price, and publishes an OrderConfirmed event to the message broker. A notification service subscribes to the OrderConfirmed event and receives a copy of it. The notification service sends an email confirmation to the user.\n\n**7. What is the difference between an initiating event and a processing event in event-driven architecture?**\n\n🤓 An **initiating event** is an event that triggers a new business process or workflow. It usually originates from an external source, such as a user action or a sensor input. For example, an OrderPlaced event is an initiating event that starts an order processing workflow.\n\nA **processing event** is an event that occurs as part of an existing business process or workflow. It usually originates from an internal source, such as another service or component. For example, an OrderConfirmed event is a processing event that continues an order processing workflow.\n\n**8. What are some of the techniques for preventing data loss when sending and receiving messages from a queue?**\n\n- **Synchronouse send**: Using durable queues that persist messages until they are consumed or expired.\n- **Client Acknowledge mode**: Using acknowledgements that confirm when a message is successfully received or processed by a consumer.\n- **Last Participant Support**: Using transactions that ensure atomicity and consistency of message operations.\n- Using retries and dead-letter queues that handle failed or poisoned messages.\n\n**9 What are three main driving architecture characteristics for using event-driven architecture?**\n\n<img src=\"images/books/software-tradeoffs-event-driven-architecture.png\" alt=\"Event Driven Architecture Tradeoffs\" width=\"60%\"/>\n\n- **Real-time processing**: Event-driven architecture enables near real-time processing of events as they occur, which supports scenarios such as IoT, streaming analytics, fraud detection, etc.\n- **Loose coupling**: Event-driven architecture enables loose coupling between event producers and consumers, which supports scenarios such as microservices, cloud-native applications, integration platforms, etc.\n- **High scalability**: Event-driven architecture enables high scalability of event producers and consumers, which supports scenarios such as big data, social media, e-commerce, etc.\n\n**10. What are some of the architecture characteristics that are not well supported in event-driven architecture?**\n\n- Simplicity\n- Testability\n- Overall cost\n- Deployability\n\nOther characteristics to consider are:\n\n- **Synchronous communication**: Event-driven architecture relies on asynchronous communication between event producers and consumers, which does not support scenarios that require immediate feedback or confirmation from another service or component.\n- **Complex transactions**: Event-driven architecture does not support complex transactions that span multiple services or components, which require coordination, consistency, and rollback mechanisms.\n- **Querying data**: Event-driven architecture does not support querying data across multiple services or components, which require aggregation, joining, filtering, and sorting mechanisms.\n\n---\n\n## Chapter 15: Space-Based Architecture\n\n<img src=\"images/books/software-space-based-architecture-rating.png\" alt=\"Layered Architecture Rating\" width=\"60%\"/>\n\nWhere does space-based architecture get its name from?\n\nWhat is a primary aspect of space-based architecture that differentiates it from other architecture styles?\n\nName the four components that make up the virtualized middleware within a space-based architecture.\n\nWhat is the role of the messaging grid?\n\nWhat is the role of a data writer in space-based architecture?\n\nUnder what conditions would a service need to access data through the data reader?\n\nDoes a small cache size increase or decrease the chances for a data collision?\n\nWhat is the difference between a replicated cache and a distributed cache? Which one is typically used in space-based architecture?\n\nList three of the most strongly supported architecture characteristics in space-based architecture.\n\nWhy does testability rate so low for space-based architecture?\n\n---\n\n## Chapter 16: Orchestration-Driven Service-Oriented Architecture\n\n<img src=\"images/books/software-orchestration-driven-service-oriented-architecture-rating.png\" alt=\"Layered Architecture Rating\" width=\"60%\"/>\n\n**What was the main driving force behind service-oriented architecture?**\n\n- The main driving force behind service-oriented architecture was the need to integrate disparate systems and applications and reuse existing functionality, given the costs and complexities of building and maintaining monolithic applications.\n\n**What are the four primary service types within a service-oriented architecture?**\n\n- **Business Services**: It provides the entry point into the service-oriented architecture and is responsible for exposing the business functionality to the outside world.\n- **Entprise Services**: It provides the core business functionality and is responsible for implementing the business logic.\n- **Application Services**: It provides the application-specific functionality and is responsible for implementing the application logic.\n- **Infrastructure Services**: It provides the infrastructure-specific functionality and is responsible for implementing the infrastructure logic, monitoring, logging or authentication.\n\n**List some of the factors that led to the downfall of service-oriented architecture.**\n\n- **Complexity**: Service-oriented architecture is inherently complex, which makes it difficult to design, develop, and maintain.\n- **Performance**: Service-oriented architecture is inherently slow, which makes it difficult to achieve high performance.\n- **Scalability**: Service-oriented architecture is inherently inefficient, which makes it difficult to scale.\n- **Coupling**: Service-oriented architecture is inherently tightly coupled, which makes it difficult to achieve loose coupling.\n\n**Is service-oriented architecture technically partitioned or domain partitioned?**\n\n- Service-oriented architecture is technically partitioned because it is based on the technical capabilities of the underlying infrastructure, such as messaging, transactions, or security.\n\n**How is domain reuse addressed in SOA? How is operational reuse addressed?**\n\n- Domain reuse is addressed in SOA by implementing the business logic as enterprise services that can be reused across multiple applications.\n\n---\n\n## Chapter 17: Microservices Architecture\n\n<img src=\"images/books/software-microservices-architecture-rating.png\" alt=\"Layered Architecture Rating\" width=\"60%\"/>\n\n**1. Why is the bounded context concept so critical for microservices architecture?**\n\n🤓 ...\n\n**2. What are three ways of determining if you have the right level of granularity in a microservice?**\n\n🤓 ...\n\n**3. What functionality might be contained within a sidecar?**\n\n🤓 ...\n\n**4. What is the difference between orchestration and choreography? Which does microservices support? Is one communication style easier in microservices?**\n\n🤓 ...\n\n**5. What is a saga in microservices?**\n\n🤓 ...\n\n**6. Why are agility, testability, and deployability so well supported in microservices?**\n\n🤓 ...\n\n**7. What are two reasons performance is usually an issue in microservices?**\n\n🤓 ...\n\n**8. Is microservices a domain-partitioned architecture or a technically partitioned one?**\n\n🤓 ...\n\n**9. Describe a topology where a microservices ecosystem might be only a single quantum.**\n\n🤓 ...\n\n**10. How was domain reuse addressed in microservices? How was operational reuse addressed?**\n\n🤓 ...\n","slug":"en/fundamentals-of-software-architecture-part-4","published":1,"updated":"2023-10-19T01:28:14.650Z","comments":0,"layout":"post","photos":[],"link":"2023/08/07/en/fundamentals-of-software-architecture-part-4","_id":"clnwi7gat0007qbt295n72i2z","content":"<h2 id=\"fundamentals-of-software-architecture\">Fundamentals of Software Architecture<a title=\"#fundamentals-of-software-architecture\" href=\"#fundamentals-of-software-architecture\"></a></h2>\n<h3 id=\"book-details\">Book Details<a title=\"#book-details\" href=\"#book-details\"></a></h3>\n<ul>\n<li><strong>Title</strong>: <a href=\"https://www.oreilly.com/library/view/fundamentals-of-software/9781492043447/\" target=\"_blank\">Fundamentals of Software Architecture</a></li>\n<li><strong>Author</strong>: Mark Richards, Neal Ford</li>\n<li><strong>Publication Year</strong>: 2020</li>\n</ul>\n<h3 id=\"summary\">Summary<a title=\"#summary\" href=\"#summary\"></a></h3>\n<p>This book is a great introduction to software architecture, it covers the basics of software architecture, Here I have the relevant points to me of the book Fundamentals of Software Architecture by Mark Richards and Neal Ford. This part is focused on the <strong>Distributed Architecture styles</strong>.</p>\n<img src=\"images/books/software-distributed-architectures.png\" alt=\"Distributed Architectures\" width=\"100%\"/>\n<hr>\n<h2 id=\"chapter-13:-service-based-architecture\">Chapter 13: Service-Based Architecture<a title=\"#chapter-13:-service-based-architecture\" href=\"#chapter-13:-service-based-architecture\"></a></h2>\n<img src=\"images/books/software-service-based-architecture-rating.png\" alt=\"Service Based Architecture Rating\" width=\"60%\"/>\n<p><strong>1. How many services are there in a typical service-based architecture?</strong></p>\n<p>🤓 The number of services within an application context generally range between 4 and 12 services, with the average being about 7 services.</p>\n<p><strong>2. Do you have to break apart a database in service-based architecture?</strong></p>\n<p>🤓 No, it’s not mandatory to break apart a database in service-based architecture. However, it’s often recommended to have a database per service to achieve data encapsulation and maintain bounded contexts. In these cases it is important to make sure the data in each separate database is not needed by another domain service</p>\n<p><strong>3. Under what circumstances might you want to break apart a database?</strong></p>\n<p>🤓 You might want to break apart a database when:</p>\n<ul>\n<li>Services require independent scaling.</li>\n<li>Different services have different data storage requirements.</li>\n<li>You want to ensure loose coupling and high cohesion.</li>\n<li>There are concerns about data integrity or security that can be mitigated by separating data.</li>\n</ul>\n<p><strong>4. What technique can you use to manage database changes within a service-based architecture?</strong></p>\n<p>🤓 One way to mitigate the impact and risk of database changes is to logically partition the database and manifest the logical partitioning through federated shared libraries.</p>\n<p><img src=\"images/books/software-architecture-database-logical-partitioning.png\" alt=\"Database Logical Partitioning\" loading=\"lazy\" class=\"φbp\"></p>\n<p><strong>5. Do domain services require a container (such as Docker) to run?</strong></p>\n<p>🤓 No, domain services don’t inherently require a container. However, using containers like Docker can provide benefits in terms of isolation, repeatability, and scalability.</p>\n<p><strong>6. Which architecture characteristics are well supported by the service-based architecture style?</strong></p>\n<p>🤓 The service-based architecture style supports well characteristics like :</p>\n<ul>\n<li>Deployability</li>\n<li>Modularity</li>\n<li>Fault Tolerance</li>\n<li>Overall Cost</li>\n<li>Reliability</li>\n<li>Testability</li>\n</ul>\n<p><strong>7. Why isn’t elasticity well supported in a service-based architecture?</strong></p>\n<p>🤓 Although programmatic scalability and elasticity are certainly possible with this architecture style, more functionality is replicated than with finer-grained services (such as microservices) and as such is not as efficient in terms of machine resources and not as cost-effective. Additionally, if services share resources like databases, it might be harder to scale them independently.</p>\n<p><strong>8. How can you increase the number of architecture quanta in a service-based architecture?</strong></p>\n<p>🤓 You can increase the number of architecture quanta by decomposing larger services into smaller, more granular ones, ensuring each service encapsulates a specific piece of functionality or domain.</p>\n<hr>\n<h2 id=\"chapter-14:-event-driven-architecture-style\">Chapter 14: Event-Driven Architecture Style<a title=\"#chapter-14:-event-driven-architecture-style\" href=\"#chapter-14:-event-driven-architecture-style\"></a></h2>\n<img src=\"images/books/software-event-driven-architecture-rating.png\" alt=\"Event Driven Architecture Rating\" width=\"60%\"/>\n<p><strong>1. What are the primary differences between the broker and mediator topologies?</strong></p>\n<img src=\"images/books/software-tradeoffs-broker-topology.png\" alt=\"Broker Topology Tradeoff\" width=\"60%\"/>\n<ul>\n<li>In the <strong>broker topology</strong>, event producers and consumers are directly connected through an event channel, such as a message queue or a topic. The event channel is responsible for routing and delivering events to the consumers, without any central coordination or orchestration. The producers and consumers are loosely coupled and unaware of each other. It uses events.</li>\n</ul>\n<img src=\"images/books/software-tradeoffs-mediator-topology.png\" alt=\"Mediator Topology\" width=\"60%\"/>\n<ul>\n<li>In the <strong>mediator topology</strong>, event producers and consumers are indirectly connected through a central mediator, such as an event processor or a stream processor. The mediator is responsible for orchestrating and coordinating the events and the consumers, according to some predefined logic or rules. The producers and consumers are still loosely coupled, but they depend on the mediator for event processing. It uses commands.</li>\n</ul>\n<p><strong>2. For better workflow control, would you use the mediator or broker topology?</strong></p>\n<p>🤓 I would use the mediator topology. The mediator topology allows me to define complex event processing logic, such as filtering, aggregating, transforming, or correlating events, and execute different actions based on the event data and context. The mediator topology also enables me to monitor and manage the event flow and handle errors or exceptions.</p>\n<p><strong>3. Does the broker topology usually leverage a publish-and-subscribe model with topics or a point-to-point model with queues?</strong></p>\n<p>🤓 The broker topology usually leverages a publish-and-subscribe model with topics. A topic is a logical channel that can have multiple subscribers who receive all the events published to that topic. A topic can also have multiple partitions to increase scalability and performance. A publish-and-subscribe model with topics allows me to broadcast events to multiple consumers without knowing who they are or how many there are.</p>\n<p><strong>4. Name two primary advantage of asynchronous communications.</strong></p>\n<p>🤓 Improved <strong>performance and responsiveness</strong>: Asynchronous communications allow the event producers to send events without waiting for a response from the event consumers, which reduces latency and improves throughput. Asynchronous communications also enable the event consumers to react to events as they occur, which increases responsiveness and user satisfaction.</p>\n<p><strong>5. Give an example of a typical request within the request-based model.</strong></p>\n<p>🤓 A user submits an online order form on a website. The website sends a synchronous HTTP request to an order service that validates the order details, calculates the total price, and returns a confirmation message to the website. The website displays the confirmation message to the user.</p>\n<p><strong>6. Give an example of a typical request in an event-based model.</strong></p>\n<p>🤓 A user submits an online order form on a website. The website publishes an OrderPlaced event to a message broker. An order service subscribes to the OrderPlaced event and receives a copy of it. The order service validates the order details, calculates the total price, and publishes an OrderConfirmed event to the message broker. A notification service subscribes to the OrderConfirmed event and receives a copy of it. The notification service sends an email confirmation to the user.</p>\n<p><strong>7. What is the difference between an initiating event and a processing event in event-driven architecture?</strong></p>\n<p>🤓 An <strong>initiating event</strong> is an event that triggers a new business process or workflow. It usually originates from an external source, such as a user action or a sensor input. For example, an OrderPlaced event is an initiating event that starts an order processing workflow.</p>\n<p>A <strong>processing event</strong> is an event that occurs as part of an existing business process or workflow. It usually originates from an internal source, such as another service or component. For example, an OrderConfirmed event is a processing event that continues an order processing workflow.</p>\n<p><strong>8. What are some of the techniques for preventing data loss when sending and receiving messages from a queue?</strong></p>\n<ul>\n<li><strong>Synchronouse send</strong>: Using durable queues that persist messages until they are consumed or expired.</li>\n<li><strong>Client Acknowledge mode</strong>: Using acknowledgements that confirm when a message is successfully received or processed by a consumer.</li>\n<li><strong>Last Participant Support</strong>: Using transactions that ensure atomicity and consistency of message operations.</li>\n<li>Using retries and dead-letter queues that handle failed or poisoned messages.</li>\n</ul>\n<p><strong>9 What are three main driving architecture characteristics for using event-driven architecture?</strong></p>\n<img src=\"images/books/software-tradeoffs-event-driven-architecture.png\" alt=\"Event Driven Architecture Tradeoffs\" width=\"60%\"/>\n<ul>\n<li><strong>Real-time processing</strong>: Event-driven architecture enables near real-time processing of events as they occur, which supports scenarios such as IoT, streaming analytics, fraud detection, etc.</li>\n<li><strong>Loose coupling</strong>: Event-driven architecture enables loose coupling between event producers and consumers, which supports scenarios such as microservices, cloud-native applications, integration platforms, etc.</li>\n<li><strong>High scalability</strong>: Event-driven architecture enables high scalability of event producers and consumers, which supports scenarios such as big data, social media, e-commerce, etc.</li>\n</ul>\n<p><strong>10. What are some of the architecture characteristics that are not well supported in event-driven architecture?</strong></p>\n<ul>\n<li>Simplicity</li>\n<li>Testability</li>\n<li>Overall cost</li>\n<li>Deployability</li>\n</ul>\n<p>Other characteristics to consider are:</p>\n<ul>\n<li><strong>Synchronous communication</strong>: Event-driven architecture relies on asynchronous communication between event producers and consumers, which does not support scenarios that require immediate feedback or confirmation from another service or component.</li>\n<li><strong>Complex transactions</strong>: Event-driven architecture does not support complex transactions that span multiple services or components, which require coordination, consistency, and rollback mechanisms.</li>\n<li><strong>Querying data</strong>: Event-driven architecture does not support querying data across multiple services or components, which require aggregation, joining, filtering, and sorting mechanisms.</li>\n</ul>\n<hr>\n<h2 id=\"chapter-15:-space-based-architecture\">Chapter 15: Space-Based Architecture<a title=\"#chapter-15:-space-based-architecture\" href=\"#chapter-15:-space-based-architecture\"></a></h2>\n<img src=\"images/books/software-space-based-architecture-rating.png\" alt=\"Layered Architecture Rating\" width=\"60%\"/>\n<p>Where does space-based architecture get its name from?</p>\n<p>What is a primary aspect of space-based architecture that differentiates it from other architecture styles?</p>\n<p>Name the four components that make up the virtualized middleware within a space-based architecture.</p>\n<p>What is the role of the messaging grid?</p>\n<p>What is the role of a data writer in space-based architecture?</p>\n<p>Under what conditions would a service need to access data through the data reader?</p>\n<p>Does a small cache size increase or decrease the chances for a data collision?</p>\n<p>What is the difference between a replicated cache and a distributed cache? Which one is typically used in space-based architecture?</p>\n<p>List three of the most strongly supported architecture characteristics in space-based architecture.</p>\n<p>Why does testability rate so low for space-based architecture?</p>\n<hr>\n<h2 id=\"chapter-16:-orchestration-driven-service-oriented-architecture\">Chapter 16: Orchestration-Driven Service-Oriented Architecture<a title=\"#chapter-16:-orchestration-driven-service-oriented-architecture\" href=\"#chapter-16:-orchestration-driven-service-oriented-architecture\"></a></h2>\n<img src=\"images/books/software-orchestration-driven-service-oriented-architecture-rating.png\" alt=\"Layered Architecture Rating\" width=\"60%\"/>\n<p><strong>What was the main driving force behind service-oriented architecture?</strong></p>\n<ul>\n<li>The main driving force behind service-oriented architecture was the need to integrate disparate systems and applications and reuse existing functionality, given the costs and complexities of building and maintaining monolithic applications.</li>\n</ul>\n<p><strong>What are the four primary service types within a service-oriented architecture?</strong></p>\n<ul>\n<li><strong>Business Services</strong>: It provides the entry point into the service-oriented architecture and is responsible for exposing the business functionality to the outside world.</li>\n<li><strong>Entprise Services</strong>: It provides the core business functionality and is responsible for implementing the business logic.</li>\n<li><strong>Application Services</strong>: It provides the application-specific functionality and is responsible for implementing the application logic.</li>\n<li><strong>Infrastructure Services</strong>: It provides the infrastructure-specific functionality and is responsible for implementing the infrastructure logic, monitoring, logging or authentication.</li>\n</ul>\n<p><strong>List some of the factors that led to the downfall of service-oriented architecture.</strong></p>\n<ul>\n<li><strong>Complexity</strong>: Service-oriented architecture is inherently complex, which makes it difficult to design, develop, and maintain.</li>\n<li><strong>Performance</strong>: Service-oriented architecture is inherently slow, which makes it difficult to achieve high performance.</li>\n<li><strong>Scalability</strong>: Service-oriented architecture is inherently inefficient, which makes it difficult to scale.</li>\n<li><strong>Coupling</strong>: Service-oriented architecture is inherently tightly coupled, which makes it difficult to achieve loose coupling.</li>\n</ul>\n<p><strong>Is service-oriented architecture technically partitioned or domain partitioned?</strong></p>\n<ul>\n<li>Service-oriented architecture is technically partitioned because it is based on the technical capabilities of the underlying infrastructure, such as messaging, transactions, or security.</li>\n</ul>\n<p><strong>How is domain reuse addressed in SOA? How is operational reuse addressed?</strong></p>\n<ul>\n<li>Domain reuse is addressed in SOA by implementing the business logic as enterprise services that can be reused across multiple applications.</li>\n</ul>\n<hr>\n<h2 id=\"chapter-17:-microservices-architecture\">Chapter 17: Microservices Architecture<a title=\"#chapter-17:-microservices-architecture\" href=\"#chapter-17:-microservices-architecture\"></a></h2>\n<img src=\"images/books/software-microservices-architecture-rating.png\" alt=\"Layered Architecture Rating\" width=\"60%\"/>\n<p><strong>1. Why is the bounded context concept so critical for microservices architecture?</strong></p>\n<p>🤓 …</p>\n<p><strong>2. What are three ways of determining if you have the right level of granularity in a microservice?</strong></p>\n<p>🤓 …</p>\n<p><strong>3. What functionality might be contained within a sidecar?</strong></p>\n<p>🤓 …</p>\n<p><strong>4. What is the difference between orchestration and choreography? Which does microservices support? Is one communication style easier in microservices?</strong></p>\n<p>🤓 …</p>\n<p><strong>5. What is a saga in microservices?</strong></p>\n<p>🤓 …</p>\n<p><strong>6. Why are agility, testability, and deployability so well supported in microservices?</strong></p>\n<p>🤓 …</p>\n<p><strong>7. What are two reasons performance is usually an issue in microservices?</strong></p>\n<p>🤓 …</p>\n<p><strong>8. Is microservices a domain-partitioned architecture or a technically partitioned one?</strong></p>\n<p>🤓 …</p>\n<p><strong>9. Describe a topology where a microservices ecosystem might be only a single quantum.</strong></p>\n<p>🤓 …</p>\n<p><strong>10. How was domain reuse addressed in microservices? How was operational reuse addressed?</strong></p>\n<p>🤓 …</p>\n","site":{"data":{}},"more":"<h2 id=\"fundamentals-of-software-architecture\">Fundamentals of Software Architecture<a title=\"#fundamentals-of-software-architecture\" href=\"#fundamentals-of-software-architecture\"></a></h2>\n<h3 id=\"book-details\">Book Details<a title=\"#book-details\" href=\"#book-details\"></a></h3>\n<ul>\n<li><strong>Title</strong>: <a href=\"https://www.oreilly.com/library/view/fundamentals-of-software/9781492043447/\" target=\"_blank\">Fundamentals of Software Architecture</a></li>\n<li><strong>Author</strong>: Mark Richards, Neal Ford</li>\n<li><strong>Publication Year</strong>: 2020</li>\n</ul>\n<h3 id=\"summary\">Summary<a title=\"#summary\" href=\"#summary\"></a></h3>\n<p>This book is a great introduction to software architecture, it covers the basics of software architecture, Here I have the relevant points to me of the book Fundamentals of Software Architecture by Mark Richards and Neal Ford. This part is focused on the <strong>Distributed Architecture styles</strong>.</p>\n<img src=\"images/books/software-distributed-architectures.png\" alt=\"Distributed Architectures\" width=\"100%\"/>\n<hr>\n<h2 id=\"chapter-13:-service-based-architecture\">Chapter 13: Service-Based Architecture<a title=\"#chapter-13:-service-based-architecture\" href=\"#chapter-13:-service-based-architecture\"></a></h2>\n<img src=\"images/books/software-service-based-architecture-rating.png\" alt=\"Service Based Architecture Rating\" width=\"60%\"/>\n<p><strong>1. How many services are there in a typical service-based architecture?</strong></p>\n<p>🤓 The number of services within an application context generally range between 4 and 12 services, with the average being about 7 services.</p>\n<p><strong>2. Do you have to break apart a database in service-based architecture?</strong></p>\n<p>🤓 No, it’s not mandatory to break apart a database in service-based architecture. However, it’s often recommended to have a database per service to achieve data encapsulation and maintain bounded contexts. In these cases it is important to make sure the data in each separate database is not needed by another domain service</p>\n<p><strong>3. Under what circumstances might you want to break apart a database?</strong></p>\n<p>🤓 You might want to break apart a database when:</p>\n<ul>\n<li>Services require independent scaling.</li>\n<li>Different services have different data storage requirements.</li>\n<li>You want to ensure loose coupling and high cohesion.</li>\n<li>There are concerns about data integrity or security that can be mitigated by separating data.</li>\n</ul>\n<p><strong>4. What technique can you use to manage database changes within a service-based architecture?</strong></p>\n<p>🤓 One way to mitigate the impact and risk of database changes is to logically partition the database and manifest the logical partitioning through federated shared libraries.</p>\n<p><img src=\"images/books/software-architecture-database-logical-partitioning.png\" alt=\"Database Logical Partitioning\" loading=\"lazy\" class=\"φbp\"></p>\n<p><strong>5. Do domain services require a container (such as Docker) to run?</strong></p>\n<p>🤓 No, domain services don’t inherently require a container. However, using containers like Docker can provide benefits in terms of isolation, repeatability, and scalability.</p>\n<p><strong>6. Which architecture characteristics are well supported by the service-based architecture style?</strong></p>\n<p>🤓 The service-based architecture style supports well characteristics like :</p>\n<ul>\n<li>Deployability</li>\n<li>Modularity</li>\n<li>Fault Tolerance</li>\n<li>Overall Cost</li>\n<li>Reliability</li>\n<li>Testability</li>\n</ul>\n<p><strong>7. Why isn’t elasticity well supported in a service-based architecture?</strong></p>\n<p>🤓 Although programmatic scalability and elasticity are certainly possible with this architecture style, more functionality is replicated than with finer-grained services (such as microservices) and as such is not as efficient in terms of machine resources and not as cost-effective. Additionally, if services share resources like databases, it might be harder to scale them independently.</p>\n<p><strong>8. How can you increase the number of architecture quanta in a service-based architecture?</strong></p>\n<p>🤓 You can increase the number of architecture quanta by decomposing larger services into smaller, more granular ones, ensuring each service encapsulates a specific piece of functionality or domain.</p>\n<hr>\n<h2 id=\"chapter-14:-event-driven-architecture-style\">Chapter 14: Event-Driven Architecture Style<a title=\"#chapter-14:-event-driven-architecture-style\" href=\"#chapter-14:-event-driven-architecture-style\"></a></h2>\n<img src=\"images/books/software-event-driven-architecture-rating.png\" alt=\"Event Driven Architecture Rating\" width=\"60%\"/>\n<p><strong>1. What are the primary differences between the broker and mediator topologies?</strong></p>\n<img src=\"images/books/software-tradeoffs-broker-topology.png\" alt=\"Broker Topology Tradeoff\" width=\"60%\"/>\n<ul>\n<li>In the <strong>broker topology</strong>, event producers and consumers are directly connected through an event channel, such as a message queue or a topic. The event channel is responsible for routing and delivering events to the consumers, without any central coordination or orchestration. The producers and consumers are loosely coupled and unaware of each other. It uses events.</li>\n</ul>\n<img src=\"images/books/software-tradeoffs-mediator-topology.png\" alt=\"Mediator Topology\" width=\"60%\"/>\n<ul>\n<li>In the <strong>mediator topology</strong>, event producers and consumers are indirectly connected through a central mediator, such as an event processor or a stream processor. The mediator is responsible for orchestrating and coordinating the events and the consumers, according to some predefined logic or rules. The producers and consumers are still loosely coupled, but they depend on the mediator for event processing. It uses commands.</li>\n</ul>\n<p><strong>2. For better workflow control, would you use the mediator or broker topology?</strong></p>\n<p>🤓 I would use the mediator topology. The mediator topology allows me to define complex event processing logic, such as filtering, aggregating, transforming, or correlating events, and execute different actions based on the event data and context. The mediator topology also enables me to monitor and manage the event flow and handle errors or exceptions.</p>\n<p><strong>3. Does the broker topology usually leverage a publish-and-subscribe model with topics or a point-to-point model with queues?</strong></p>\n<p>🤓 The broker topology usually leverages a publish-and-subscribe model with topics. A topic is a logical channel that can have multiple subscribers who receive all the events published to that topic. A topic can also have multiple partitions to increase scalability and performance. A publish-and-subscribe model with topics allows me to broadcast events to multiple consumers without knowing who they are or how many there are.</p>\n<p><strong>4. Name two primary advantage of asynchronous communications.</strong></p>\n<p>🤓 Improved <strong>performance and responsiveness</strong>: Asynchronous communications allow the event producers to send events without waiting for a response from the event consumers, which reduces latency and improves throughput. Asynchronous communications also enable the event consumers to react to events as they occur, which increases responsiveness and user satisfaction.</p>\n<p><strong>5. Give an example of a typical request within the request-based model.</strong></p>\n<p>🤓 A user submits an online order form on a website. The website sends a synchronous HTTP request to an order service that validates the order details, calculates the total price, and returns a confirmation message to the website. The website displays the confirmation message to the user.</p>\n<p><strong>6. Give an example of a typical request in an event-based model.</strong></p>\n<p>🤓 A user submits an online order form on a website. The website publishes an OrderPlaced event to a message broker. An order service subscribes to the OrderPlaced event and receives a copy of it. The order service validates the order details, calculates the total price, and publishes an OrderConfirmed event to the message broker. A notification service subscribes to the OrderConfirmed event and receives a copy of it. The notification service sends an email confirmation to the user.</p>\n<p><strong>7. What is the difference between an initiating event and a processing event in event-driven architecture?</strong></p>\n<p>🤓 An <strong>initiating event</strong> is an event that triggers a new business process or workflow. It usually originates from an external source, such as a user action or a sensor input. For example, an OrderPlaced event is an initiating event that starts an order processing workflow.</p>\n<p>A <strong>processing event</strong> is an event that occurs as part of an existing business process or workflow. It usually originates from an internal source, such as another service or component. For example, an OrderConfirmed event is a processing event that continues an order processing workflow.</p>\n<p><strong>8. What are some of the techniques for preventing data loss when sending and receiving messages from a queue?</strong></p>\n<ul>\n<li><strong>Synchronouse send</strong>: Using durable queues that persist messages until they are consumed or expired.</li>\n<li><strong>Client Acknowledge mode</strong>: Using acknowledgements that confirm when a message is successfully received or processed by a consumer.</li>\n<li><strong>Last Participant Support</strong>: Using transactions that ensure atomicity and consistency of message operations.</li>\n<li>Using retries and dead-letter queues that handle failed or poisoned messages.</li>\n</ul>\n<p><strong>9 What are three main driving architecture characteristics for using event-driven architecture?</strong></p>\n<img src=\"images/books/software-tradeoffs-event-driven-architecture.png\" alt=\"Event Driven Architecture Tradeoffs\" width=\"60%\"/>\n<ul>\n<li><strong>Real-time processing</strong>: Event-driven architecture enables near real-time processing of events as they occur, which supports scenarios such as IoT, streaming analytics, fraud detection, etc.</li>\n<li><strong>Loose coupling</strong>: Event-driven architecture enables loose coupling between event producers and consumers, which supports scenarios such as microservices, cloud-native applications, integration platforms, etc.</li>\n<li><strong>High scalability</strong>: Event-driven architecture enables high scalability of event producers and consumers, which supports scenarios such as big data, social media, e-commerce, etc.</li>\n</ul>\n<p><strong>10. What are some of the architecture characteristics that are not well supported in event-driven architecture?</strong></p>\n<ul>\n<li>Simplicity</li>\n<li>Testability</li>\n<li>Overall cost</li>\n<li>Deployability</li>\n</ul>\n<p>Other characteristics to consider are:</p>\n<ul>\n<li><strong>Synchronous communication</strong>: Event-driven architecture relies on asynchronous communication between event producers and consumers, which does not support scenarios that require immediate feedback or confirmation from another service or component.</li>\n<li><strong>Complex transactions</strong>: Event-driven architecture does not support complex transactions that span multiple services or components, which require coordination, consistency, and rollback mechanisms.</li>\n<li><strong>Querying data</strong>: Event-driven architecture does not support querying data across multiple services or components, which require aggregation, joining, filtering, and sorting mechanisms.</li>\n</ul>\n<hr>\n<h2 id=\"chapter-15:-space-based-architecture\">Chapter 15: Space-Based Architecture<a title=\"#chapter-15:-space-based-architecture\" href=\"#chapter-15:-space-based-architecture\"></a></h2>\n<img src=\"images/books/software-space-based-architecture-rating.png\" alt=\"Layered Architecture Rating\" width=\"60%\"/>\n<p>Where does space-based architecture get its name from?</p>\n<p>What is a primary aspect of space-based architecture that differentiates it from other architecture styles?</p>\n<p>Name the four components that make up the virtualized middleware within a space-based architecture.</p>\n<p>What is the role of the messaging grid?</p>\n<p>What is the role of a data writer in space-based architecture?</p>\n<p>Under what conditions would a service need to access data through the data reader?</p>\n<p>Does a small cache size increase or decrease the chances for a data collision?</p>\n<p>What is the difference between a replicated cache and a distributed cache? Which one is typically used in space-based architecture?</p>\n<p>List three of the most strongly supported architecture characteristics in space-based architecture.</p>\n<p>Why does testability rate so low for space-based architecture?</p>\n<hr>\n<h2 id=\"chapter-16:-orchestration-driven-service-oriented-architecture\">Chapter 16: Orchestration-Driven Service-Oriented Architecture<a title=\"#chapter-16:-orchestration-driven-service-oriented-architecture\" href=\"#chapter-16:-orchestration-driven-service-oriented-architecture\"></a></h2>\n<img src=\"images/books/software-orchestration-driven-service-oriented-architecture-rating.png\" alt=\"Layered Architecture Rating\" width=\"60%\"/>\n<p><strong>What was the main driving force behind service-oriented architecture?</strong></p>\n<ul>\n<li>The main driving force behind service-oriented architecture was the need to integrate disparate systems and applications and reuse existing functionality, given the costs and complexities of building and maintaining monolithic applications.</li>\n</ul>\n<p><strong>What are the four primary service types within a service-oriented architecture?</strong></p>\n<ul>\n<li><strong>Business Services</strong>: It provides the entry point into the service-oriented architecture and is responsible for exposing the business functionality to the outside world.</li>\n<li><strong>Entprise Services</strong>: It provides the core business functionality and is responsible for implementing the business logic.</li>\n<li><strong>Application Services</strong>: It provides the application-specific functionality and is responsible for implementing the application logic.</li>\n<li><strong>Infrastructure Services</strong>: It provides the infrastructure-specific functionality and is responsible for implementing the infrastructure logic, monitoring, logging or authentication.</li>\n</ul>\n<p><strong>List some of the factors that led to the downfall of service-oriented architecture.</strong></p>\n<ul>\n<li><strong>Complexity</strong>: Service-oriented architecture is inherently complex, which makes it difficult to design, develop, and maintain.</li>\n<li><strong>Performance</strong>: Service-oriented architecture is inherently slow, which makes it difficult to achieve high performance.</li>\n<li><strong>Scalability</strong>: Service-oriented architecture is inherently inefficient, which makes it difficult to scale.</li>\n<li><strong>Coupling</strong>: Service-oriented architecture is inherently tightly coupled, which makes it difficult to achieve loose coupling.</li>\n</ul>\n<p><strong>Is service-oriented architecture technically partitioned or domain partitioned?</strong></p>\n<ul>\n<li>Service-oriented architecture is technically partitioned because it is based on the technical capabilities of the underlying infrastructure, such as messaging, transactions, or security.</li>\n</ul>\n<p><strong>How is domain reuse addressed in SOA? How is operational reuse addressed?</strong></p>\n<ul>\n<li>Domain reuse is addressed in SOA by implementing the business logic as enterprise services that can be reused across multiple applications.</li>\n</ul>\n<hr>\n<h2 id=\"chapter-17:-microservices-architecture\">Chapter 17: Microservices Architecture<a title=\"#chapter-17:-microservices-architecture\" href=\"#chapter-17:-microservices-architecture\"></a></h2>\n<img src=\"images/books/software-microservices-architecture-rating.png\" alt=\"Layered Architecture Rating\" width=\"60%\"/>\n<p><strong>1. Why is the bounded context concept so critical for microservices architecture?</strong></p>\n<p>🤓 …</p>\n<p><strong>2. What are three ways of determining if you have the right level of granularity in a microservice?</strong></p>\n<p>🤓 …</p>\n<p><strong>3. What functionality might be contained within a sidecar?</strong></p>\n<p>🤓 …</p>\n<p><strong>4. What is the difference between orchestration and choreography? Which does microservices support? Is one communication style easier in microservices?</strong></p>\n<p>🤓 …</p>\n<p><strong>5. What is a saga in microservices?</strong></p>\n<p>🤓 …</p>\n<p><strong>6. Why are agility, testability, and deployability so well supported in microservices?</strong></p>\n<p>🤓 …</p>\n<p><strong>7. What are two reasons performance is usually an issue in microservices?</strong></p>\n<p>🤓 …</p>\n<p><strong>8. Is microservices a domain-partitioned architecture or a technically partitioned one?</strong></p>\n<p>🤓 …</p>\n<p><strong>9. Describe a topology where a microservices ecosystem might be only a single quantum.</strong></p>\n<p>🤓 …</p>\n<p><strong>10. How was domain reuse addressed in microservices? How was operational reuse addressed?</strong></p>\n<p>🤓 …</p>\n","date_formatted":{"ll":"Aug 7, 2023","L":"08/07/2023","MM-DD":"08-07"},"plink":"http://codesandtags.io/blog/2023/08/07/en/fundamentals-of-software-architecture-part-4/","type":"post","toc":[{"id":"fundamentals-of-software-architecture","title":"Fundamentals of Software Architecture","index":"1","children":[{"id":"book-details","title":"Book Details","index":"1.1"},{"id":"summary","title":"Summary","index":"1.2"}]},{"id":"chapter-13:-service-based-architecture","title":"Chapter 13: Service-Based Architecture","index":"2"},{"id":"chapter-14:-event-driven-architecture-style","title":"Chapter 14: Event-Driven Architecture Style","index":"3"},{"id":"chapter-15:-space-based-architecture","title":"Chapter 15: Space-Based Architecture","index":"4"},{"id":"chapter-16:-orchestration-driven-service-oriented-architecture","title":"Chapter 16: Orchestration-Driven Service-Oriented Architecture","index":"5"},{"id":"chapter-17:-microservices-architecture","title":"Chapter 17: Microservices Architecture","index":"6"}],"reading_time":"1982 words in 13 min"},{"title":"How to succeed behavioral questions?","date":"2023-03-27T02:53:52.000Z","excerpt":"Practicing behavioral questions is essential for interview preparation because they allow the interviewer to assess your interpersonal and problem-solving skills, work ethic, and cultural fit with the company.","author":"codesandtags","thumbnail":"images/faang-thumbnail.jpg","_content":"\nPracticing behavioral questions is essential for interview preparation because they allow the interviewer to assess your interpersonal and problem-solving skills, work ethic, and cultural fit with the company. Here are some tips and strategies for preparing for behavioral questions:\n\n## Understand the purpose\n\nBehavioral questions are designed to evaluate your soft skills, such as teamwork, communication, leadership, adaptability, and conflict resolution. Recognize that interviewers are looking for specific examples from your past experiences to gauge your potential for success in the role.\n\n## Use the STAR method\n\nThe STAR method is a widely used technique for answering behavioral interview questions. It helps structure your response by focusing on a specific example from your past experiences and demonstrating your skills and abilities in a clear, concise manner. The acronym STAR stands for:\n\n**Situation**: Begin by describing the context or background of the situation you faced. Provide enough detail to help the interviewer understand the circumstances, but be concise. This sets the stage for the rest of your answer and helps the interviewer visualize the scenario.\n\n**Example: **\n\n> \"In my previous role as a software developer, I was working on a project with a tight deadline, and one of my team members fell ill, leaving us short-staffed.\"\n\n**Task**: Explain the specific task or goal you needed to accomplish in that situation. This part highlights your responsibility and the challenge you faced.\n\n**Example: **\n\n> \"As the team lead, my task was to ensure we met the deadline without compromising the quality of the project, while also managing the increased workload due to my colleague's absence.\"\n\n**Action**: Describe the specific actions you took to address the task or challenge. Focus on your role and the steps you took, showcasing your skills, abilities, and decision-making process.\n\n**Example: **\n\n> \"I assessed the remaining tasks and prioritized them based on importance and time sensitivity. I then redistributed the workload among the team members, making sure to assign tasks based on individual strengths and availability. I also communicated the situation to our manager and requested additional resources. To keep the team motivated, I held daily check-ins to monitor progress and address any concerns.\"\n\n**Result**: Explain the outcome of your actions, emphasizing the positive impact you had on the situation. Quantify your results whenever possible to demonstrate the tangible benefits of your actions.\n\n**Example:**\n\n> \"As a result, we were able to complete the project on time and within budget, despite being short-staffed. Our manager praised the team for our effective communication and adaptability, and our client was satisfied with the quality of the final product.\"\n\nBy following the STAR method when answering behavioral questions, you can ensure that your response is well-structured, focused, and clearly demonstrates your skills and abilities. This technique helps you showcase your problem-solving and decision-making skills, making it easier for the interviewer to assess your fit for the role.\n\n## Research common behavioral questions\n\nFamiliarize yourself with common behavioral questions, such as:\n\n- Tell me about a time when you faced a difficult problem. How did you handle it?\n- Describe a situation where you had to collaborate with a difficult colleague.\n- Can you provide an example of when you had to lead a team or project? What challenges did - you face, and how did you overcome them?\n- How do you handle stressful situations or tight deadlines?\n- Prepare specific examples: Reflect on your past experiences (professional, academic, or personal) and identify situations that demonstrate your soft skills. Prepare detailed examples for each situation that follow the STAR method.\n\n## Practice your delivery\n\nRehearse your answers out loud to ensure your responses are clear, concise, and well-structured. Consider practicing with a friend, family member, or mentor who can provide feedback and ask follow-up questions.\n\n## Tailor your answers to the company and role\n\nResearch the company's values, culture, and expectations for the role you're interviewing for, and tailor your answers to align with their priorities. This demonstrates your understanding of the company and showcases your fit within the organization.\n\n## Be honest and authentic\n\nWhile it's essential to present yourself in the best light, avoid exaggerating or fabricating your experiences. Interviewers can often tell when a candidate is not being genuine, which could harm your credibility.\n\n## Show self-awareness and growth\n\nWhen discussing challenging situations or mistakes, emphasize what you learned from the experience and how you've grown as a result. This shows your ability to learn from your mistakes and adapt in the future.\n\nBy practicing behavioral questions using these strategies, you'll be better prepared to demonstrate your soft skills and showcase your fit within the company during the interview process.\n\n![space](images/behavioral-questions.jpg)\n","source":"_posts/en/how-to-succeed-behavioral-questions.md","raw":"---\ntitle: How to succeed behavioral questions?\ndate: 2023-03-26 22:53:52\ntags: [interview]\nexcerpt: Practicing behavioral questions is essential for interview preparation because they allow the interviewer to assess your interpersonal and problem-solving skills, work ethic, and cultural fit with the company.\nauthor: codesandtags\ncategory: FAANG\nthumbnail: images/faang-thumbnail.jpg\n---\n\nPracticing behavioral questions is essential for interview preparation because they allow the interviewer to assess your interpersonal and problem-solving skills, work ethic, and cultural fit with the company. Here are some tips and strategies for preparing for behavioral questions:\n\n## Understand the purpose\n\nBehavioral questions are designed to evaluate your soft skills, such as teamwork, communication, leadership, adaptability, and conflict resolution. Recognize that interviewers are looking for specific examples from your past experiences to gauge your potential for success in the role.\n\n## Use the STAR method\n\nThe STAR method is a widely used technique for answering behavioral interview questions. It helps structure your response by focusing on a specific example from your past experiences and demonstrating your skills and abilities in a clear, concise manner. The acronym STAR stands for:\n\n**Situation**: Begin by describing the context or background of the situation you faced. Provide enough detail to help the interviewer understand the circumstances, but be concise. This sets the stage for the rest of your answer and helps the interviewer visualize the scenario.\n\n**Example: **\n\n> \"In my previous role as a software developer, I was working on a project with a tight deadline, and one of my team members fell ill, leaving us short-staffed.\"\n\n**Task**: Explain the specific task or goal you needed to accomplish in that situation. This part highlights your responsibility and the challenge you faced.\n\n**Example: **\n\n> \"As the team lead, my task was to ensure we met the deadline without compromising the quality of the project, while also managing the increased workload due to my colleague's absence.\"\n\n**Action**: Describe the specific actions you took to address the task or challenge. Focus on your role and the steps you took, showcasing your skills, abilities, and decision-making process.\n\n**Example: **\n\n> \"I assessed the remaining tasks and prioritized them based on importance and time sensitivity. I then redistributed the workload among the team members, making sure to assign tasks based on individual strengths and availability. I also communicated the situation to our manager and requested additional resources. To keep the team motivated, I held daily check-ins to monitor progress and address any concerns.\"\n\n**Result**: Explain the outcome of your actions, emphasizing the positive impact you had on the situation. Quantify your results whenever possible to demonstrate the tangible benefits of your actions.\n\n**Example:**\n\n> \"As a result, we were able to complete the project on time and within budget, despite being short-staffed. Our manager praised the team for our effective communication and adaptability, and our client was satisfied with the quality of the final product.\"\n\nBy following the STAR method when answering behavioral questions, you can ensure that your response is well-structured, focused, and clearly demonstrates your skills and abilities. This technique helps you showcase your problem-solving and decision-making skills, making it easier for the interviewer to assess your fit for the role.\n\n## Research common behavioral questions\n\nFamiliarize yourself with common behavioral questions, such as:\n\n- Tell me about a time when you faced a difficult problem. How did you handle it?\n- Describe a situation where you had to collaborate with a difficult colleague.\n- Can you provide an example of when you had to lead a team or project? What challenges did - you face, and how did you overcome them?\n- How do you handle stressful situations or tight deadlines?\n- Prepare specific examples: Reflect on your past experiences (professional, academic, or personal) and identify situations that demonstrate your soft skills. Prepare detailed examples for each situation that follow the STAR method.\n\n## Practice your delivery\n\nRehearse your answers out loud to ensure your responses are clear, concise, and well-structured. Consider practicing with a friend, family member, or mentor who can provide feedback and ask follow-up questions.\n\n## Tailor your answers to the company and role\n\nResearch the company's values, culture, and expectations for the role you're interviewing for, and tailor your answers to align with their priorities. This demonstrates your understanding of the company and showcases your fit within the organization.\n\n## Be honest and authentic\n\nWhile it's essential to present yourself in the best light, avoid exaggerating or fabricating your experiences. Interviewers can often tell when a candidate is not being genuine, which could harm your credibility.\n\n## Show self-awareness and growth\n\nWhen discussing challenging situations or mistakes, emphasize what you learned from the experience and how you've grown as a result. This shows your ability to learn from your mistakes and adapt in the future.\n\nBy practicing behavioral questions using these strategies, you'll be better prepared to demonstrate your soft skills and showcase your fit within the company during the interview process.\n\n![space](images/behavioral-questions.jpg)\n","slug":"en/how-to-succeed-behavioral-questions","published":1,"updated":"2023-07-17T22:47:10.536Z","comments":0,"layout":"post","photos":[],"link":"2023/03/26/en/how-to-succeed-behavioral-questions","_id":"clnwi7gaw000aqbt2c2qo4q2r","content":"<p>Practicing behavioral questions is essential for interview preparation because they allow the interviewer to assess your interpersonal and problem-solving skills, work ethic, and cultural fit with the company. Here are some tips and strategies for preparing for behavioral questions:</p>\n<h2 id=\"understand-the-purpose\">Understand the purpose<a title=\"#understand-the-purpose\" href=\"#understand-the-purpose\"></a></h2>\n<p>Behavioral questions are designed to evaluate your soft skills, such as teamwork, communication, leadership, adaptability, and conflict resolution. Recognize that interviewers are looking for specific examples from your past experiences to gauge your potential for success in the role.</p>\n<h2 id=\"use-the-star-method\">Use the STAR method<a title=\"#use-the-star-method\" href=\"#use-the-star-method\"></a></h2>\n<p>The STAR method is a widely used technique for answering behavioral interview questions. It helps structure your response by focusing on a specific example from your past experiences and demonstrating your skills and abilities in a clear, concise manner. The acronym STAR stands for:</p>\n<p><strong>Situation</strong>: Begin by describing the context or background of the situation you faced. Provide enough detail to help the interviewer understand the circumstances, but be concise. This sets the stage for the rest of your answer and helps the interviewer visualize the scenario.</p>\n<p>**Example: **</p>\n<blockquote>\n<p>“In my previous role as a software developer, I was working on a project with a tight deadline, and one of my team members fell ill, leaving us short-staffed.”</p>\n</blockquote>\n<p><strong>Task</strong>: Explain the specific task or goal you needed to accomplish in that situation. This part highlights your responsibility and the challenge you faced.</p>\n<p>**Example: **</p>\n<blockquote>\n<p>“As the team lead, my task was to ensure we met the deadline without compromising the quality of the project, while also managing the increased workload due to my colleague’s absence.”</p>\n</blockquote>\n<p><strong>Action</strong>: Describe the specific actions you took to address the task or challenge. Focus on your role and the steps you took, showcasing your skills, abilities, and decision-making process.</p>\n<p>**Example: **</p>\n<blockquote>\n<p>“I assessed the remaining tasks and prioritized them based on importance and time sensitivity. I then redistributed the workload among the team members, making sure to assign tasks based on individual strengths and availability. I also communicated the situation to our manager and requested additional resources. To keep the team motivated, I held daily check-ins to monitor progress and address any concerns.”</p>\n</blockquote>\n<p><strong>Result</strong>: Explain the outcome of your actions, emphasizing the positive impact you had on the situation. Quantify your results whenever possible to demonstrate the tangible benefits of your actions.</p>\n<p><strong>Example:</strong></p>\n<blockquote>\n<p>“As a result, we were able to complete the project on time and within budget, despite being short-staffed. Our manager praised the team for our effective communication and adaptability, and our client was satisfied with the quality of the final product.”</p>\n</blockquote>\n<p>By following the STAR method when answering behavioral questions, you can ensure that your response is well-structured, focused, and clearly demonstrates your skills and abilities. This technique helps you showcase your problem-solving and decision-making skills, making it easier for the interviewer to assess your fit for the role.</p>\n<h2 id=\"research-common-behavioral-questions\">Research common behavioral questions<a title=\"#research-common-behavioral-questions\" href=\"#research-common-behavioral-questions\"></a></h2>\n<p>Familiarize yourself with common behavioral questions, such as:</p>\n<ul>\n<li>Tell me about a time when you faced a difficult problem. How did you handle it?</li>\n<li>Describe a situation where you had to collaborate with a difficult colleague.</li>\n<li>Can you provide an example of when you had to lead a team or project? What challenges did - you face, and how did you overcome them?</li>\n<li>How do you handle stressful situations or tight deadlines?</li>\n<li>Prepare specific examples: Reflect on your past experiences (professional, academic, or personal) and identify situations that demonstrate your soft skills. Prepare detailed examples for each situation that follow the STAR method.</li>\n</ul>\n<h2 id=\"practice-your-delivery\">Practice your delivery<a title=\"#practice-your-delivery\" href=\"#practice-your-delivery\"></a></h2>\n<p>Rehearse your answers out loud to ensure your responses are clear, concise, and well-structured. Consider practicing with a friend, family member, or mentor who can provide feedback and ask follow-up questions.</p>\n<h2 id=\"tailor-your-answers-to-the-company-and-role\">Tailor your answers to the company and role<a title=\"#tailor-your-answers-to-the-company-and-role\" href=\"#tailor-your-answers-to-the-company-and-role\"></a></h2>\n<p>Research the company’s values, culture, and expectations for the role you’re interviewing for, and tailor your answers to align with their priorities. This demonstrates your understanding of the company and showcases your fit within the organization.</p>\n<h2 id=\"be-honest-and-authentic\">Be honest and authentic<a title=\"#be-honest-and-authentic\" href=\"#be-honest-and-authentic\"></a></h2>\n<p>While it’s essential to present yourself in the best light, avoid exaggerating or fabricating your experiences. Interviewers can often tell when a candidate is not being genuine, which could harm your credibility.</p>\n<h2 id=\"show-self-awareness-and-growth\">Show self-awareness and growth<a title=\"#show-self-awareness-and-growth\" href=\"#show-self-awareness-and-growth\"></a></h2>\n<p>When discussing challenging situations or mistakes, emphasize what you learned from the experience and how you’ve grown as a result. This shows your ability to learn from your mistakes and adapt in the future.</p>\n<p>By practicing behavioral questions using these strategies, you’ll be better prepared to demonstrate your soft skills and showcase your fit within the company during the interview process.</p>\n<p><img src=\"images/behavioral-questions.jpg\" alt=\"space\" loading=\"lazy\" class=\"φbp\"></p>\n","site":{"data":{}},"more":"<p>Practicing behavioral questions is essential for interview preparation because they allow the interviewer to assess your interpersonal and problem-solving skills, work ethic, and cultural fit with the company. Here are some tips and strategies for preparing for behavioral questions:</p>\n<h2 id=\"understand-the-purpose\">Understand the purpose<a title=\"#understand-the-purpose\" href=\"#understand-the-purpose\"></a></h2>\n<p>Behavioral questions are designed to evaluate your soft skills, such as teamwork, communication, leadership, adaptability, and conflict resolution. Recognize that interviewers are looking for specific examples from your past experiences to gauge your potential for success in the role.</p>\n<h2 id=\"use-the-star-method\">Use the STAR method<a title=\"#use-the-star-method\" href=\"#use-the-star-method\"></a></h2>\n<p>The STAR method is a widely used technique for answering behavioral interview questions. It helps structure your response by focusing on a specific example from your past experiences and demonstrating your skills and abilities in a clear, concise manner. The acronym STAR stands for:</p>\n<p><strong>Situation</strong>: Begin by describing the context or background of the situation you faced. Provide enough detail to help the interviewer understand the circumstances, but be concise. This sets the stage for the rest of your answer and helps the interviewer visualize the scenario.</p>\n<p>**Example: **</p>\n<blockquote>\n<p>“In my previous role as a software developer, I was working on a project with a tight deadline, and one of my team members fell ill, leaving us short-staffed.”</p>\n</blockquote>\n<p><strong>Task</strong>: Explain the specific task or goal you needed to accomplish in that situation. This part highlights your responsibility and the challenge you faced.</p>\n<p>**Example: **</p>\n<blockquote>\n<p>“As the team lead, my task was to ensure we met the deadline without compromising the quality of the project, while also managing the increased workload due to my colleague’s absence.”</p>\n</blockquote>\n<p><strong>Action</strong>: Describe the specific actions you took to address the task or challenge. Focus on your role and the steps you took, showcasing your skills, abilities, and decision-making process.</p>\n<p>**Example: **</p>\n<blockquote>\n<p>“I assessed the remaining tasks and prioritized them based on importance and time sensitivity. I then redistributed the workload among the team members, making sure to assign tasks based on individual strengths and availability. I also communicated the situation to our manager and requested additional resources. To keep the team motivated, I held daily check-ins to monitor progress and address any concerns.”</p>\n</blockquote>\n<p><strong>Result</strong>: Explain the outcome of your actions, emphasizing the positive impact you had on the situation. Quantify your results whenever possible to demonstrate the tangible benefits of your actions.</p>\n<p><strong>Example:</strong></p>\n<blockquote>\n<p>“As a result, we were able to complete the project on time and within budget, despite being short-staffed. Our manager praised the team for our effective communication and adaptability, and our client was satisfied with the quality of the final product.”</p>\n</blockquote>\n<p>By following the STAR method when answering behavioral questions, you can ensure that your response is well-structured, focused, and clearly demonstrates your skills and abilities. This technique helps you showcase your problem-solving and decision-making skills, making it easier for the interviewer to assess your fit for the role.</p>\n<h2 id=\"research-common-behavioral-questions\">Research common behavioral questions<a title=\"#research-common-behavioral-questions\" href=\"#research-common-behavioral-questions\"></a></h2>\n<p>Familiarize yourself with common behavioral questions, such as:</p>\n<ul>\n<li>Tell me about a time when you faced a difficult problem. How did you handle it?</li>\n<li>Describe a situation where you had to collaborate with a difficult colleague.</li>\n<li>Can you provide an example of when you had to lead a team or project? What challenges did - you face, and how did you overcome them?</li>\n<li>How do you handle stressful situations or tight deadlines?</li>\n<li>Prepare specific examples: Reflect on your past experiences (professional, academic, or personal) and identify situations that demonstrate your soft skills. Prepare detailed examples for each situation that follow the STAR method.</li>\n</ul>\n<h2 id=\"practice-your-delivery\">Practice your delivery<a title=\"#practice-your-delivery\" href=\"#practice-your-delivery\"></a></h2>\n<p>Rehearse your answers out loud to ensure your responses are clear, concise, and well-structured. Consider practicing with a friend, family member, or mentor who can provide feedback and ask follow-up questions.</p>\n<h2 id=\"tailor-your-answers-to-the-company-and-role\">Tailor your answers to the company and role<a title=\"#tailor-your-answers-to-the-company-and-role\" href=\"#tailor-your-answers-to-the-company-and-role\"></a></h2>\n<p>Research the company’s values, culture, and expectations for the role you’re interviewing for, and tailor your answers to align with their priorities. This demonstrates your understanding of the company and showcases your fit within the organization.</p>\n<h2 id=\"be-honest-and-authentic\">Be honest and authentic<a title=\"#be-honest-and-authentic\" href=\"#be-honest-and-authentic\"></a></h2>\n<p>While it’s essential to present yourself in the best light, avoid exaggerating or fabricating your experiences. Interviewers can often tell when a candidate is not being genuine, which could harm your credibility.</p>\n<h2 id=\"show-self-awareness-and-growth\">Show self-awareness and growth<a title=\"#show-self-awareness-and-growth\" href=\"#show-self-awareness-and-growth\"></a></h2>\n<p>When discussing challenging situations or mistakes, emphasize what you learned from the experience and how you’ve grown as a result. This shows your ability to learn from your mistakes and adapt in the future.</p>\n<p>By practicing behavioral questions using these strategies, you’ll be better prepared to demonstrate your soft skills and showcase your fit within the company during the interview process.</p>\n<p><img src=\"images/behavioral-questions.jpg\" alt=\"space\" loading=\"lazy\" class=\"φbp\"></p>\n","date_formatted":{"ll":"Mar 26, 2023","L":"03/26/2023","MM-DD":"03-26"},"plink":"http://codesandtags.io/blog/2023/03/26/en/how-to-succeed-behavioral-questions/","type":"post","toc":[{"id":"understand-the-purpose","title":"Understand the purpose","index":"1"},{"id":"use-the-star-method","title":"Use the STAR method","index":"2"},{"id":"research-common-behavioral-questions","title":"Research common behavioral questions","index":"3"},{"id":"practice-your-delivery","title":"Practice your delivery","index":"4"},{"id":"tailor-your-answers-to-the-company-and-role","title":"Tailor your answers to the company and role","index":"5"},{"id":"be-honest-and-authentic","title":"Be honest and authentic","index":"6"},{"id":"show-self-awareness-and-growth","title":"Show self-awareness and growth","index":"7"}],"reading_time":"776 words in 5 min"},{"title":"How can Mock Interviews help you?","date":"2023-03-28T21:50:23.000Z","excerpt":"Mock interviews are practice interviews conducted to help you prepare for the actual job interview. They are an essential part of your interview preparation as they can help you refine your answers, improve your communication skills, and increase your confidence.","author":"codesandtags","thumbnail":"images/faang-thumbnail.jpg","_content":"\nMock interviews are practice interviews conducted to help you prepare for the actual job interview. They are an essential part of your interview preparation as they can help you refine your answers, improve your communication skills, and increase your confidence. Here are some details about mock interviews:\n\n## Purpose\n\nMock interviews simulate the real interview experience, allowing you to practice answering questions, receive feedback on your performance, and identify areas for improvement. They can help you become more comfortable with the interview process and reduce anxiety on the day of the actual interview.\n\n## Format\n\nMock interviews can be conducted in various formats, including in-person, over the phone, or via video conferencing. They may be one-on-one, panel-style, or group interviews, depending on the format of the actual job interview.\n\n## Preparation\n\nBefore the mock interview, research the company and the role, review your resume, and prepare answers to common interview questions. Treat the mock interview as if it were the real thing, dressing professionally and arriving on time.\n\n## Conducting mock interviews\n\nFind a partner (friend, family member, mentor, or career coach) to conduct the mock interview. Provide them with a list of potential questions to ask, including both technical and behavioral questions. If possible, choose someone who is familiar with the industry or has experience conducting interviews.\n\n## Receiving feedback\n\nAfter the mock interview, ask your partner for feedback on your performance. Encourage them to critique your answers, body language, communication skills, and overall demeanor. Take note of their suggestions and use them to improve your performance in future interviews.\n\n## Practice multiple mock interviews\n\nConducting several mock interviews with different partners can help you gain diverse perspectives and refine your answers. This will also help you become more comfortable with the interview process and adapt to different interview styles.\n\n## Online platforms for mock interviews\n\nThere are several online platforms, such as Pramp and Interviewing.io, that offer mock interviews with industry professionals. These platforms can provide valuable insights and feedback from people who have experience in the field.\n\n## Record your mock interviews\n\nRecording your mock interviews can be helpful in identifying areas for improvement. Review the recording to assess your body language, tone of voice, and overall presentation. This can help you become more self-aware and make necessary adjustments before the actual interview.\n\nBy participating in mock interviews, you can improve your interview skills, identify your strengths and weaknesses, and become more confident in your ability to perform well during the actual job interview.\n","source":"_posts/en/how-can-mock-interviews-help-you.md","raw":"---\ntitle: How can Mock Interviews help you?\ndate: 2023-03-28 17:50:23\ntags: [interview]\nexcerpt: Mock interviews are practice interviews conducted to help you prepare for the actual job interview. They are an essential part of your interview preparation as they can help you refine your answers, improve your communication skills, and increase your confidence.\nauthor: codesandtags\ncategory: FAANG\nthumbnail: images/faang-thumbnail.jpg\n---\n\nMock interviews are practice interviews conducted to help you prepare for the actual job interview. They are an essential part of your interview preparation as they can help you refine your answers, improve your communication skills, and increase your confidence. Here are some details about mock interviews:\n\n## Purpose\n\nMock interviews simulate the real interview experience, allowing you to practice answering questions, receive feedback on your performance, and identify areas for improvement. They can help you become more comfortable with the interview process and reduce anxiety on the day of the actual interview.\n\n## Format\n\nMock interviews can be conducted in various formats, including in-person, over the phone, or via video conferencing. They may be one-on-one, panel-style, or group interviews, depending on the format of the actual job interview.\n\n## Preparation\n\nBefore the mock interview, research the company and the role, review your resume, and prepare answers to common interview questions. Treat the mock interview as if it were the real thing, dressing professionally and arriving on time.\n\n## Conducting mock interviews\n\nFind a partner (friend, family member, mentor, or career coach) to conduct the mock interview. Provide them with a list of potential questions to ask, including both technical and behavioral questions. If possible, choose someone who is familiar with the industry or has experience conducting interviews.\n\n## Receiving feedback\n\nAfter the mock interview, ask your partner for feedback on your performance. Encourage them to critique your answers, body language, communication skills, and overall demeanor. Take note of their suggestions and use them to improve your performance in future interviews.\n\n## Practice multiple mock interviews\n\nConducting several mock interviews with different partners can help you gain diverse perspectives and refine your answers. This will also help you become more comfortable with the interview process and adapt to different interview styles.\n\n## Online platforms for mock interviews\n\nThere are several online platforms, such as Pramp and Interviewing.io, that offer mock interviews with industry professionals. These platforms can provide valuable insights and feedback from people who have experience in the field.\n\n## Record your mock interviews\n\nRecording your mock interviews can be helpful in identifying areas for improvement. Review the recording to assess your body language, tone of voice, and overall presentation. This can help you become more self-aware and make necessary adjustments before the actual interview.\n\nBy participating in mock interviews, you can improve your interview skills, identify your strengths and weaknesses, and become more confident in your ability to perform well during the actual job interview.\n","slug":"en/how-can-mock-interviews-help-you","published":1,"updated":"2023-07-17T22:47:10.536Z","comments":0,"layout":"post","photos":[],"link":"2023/03/28/en/how-can-mock-interviews-help-you","_id":"clnwi7gax000bqbt29naw4thl","content":"<p>Mock interviews are practice interviews conducted to help you prepare for the actual job interview. They are an essential part of your interview preparation as they can help you refine your answers, improve your communication skills, and increase your confidence. Here are some details about mock interviews:</p>\n<h2 id=\"purpose\">Purpose<a title=\"#purpose\" href=\"#purpose\"></a></h2>\n<p>Mock interviews simulate the real interview experience, allowing you to practice answering questions, receive feedback on your performance, and identify areas for improvement. They can help you become more comfortable with the interview process and reduce anxiety on the day of the actual interview.</p>\n<h2 id=\"format\">Format<a title=\"#format\" href=\"#format\"></a></h2>\n<p>Mock interviews can be conducted in various formats, including in-person, over the phone, or via video conferencing. They may be one-on-one, panel-style, or group interviews, depending on the format of the actual job interview.</p>\n<h2 id=\"preparation\">Preparation<a title=\"#preparation\" href=\"#preparation\"></a></h2>\n<p>Before the mock interview, research the company and the role, review your resume, and prepare answers to common interview questions. Treat the mock interview as if it were the real thing, dressing professionally and arriving on time.</p>\n<h2 id=\"conducting-mock-interviews\">Conducting mock interviews<a title=\"#conducting-mock-interviews\" href=\"#conducting-mock-interviews\"></a></h2>\n<p>Find a partner (friend, family member, mentor, or career coach) to conduct the mock interview. Provide them with a list of potential questions to ask, including both technical and behavioral questions. If possible, choose someone who is familiar with the industry or has experience conducting interviews.</p>\n<h2 id=\"receiving-feedback\">Receiving feedback<a title=\"#receiving-feedback\" href=\"#receiving-feedback\"></a></h2>\n<p>After the mock interview, ask your partner for feedback on your performance. Encourage them to critique your answers, body language, communication skills, and overall demeanor. Take note of their suggestions and use them to improve your performance in future interviews.</p>\n<h2 id=\"practice-multiple-mock-interviews\">Practice multiple mock interviews<a title=\"#practice-multiple-mock-interviews\" href=\"#practice-multiple-mock-interviews\"></a></h2>\n<p>Conducting several mock interviews with different partners can help you gain diverse perspectives and refine your answers. This will also help you become more comfortable with the interview process and adapt to different interview styles.</p>\n<h2 id=\"online-platforms-for-mock-interviews\">Online platforms for mock interviews<a title=\"#online-platforms-for-mock-interviews\" href=\"#online-platforms-for-mock-interviews\"></a></h2>\n<p>There are several online platforms, such as Pramp and <a href=\"http://Interviewing.io\">Interviewing.io</a>, that offer mock interviews with industry professionals. These platforms can provide valuable insights and feedback from people who have experience in the field.</p>\n<h2 id=\"record-your-mock-interviews\">Record your mock interviews<a title=\"#record-your-mock-interviews\" href=\"#record-your-mock-interviews\"></a></h2>\n<p>Recording your mock interviews can be helpful in identifying areas for improvement. Review the recording to assess your body language, tone of voice, and overall presentation. This can help you become more self-aware and make necessary adjustments before the actual interview.</p>\n<p>By participating in mock interviews, you can improve your interview skills, identify your strengths and weaknesses, and become more confident in your ability to perform well during the actual job interview.</p>\n","site":{"data":{}},"more":"<p>Mock interviews are practice interviews conducted to help you prepare for the actual job interview. They are an essential part of your interview preparation as they can help you refine your answers, improve your communication skills, and increase your confidence. Here are some details about mock interviews:</p>\n<h2 id=\"purpose\">Purpose<a title=\"#purpose\" href=\"#purpose\"></a></h2>\n<p>Mock interviews simulate the real interview experience, allowing you to practice answering questions, receive feedback on your performance, and identify areas for improvement. They can help you become more comfortable with the interview process and reduce anxiety on the day of the actual interview.</p>\n<h2 id=\"format\">Format<a title=\"#format\" href=\"#format\"></a></h2>\n<p>Mock interviews can be conducted in various formats, including in-person, over the phone, or via video conferencing. They may be one-on-one, panel-style, or group interviews, depending on the format of the actual job interview.</p>\n<h2 id=\"preparation\">Preparation<a title=\"#preparation\" href=\"#preparation\"></a></h2>\n<p>Before the mock interview, research the company and the role, review your resume, and prepare answers to common interview questions. Treat the mock interview as if it were the real thing, dressing professionally and arriving on time.</p>\n<h2 id=\"conducting-mock-interviews\">Conducting mock interviews<a title=\"#conducting-mock-interviews\" href=\"#conducting-mock-interviews\"></a></h2>\n<p>Find a partner (friend, family member, mentor, or career coach) to conduct the mock interview. Provide them with a list of potential questions to ask, including both technical and behavioral questions. If possible, choose someone who is familiar with the industry or has experience conducting interviews.</p>\n<h2 id=\"receiving-feedback\">Receiving feedback<a title=\"#receiving-feedback\" href=\"#receiving-feedback\"></a></h2>\n<p>After the mock interview, ask your partner for feedback on your performance. Encourage them to critique your answers, body language, communication skills, and overall demeanor. Take note of their suggestions and use them to improve your performance in future interviews.</p>\n<h2 id=\"practice-multiple-mock-interviews\">Practice multiple mock interviews<a title=\"#practice-multiple-mock-interviews\" href=\"#practice-multiple-mock-interviews\"></a></h2>\n<p>Conducting several mock interviews with different partners can help you gain diverse perspectives and refine your answers. This will also help you become more comfortable with the interview process and adapt to different interview styles.</p>\n<h2 id=\"online-platforms-for-mock-interviews\">Online platforms for mock interviews<a title=\"#online-platforms-for-mock-interviews\" href=\"#online-platforms-for-mock-interviews\"></a></h2>\n<p>There are several online platforms, such as Pramp and <a href=\"http://Interviewing.io\">Interviewing.io</a>, that offer mock interviews with industry professionals. These platforms can provide valuable insights and feedback from people who have experience in the field.</p>\n<h2 id=\"record-your-mock-interviews\">Record your mock interviews<a title=\"#record-your-mock-interviews\" href=\"#record-your-mock-interviews\"></a></h2>\n<p>Recording your mock interviews can be helpful in identifying areas for improvement. Review the recording to assess your body language, tone of voice, and overall presentation. This can help you become more self-aware and make necessary adjustments before the actual interview.</p>\n<p>By participating in mock interviews, you can improve your interview skills, identify your strengths and weaknesses, and become more confident in your ability to perform well during the actual job interview.</p>\n","date_formatted":{"ll":"Mar 28, 2023","L":"03/28/2023","MM-DD":"03-28"},"plink":"http://codesandtags.io/blog/2023/03/28/en/how-can-mock-interviews-help-you/","type":"post","toc":[{"id":"purpose","title":"Purpose","index":"1"},{"id":"format","title":"Format","index":"2"},{"id":"preparation","title":"Preparation","index":"3"},{"id":"conducting-mock-interviews","title":"Conducting mock interviews","index":"4"},{"id":"receiving-feedback","title":"Receiving feedback","index":"5"},{"id":"practice-multiple-mock-interviews","title":"Practice multiple mock interviews","index":"6"},{"id":"online-platforms-for-mock-interviews","title":"Online platforms for mock interviews","index":"7"},{"id":"record-your-mock-interviews","title":"Record your mock interviews","index":"8"}],"reading_time":"415 words in 3 min"},{"title":"Working at Google - the interview process (part 2)","date":"2023-03-25T05:48:14.000Z","excerpt":"Here we have a detailed explanation about the interview process at Google. So let's explore every step and how long could it take.","author":"codesandtags","thumbnail":"images/faang-google-thumbnail.jpg","_content":"\nUnderstanding the interview process is crucial to success in any job interview, and Google's software engineering interviews are no exception. Here is a more detailed breakdown of Google's interview process:\n\n## Application and resume review:\n\nSubmit your application and resume through Google's career website or via a referral. Google recruiters review applications to identify candidates with the required skills and experience. A well-crafted resume tailored for the role you're applying for can increase your chances of being noticed.\n\n## Initial phone screen:\n\nA Google recruiter will typically reach out for an initial phone screen to discuss your background, experience, and interest in the company. This is also an opportunity for you to ask questions about the role and clarify any doubts you may have about the process.\n\n## Technical phone interviews:\n\nAfter passing the initial phone screen, you'll be scheduled for one or more technical phone interviews with a Google engineer. Each interview typically lasts 45 minutes to an hour and covers data structures, algorithms, and problem-solving skills. You'll be asked to write code in a shared document or a coding platform like Google Docs.\n\n## On-site interviews (or virtual due to COVID-19):\n\nIf you successfully pass the technical phone interviews, you'll be invited for on-site interviews, which may be conducted virtually due to COVID-19 or in-person at a Google office. You can expect 4-5 interviews, each lasting about 45 minutes, covering a mix of technical topics, including:\na. Algorithmic problem solving and coding\nb. System design\nc. Low-level design or object-oriented design\nd. Behavioral questions\ne. Domain-specific topics (e.g., machine learning, distributed systems) depending on the role\n\n## Hiring Committee review:\n\nOnce you've completed the interviews, your performance and feedback from the interviewers will be reviewed by a hiring committee. This committee will evaluate your application holistically, considering your technical and behavioral performance, to determine if you're a good fit for the role.\n\n## Team matching:\n\nIf the hiring committee approves your application, you'll enter the team matching phase. During this stage, your skills and preferences will be matched with the needs of various teams within Google. You may have additional interviews with potential managers or team members to ensure a good fit.\n\n## Offer and negotiation:\n\nOnce a suitable team match has been found, you'll receive a job offer from Google. This offer will include details about your compensation package, including salary, equity, and benefits. You may have the opportunity to negotiate your offer at this stage.\n\nUnderstanding this process will help you set realistic expectations and prepare effectively for each stage of the Google software engineering interview process.\n\n## Timeline\n\nHere is a timeline based on the detailed breakdown of Google's interview process:\n\n#### Week 1:\n\nSubmit your application and tailored resume through Google's career website or via a referral.\n\n#### Weeks 2-3:\n\nApplication and resume review by Google recruiters.\n\n#### Week 4:\n\nInitial phone screen with a Google recruiter to discuss your background, experience, and interest in the company.\n\n#### Weeks 5-6:\n\nPrepare for technical phone interviews by practicing coding problems and reviewing computer science fundamentals.\n\n#### Week 7:\n\nTechnical phone interviews with Google engineers, focusing on data structures, algorithms, and problem-solving skills.\n\n#### Weeks 8-9:\n\nOn-site or virtual interviews, including 4-5 interviews covering algorithmic problem solving, system design, low-level design, behavioral questions, and domain-specific topics.\n\n#### Weeks 10-11:\n\nHiring Committee review of your interview performance and overall application.\n\n#### Week 12:\n\nTeam matching process to find a suitable team based on your skills and preferences.\n\n#### Week 13:\n\nReceive a job offer from Google, including details about your compensation package.\n\n#### Week 14:\n\nOffer negotiation, if applicable, and acceptance of the job offer.\n\nPlease note that this timeline is a rough estimate and may vary depending on various factors, such as the volume of applications, interviewer availability, and other logistical considerations. Some stages may take longer or shorter than indicated in this timeline.\n\n![space](images/working-at-google-interview-process-hero.jpg)\n","source":"_posts/en/working-at-google-interview-process.md","raw":"---\ntitle: Working at Google - the interview process (part 2)\ndate: 2023-03-25 01:48:14\ntags: [google, software, interview]\nexcerpt: Here we have a detailed explanation about the interview process at Google. So let's explore every step and how long could it take.\nauthor: codesandtags\ncategory: FAANG\nthumbnail: images/faang-google-thumbnail.jpg\n---\n\nUnderstanding the interview process is crucial to success in any job interview, and Google's software engineering interviews are no exception. Here is a more detailed breakdown of Google's interview process:\n\n## Application and resume review:\n\nSubmit your application and resume through Google's career website or via a referral. Google recruiters review applications to identify candidates with the required skills and experience. A well-crafted resume tailored for the role you're applying for can increase your chances of being noticed.\n\n## Initial phone screen:\n\nA Google recruiter will typically reach out for an initial phone screen to discuss your background, experience, and interest in the company. This is also an opportunity for you to ask questions about the role and clarify any doubts you may have about the process.\n\n## Technical phone interviews:\n\nAfter passing the initial phone screen, you'll be scheduled for one or more technical phone interviews with a Google engineer. Each interview typically lasts 45 minutes to an hour and covers data structures, algorithms, and problem-solving skills. You'll be asked to write code in a shared document or a coding platform like Google Docs.\n\n## On-site interviews (or virtual due to COVID-19):\n\nIf you successfully pass the technical phone interviews, you'll be invited for on-site interviews, which may be conducted virtually due to COVID-19 or in-person at a Google office. You can expect 4-5 interviews, each lasting about 45 minutes, covering a mix of technical topics, including:\na. Algorithmic problem solving and coding\nb. System design\nc. Low-level design or object-oriented design\nd. Behavioral questions\ne. Domain-specific topics (e.g., machine learning, distributed systems) depending on the role\n\n## Hiring Committee review:\n\nOnce you've completed the interviews, your performance and feedback from the interviewers will be reviewed by a hiring committee. This committee will evaluate your application holistically, considering your technical and behavioral performance, to determine if you're a good fit for the role.\n\n## Team matching:\n\nIf the hiring committee approves your application, you'll enter the team matching phase. During this stage, your skills and preferences will be matched with the needs of various teams within Google. You may have additional interviews with potential managers or team members to ensure a good fit.\n\n## Offer and negotiation:\n\nOnce a suitable team match has been found, you'll receive a job offer from Google. This offer will include details about your compensation package, including salary, equity, and benefits. You may have the opportunity to negotiate your offer at this stage.\n\nUnderstanding this process will help you set realistic expectations and prepare effectively for each stage of the Google software engineering interview process.\n\n## Timeline\n\nHere is a timeline based on the detailed breakdown of Google's interview process:\n\n#### Week 1:\n\nSubmit your application and tailored resume through Google's career website or via a referral.\n\n#### Weeks 2-3:\n\nApplication and resume review by Google recruiters.\n\n#### Week 4:\n\nInitial phone screen with a Google recruiter to discuss your background, experience, and interest in the company.\n\n#### Weeks 5-6:\n\nPrepare for technical phone interviews by practicing coding problems and reviewing computer science fundamentals.\n\n#### Week 7:\n\nTechnical phone interviews with Google engineers, focusing on data structures, algorithms, and problem-solving skills.\n\n#### Weeks 8-9:\n\nOn-site or virtual interviews, including 4-5 interviews covering algorithmic problem solving, system design, low-level design, behavioral questions, and domain-specific topics.\n\n#### Weeks 10-11:\n\nHiring Committee review of your interview performance and overall application.\n\n#### Week 12:\n\nTeam matching process to find a suitable team based on your skills and preferences.\n\n#### Week 13:\n\nReceive a job offer from Google, including details about your compensation package.\n\n#### Week 14:\n\nOffer negotiation, if applicable, and acceptance of the job offer.\n\nPlease note that this timeline is a rough estimate and may vary depending on various factors, such as the volume of applications, interviewer availability, and other logistical considerations. Some stages may take longer or shorter than indicated in this timeline.\n\n![space](images/working-at-google-interview-process-hero.jpg)\n","slug":"en/working-at-google-interview-process","published":1,"updated":"2023-07-17T22:47:10.536Z","comments":0,"layout":"post","photos":[],"link":"2023/03/25/en/working-at-google-interview-process","_id":"clnwi7gaz000fqbt25mhge3pm","content":"<p>Understanding the interview process is crucial to success in any job interview, and Google’s software engineering interviews are no exception. Here is a more detailed breakdown of Google’s interview process:</p>\n<h2 id=\"application-and-resume-review:\">Application and resume review:<a title=\"#application-and-resume-review:\" href=\"#application-and-resume-review:\"></a></h2>\n<p>Submit your application and resume through Google’s career website or via a referral. Google recruiters review applications to identify candidates with the required skills and experience. A well-crafted resume tailored for the role you’re applying for can increase your chances of being noticed.</p>\n<h2 id=\"initial-phone-screen:\">Initial phone screen:<a title=\"#initial-phone-screen:\" href=\"#initial-phone-screen:\"></a></h2>\n<p>A Google recruiter will typically reach out for an initial phone screen to discuss your background, experience, and interest in the company. This is also an opportunity for you to ask questions about the role and clarify any doubts you may have about the process.</p>\n<h2 id=\"technical-phone-interviews:\">Technical phone interviews:<a title=\"#technical-phone-interviews:\" href=\"#technical-phone-interviews:\"></a></h2>\n<p>After passing the initial phone screen, you’ll be scheduled for one or more technical phone interviews with a Google engineer. Each interview typically lasts 45 minutes to an hour and covers data structures, algorithms, and problem-solving skills. You’ll be asked to write code in a shared document or a coding platform like Google Docs.</p>\n<h2 id=\"on-site-interviews-(or-virtual-due-to-covid-19):\">On-site interviews (or virtual due to COVID-19):<a title=\"#on-site-interviews-(or-virtual-due-to-covid-19):\" href=\"#on-site-interviews-(or-virtual-due-to-covid-19):\"></a></h2>\n<p>If you successfully pass the technical phone interviews, you’ll be invited for on-site interviews, which may be conducted virtually due to COVID-19 or in-person at a Google office. You can expect 4-5 interviews, each lasting about 45 minutes, covering a mix of technical topics, including:<br>\na. Algorithmic problem solving and coding<br>\nb. System design<br>\nc. Low-level design or object-oriented design<br>\nd. Behavioral questions<br>\ne. Domain-specific topics (e.g., machine learning, distributed systems) depending on the role</p>\n<h2 id=\"hiring-committee-review:\">Hiring Committee review:<a title=\"#hiring-committee-review:\" href=\"#hiring-committee-review:\"></a></h2>\n<p>Once you’ve completed the interviews, your performance and feedback from the interviewers will be reviewed by a hiring committee. This committee will evaluate your application holistically, considering your technical and behavioral performance, to determine if you’re a good fit for the role.</p>\n<h2 id=\"team-matching:\">Team matching:<a title=\"#team-matching:\" href=\"#team-matching:\"></a></h2>\n<p>If the hiring committee approves your application, you’ll enter the team matching phase. During this stage, your skills and preferences will be matched with the needs of various teams within Google. You may have additional interviews with potential managers or team members to ensure a good fit.</p>\n<h2 id=\"offer-and-negotiation:\">Offer and negotiation:<a title=\"#offer-and-negotiation:\" href=\"#offer-and-negotiation:\"></a></h2>\n<p>Once a suitable team match has been found, you’ll receive a job offer from Google. This offer will include details about your compensation package, including salary, equity, and benefits. You may have the opportunity to negotiate your offer at this stage.</p>\n<p>Understanding this process will help you set realistic expectations and prepare effectively for each stage of the Google software engineering interview process.</p>\n<h2 id=\"timeline\">Timeline<a title=\"#timeline\" href=\"#timeline\"></a></h2>\n<p>Here is a timeline based on the detailed breakdown of Google’s interview process:</p>\n<h4 id=\"week-1:\">Week 1:<a title=\"#week-1:\" href=\"#week-1:\"></a></h4>\n<p>Submit your application and tailored resume through Google’s career website or via a referral.</p>\n<h4 id=\"weeks-2-3:\">Weeks 2-3:<a title=\"#weeks-2-3:\" href=\"#weeks-2-3:\"></a></h4>\n<p>Application and resume review by Google recruiters.</p>\n<h4 id=\"week-4:\">Week 4:<a title=\"#week-4:\" href=\"#week-4:\"></a></h4>\n<p>Initial phone screen with a Google recruiter to discuss your background, experience, and interest in the company.</p>\n<h4 id=\"weeks-5-6:\">Weeks 5-6:<a title=\"#weeks-5-6:\" href=\"#weeks-5-6:\"></a></h4>\n<p>Prepare for technical phone interviews by practicing coding problems and reviewing computer science fundamentals.</p>\n<h4 id=\"week-7:\">Week 7:<a title=\"#week-7:\" href=\"#week-7:\"></a></h4>\n<p>Technical phone interviews with Google engineers, focusing on data structures, algorithms, and problem-solving skills.</p>\n<h4 id=\"weeks-8-9:\">Weeks 8-9:<a title=\"#weeks-8-9:\" href=\"#weeks-8-9:\"></a></h4>\n<p>On-site or virtual interviews, including 4-5 interviews covering algorithmic problem solving, system design, low-level design, behavioral questions, and domain-specific topics.</p>\n<h4 id=\"weeks-10-11:\">Weeks 10-11:<a title=\"#weeks-10-11:\" href=\"#weeks-10-11:\"></a></h4>\n<p>Hiring Committee review of your interview performance and overall application.</p>\n<h4 id=\"week-12:\">Week 12:<a title=\"#week-12:\" href=\"#week-12:\"></a></h4>\n<p>Team matching process to find a suitable team based on your skills and preferences.</p>\n<h4 id=\"week-13:\">Week 13:<a title=\"#week-13:\" href=\"#week-13:\"></a></h4>\n<p>Receive a job offer from Google, including details about your compensation package.</p>\n<h4 id=\"week-14:\">Week 14:<a title=\"#week-14:\" href=\"#week-14:\"></a></h4>\n<p>Offer negotiation, if applicable, and acceptance of the job offer.</p>\n<p>Please note that this timeline is a rough estimate and may vary depending on various factors, such as the volume of applications, interviewer availability, and other logistical considerations. Some stages may take longer or shorter than indicated in this timeline.</p>\n<p><img src=\"images/working-at-google-interview-process-hero.jpg\" alt=\"space\" loading=\"lazy\" class=\"φbp\"></p>\n","site":{"data":{}},"more":"<p>Understanding the interview process is crucial to success in any job interview, and Google’s software engineering interviews are no exception. Here is a more detailed breakdown of Google’s interview process:</p>\n<h2 id=\"application-and-resume-review:\">Application and resume review:<a title=\"#application-and-resume-review:\" href=\"#application-and-resume-review:\"></a></h2>\n<p>Submit your application and resume through Google’s career website or via a referral. Google recruiters review applications to identify candidates with the required skills and experience. A well-crafted resume tailored for the role you’re applying for can increase your chances of being noticed.</p>\n<h2 id=\"initial-phone-screen:\">Initial phone screen:<a title=\"#initial-phone-screen:\" href=\"#initial-phone-screen:\"></a></h2>\n<p>A Google recruiter will typically reach out for an initial phone screen to discuss your background, experience, and interest in the company. This is also an opportunity for you to ask questions about the role and clarify any doubts you may have about the process.</p>\n<h2 id=\"technical-phone-interviews:\">Technical phone interviews:<a title=\"#technical-phone-interviews:\" href=\"#technical-phone-interviews:\"></a></h2>\n<p>After passing the initial phone screen, you’ll be scheduled for one or more technical phone interviews with a Google engineer. Each interview typically lasts 45 minutes to an hour and covers data structures, algorithms, and problem-solving skills. You’ll be asked to write code in a shared document or a coding platform like Google Docs.</p>\n<h2 id=\"on-site-interviews-(or-virtual-due-to-covid-19):\">On-site interviews (or virtual due to COVID-19):<a title=\"#on-site-interviews-(or-virtual-due-to-covid-19):\" href=\"#on-site-interviews-(or-virtual-due-to-covid-19):\"></a></h2>\n<p>If you successfully pass the technical phone interviews, you’ll be invited for on-site interviews, which may be conducted virtually due to COVID-19 or in-person at a Google office. You can expect 4-5 interviews, each lasting about 45 minutes, covering a mix of technical topics, including:<br>\na. Algorithmic problem solving and coding<br>\nb. System design<br>\nc. Low-level design or object-oriented design<br>\nd. Behavioral questions<br>\ne. Domain-specific topics (e.g., machine learning, distributed systems) depending on the role</p>\n<h2 id=\"hiring-committee-review:\">Hiring Committee review:<a title=\"#hiring-committee-review:\" href=\"#hiring-committee-review:\"></a></h2>\n<p>Once you’ve completed the interviews, your performance and feedback from the interviewers will be reviewed by a hiring committee. This committee will evaluate your application holistically, considering your technical and behavioral performance, to determine if you’re a good fit for the role.</p>\n<h2 id=\"team-matching:\">Team matching:<a title=\"#team-matching:\" href=\"#team-matching:\"></a></h2>\n<p>If the hiring committee approves your application, you’ll enter the team matching phase. During this stage, your skills and preferences will be matched with the needs of various teams within Google. You may have additional interviews with potential managers or team members to ensure a good fit.</p>\n<h2 id=\"offer-and-negotiation:\">Offer and negotiation:<a title=\"#offer-and-negotiation:\" href=\"#offer-and-negotiation:\"></a></h2>\n<p>Once a suitable team match has been found, you’ll receive a job offer from Google. This offer will include details about your compensation package, including salary, equity, and benefits. You may have the opportunity to negotiate your offer at this stage.</p>\n<p>Understanding this process will help you set realistic expectations and prepare effectively for each stage of the Google software engineering interview process.</p>\n<h2 id=\"timeline\">Timeline<a title=\"#timeline\" href=\"#timeline\"></a></h2>\n<p>Here is a timeline based on the detailed breakdown of Google’s interview process:</p>\n<h4 id=\"week-1:\">Week 1:<a title=\"#week-1:\" href=\"#week-1:\"></a></h4>\n<p>Submit your application and tailored resume through Google’s career website or via a referral.</p>\n<h4 id=\"weeks-2-3:\">Weeks 2-3:<a title=\"#weeks-2-3:\" href=\"#weeks-2-3:\"></a></h4>\n<p>Application and resume review by Google recruiters.</p>\n<h4 id=\"week-4:\">Week 4:<a title=\"#week-4:\" href=\"#week-4:\"></a></h4>\n<p>Initial phone screen with a Google recruiter to discuss your background, experience, and interest in the company.</p>\n<h4 id=\"weeks-5-6:\">Weeks 5-6:<a title=\"#weeks-5-6:\" href=\"#weeks-5-6:\"></a></h4>\n<p>Prepare for technical phone interviews by practicing coding problems and reviewing computer science fundamentals.</p>\n<h4 id=\"week-7:\">Week 7:<a title=\"#week-7:\" href=\"#week-7:\"></a></h4>\n<p>Technical phone interviews with Google engineers, focusing on data structures, algorithms, and problem-solving skills.</p>\n<h4 id=\"weeks-8-9:\">Weeks 8-9:<a title=\"#weeks-8-9:\" href=\"#weeks-8-9:\"></a></h4>\n<p>On-site or virtual interviews, including 4-5 interviews covering algorithmic problem solving, system design, low-level design, behavioral questions, and domain-specific topics.</p>\n<h4 id=\"weeks-10-11:\">Weeks 10-11:<a title=\"#weeks-10-11:\" href=\"#weeks-10-11:\"></a></h4>\n<p>Hiring Committee review of your interview performance and overall application.</p>\n<h4 id=\"week-12:\">Week 12:<a title=\"#week-12:\" href=\"#week-12:\"></a></h4>\n<p>Team matching process to find a suitable team based on your skills and preferences.</p>\n<h4 id=\"week-13:\">Week 13:<a title=\"#week-13:\" href=\"#week-13:\"></a></h4>\n<p>Receive a job offer from Google, including details about your compensation package.</p>\n<h4 id=\"week-14:\">Week 14:<a title=\"#week-14:\" href=\"#week-14:\"></a></h4>\n<p>Offer negotiation, if applicable, and acceptance of the job offer.</p>\n<p>Please note that this timeline is a rough estimate and may vary depending on various factors, such as the volume of applications, interviewer availability, and other logistical considerations. Some stages may take longer or shorter than indicated in this timeline.</p>\n<p><img src=\"images/working-at-google-interview-process-hero.jpg\" alt=\"space\" loading=\"lazy\" class=\"φbp\"></p>\n","date_formatted":{"ll":"Mar 25, 2023","L":"03/25/2023","MM-DD":"03-25"},"plink":"http://codesandtags.io/blog/2023/03/25/en/working-at-google-interview-process/","type":"post","toc":[{"id":"application-and-resume-review:","title":"Application and resume review:","index":"1"},{"id":"initial-phone-screen:","title":"Initial phone screen:","index":"2"},{"id":"technical-phone-interviews:","title":"Technical phone interviews:","index":"3"},{"id":"on-site-interviews-(or-virtual-due-to-covid-19):","title":"On-site interviews (or virtual due to COVID-19):","index":"4"},{"id":"hiring-committee-review:","title":"Hiring Committee review:","index":"5"},{"id":"team-matching:","title":"Team matching:","index":"6"},{"id":"offer-and-negotiation:","title":"Offer and negotiation:","index":"7"},{"id":"timeline","title":"Timeline","index":"8"}],"reading_time":"673 words in 4 min"},{"title":"Working at Google - Leetcode and other online resources (part 5)","date":"2023-03-25T15:41:14.000Z","excerpt":"Practicing coding problems is essential for preparing for technical interviews at companies like Google. LeetCode and other online resources offer a vast collection of coding challenges that help you hone your problem-solving and coding skills.","author":"codesandtags","thumbnail":"images/faang-google-thumbnail.jpg","_content":"\nPracticing coding problems is essential for preparing for technical interviews at companies like Google. LeetCode and other online resources offer a vast collection of coding challenges that help you hone your problem-solving and coding skills. Here's more detail on LeetCode and some other popular platforms:\n\n## LeetCode (https://leetcode.com/):\n\nLeetCode is one of the most popular online platforms for practicing coding challenges. It offers a large collection of problems, sorted by difficulty level (easy, medium, and hard) and categorized by topic (e.g., arrays, trees, graphs, dynamic programming). Many problems on LeetCode are similar to questions asked in actual interviews. The platform also features:\n\n- A code editor with built-in support for multiple programming languages\n- Test cases to verify your solution's correctness and performance\n- User-submitted solutions and explanations to learn from others\n- A premium subscription option that unlocks additional features, such as company-specific questions\n\n## HackerRank (https://www.hackerrank.com/):\n\nHackerRank is another popular platform for practicing coding challenges, featuring problems across various domains, such as algorithms, data structures, artificial intelligence, and databases. HackerRank also offers:\n\n- A code editor with built-in support for multiple programming languages\n- Test cases and a scoring system to evaluate your solution\n- Competitions and hackathons to test your skills against others\n- A job board where you can apply to companies using your HackerRank profile\n\n## CodeSignal (https://codesignal.com/):\n\nCodeSignal is a platform for practicing coding problems and participating in coding competitions. It offers a variety of challenges across multiple domains, such as algorithms, data structures, and databases. CodeSignal also provides:\n\n- A code editor with built-in support for multiple programming languages\n- Test cases and a scoring system to evaluate your solution\n- Coding competitions and company-sponsored challenges\n- A job board and a talent-matching system that connects you with potential employers\n\n## GeeksforGeeks (https://www.geeksforgeeks.org/):\n\nGeeksforGeeks is a comprehensive resource for computer science fundamentals, programming tutorials, and coding problems. It offers a vast collection of articles, explanations, and sample solutions for various topics, such as data structures, algorithms, operating systems, and databases. GeeksforGeeks also features:\n\n- A code editor for trying out code snippets and examples\n- A question bank with coding problems from various companies\n- Mock interviews and interview experiences shared by users\n- Online courses and certifications for more structured learning\n\n## Project Euler (https://projecteuler.net/):\n\nProject Euler is a collection of challenging mathematical problems that require creative problem-solving and programming skills. While not specifically focused on typical coding interview questions, solving Project Euler problems can help sharpen your analytical and optimization skills, which are valuable for technical interviews.\n\nBy utilizing these resources, you can practice a wide range of coding problems and improve your problem-solving skills to succeed in Google software interviews. Remember to focus on the quality of your practice, understanding the underlying concepts, and learning from your mistakes to maximize your preparation.\n\n## Timeline\n\n#### Week 1: Getting Started with Online Resources\n\nSign up for LeetCode, HackerRank, CodeSignal, and GeeksforGeeks\nFamiliarize yourself with the platforms and their features\nStart with easy coding problems on each platform\n\n#### Week 2: Data Structures\n\nFocus on solving problems related to arrays, linked lists, stacks, queues, hash tables, trees, and graphs\nUse online resources like GeeksforGeeks and LeetCode to find relevant problems and solutions\n\n#### Week 3: Algorithms\n\nPractice problems on sorting, searching, recursion, dynamic programming, and greedy algorithms\nUse platforms like HackerRank and CodeSignal to find algorithm challenges and competitions\n\n#### Week 4: System Design\n\nStudy design patterns, scalability, performance optimization, and microservices architecture using online resources\nAttempt system design problems on LeetCode\n\n#### Week 5: Mock Interviews\n\nParticipate in mock interviews on platforms like Pramp and Interviewing.io\nFocus on applying concepts learned from online resources during mock interviews\n\n#### Week 6: Coding Competitions and Challenges\n\nParticipate in coding competitions on platforms like CodeSignal and HackerRank\nSolve time-bound coding challenges to improve your problem-solving speed\n\n#### Week 7: Review and Refine\n\nRevisit difficult topics and problems from previous weeks\nStudy user-submitted solutions and explanations on LeetCode and GeeksforGeeks to learn alternative approaches\n\n#### Week 8: Final Preparation\n\nContinue practicing coding problems on various platforms\nFocus on improving your speed, accuracy, and efficiency\nParticipate in additional mock interviews using online resources\n\n![space](images/working-at-google-leetcode-and-other-resources-hero.jpg)\n","source":"_posts/en/working-at-google-leetcode-and-other-resources.md","raw":"---\ntitle: Working at Google - Leetcode and other online resources (part 5)\ndate: 2023-03-25 11:41:14\ntags: [google, software, interview, leetcode]\nexcerpt: Practicing coding problems is essential for preparing for technical interviews at companies like Google. LeetCode and other online resources offer a vast collection of coding challenges that help you hone your problem-solving and coding skills.\nauthor: codesandtags\ncategory: FAANG\nthumbnail: images/faang-google-thumbnail.jpg\n---\n\nPracticing coding problems is essential for preparing for technical interviews at companies like Google. LeetCode and other online resources offer a vast collection of coding challenges that help you hone your problem-solving and coding skills. Here's more detail on LeetCode and some other popular platforms:\n\n## LeetCode (https://leetcode.com/):\n\nLeetCode is one of the most popular online platforms for practicing coding challenges. It offers a large collection of problems, sorted by difficulty level (easy, medium, and hard) and categorized by topic (e.g., arrays, trees, graphs, dynamic programming). Many problems on LeetCode are similar to questions asked in actual interviews. The platform also features:\n\n- A code editor with built-in support for multiple programming languages\n- Test cases to verify your solution's correctness and performance\n- User-submitted solutions and explanations to learn from others\n- A premium subscription option that unlocks additional features, such as company-specific questions\n\n## HackerRank (https://www.hackerrank.com/):\n\nHackerRank is another popular platform for practicing coding challenges, featuring problems across various domains, such as algorithms, data structures, artificial intelligence, and databases. HackerRank also offers:\n\n- A code editor with built-in support for multiple programming languages\n- Test cases and a scoring system to evaluate your solution\n- Competitions and hackathons to test your skills against others\n- A job board where you can apply to companies using your HackerRank profile\n\n## CodeSignal (https://codesignal.com/):\n\nCodeSignal is a platform for practicing coding problems and participating in coding competitions. It offers a variety of challenges across multiple domains, such as algorithms, data structures, and databases. CodeSignal also provides:\n\n- A code editor with built-in support for multiple programming languages\n- Test cases and a scoring system to evaluate your solution\n- Coding competitions and company-sponsored challenges\n- A job board and a talent-matching system that connects you with potential employers\n\n## GeeksforGeeks (https://www.geeksforgeeks.org/):\n\nGeeksforGeeks is a comprehensive resource for computer science fundamentals, programming tutorials, and coding problems. It offers a vast collection of articles, explanations, and sample solutions for various topics, such as data structures, algorithms, operating systems, and databases. GeeksforGeeks also features:\n\n- A code editor for trying out code snippets and examples\n- A question bank with coding problems from various companies\n- Mock interviews and interview experiences shared by users\n- Online courses and certifications for more structured learning\n\n## Project Euler (https://projecteuler.net/):\n\nProject Euler is a collection of challenging mathematical problems that require creative problem-solving and programming skills. While not specifically focused on typical coding interview questions, solving Project Euler problems can help sharpen your analytical and optimization skills, which are valuable for technical interviews.\n\nBy utilizing these resources, you can practice a wide range of coding problems and improve your problem-solving skills to succeed in Google software interviews. Remember to focus on the quality of your practice, understanding the underlying concepts, and learning from your mistakes to maximize your preparation.\n\n## Timeline\n\n#### Week 1: Getting Started with Online Resources\n\nSign up for LeetCode, HackerRank, CodeSignal, and GeeksforGeeks\nFamiliarize yourself with the platforms and their features\nStart with easy coding problems on each platform\n\n#### Week 2: Data Structures\n\nFocus on solving problems related to arrays, linked lists, stacks, queues, hash tables, trees, and graphs\nUse online resources like GeeksforGeeks and LeetCode to find relevant problems and solutions\n\n#### Week 3: Algorithms\n\nPractice problems on sorting, searching, recursion, dynamic programming, and greedy algorithms\nUse platforms like HackerRank and CodeSignal to find algorithm challenges and competitions\n\n#### Week 4: System Design\n\nStudy design patterns, scalability, performance optimization, and microservices architecture using online resources\nAttempt system design problems on LeetCode\n\n#### Week 5: Mock Interviews\n\nParticipate in mock interviews on platforms like Pramp and Interviewing.io\nFocus on applying concepts learned from online resources during mock interviews\n\n#### Week 6: Coding Competitions and Challenges\n\nParticipate in coding competitions on platforms like CodeSignal and HackerRank\nSolve time-bound coding challenges to improve your problem-solving speed\n\n#### Week 7: Review and Refine\n\nRevisit difficult topics and problems from previous weeks\nStudy user-submitted solutions and explanations on LeetCode and GeeksforGeeks to learn alternative approaches\n\n#### Week 8: Final Preparation\n\nContinue practicing coding problems on various platforms\nFocus on improving your speed, accuracy, and efficiency\nParticipate in additional mock interviews using online resources\n\n![space](images/working-at-google-leetcode-and-other-resources-hero.jpg)\n","slug":"en/working-at-google-leetcode-and-other-resources","published":1,"updated":"2023-07-17T22:47:10.536Z","comments":0,"layout":"post","photos":[],"link":"2023/03/25/en/working-at-google-leetcode-and-other-resources","_id":"clnwi7gb0000iqbt21q5144vy","content":"<p>Practicing coding problems is essential for preparing for technical interviews at companies like Google. LeetCode and other online resources offer a vast collection of coding challenges that help you hone your problem-solving and coding skills. Here’s more detail on LeetCode and some other popular platforms:</p>\n<h2 id=\"leetcode-(https://leetcode.com/):\">LeetCode (<a href=\"https://leetcode.com/\">https://leetcode.com/</a>):<a title=\"#leetcode-(https://leetcode.com/):\" href=\"#leetcode-(https://leetcode.com/):\"></a></h2>\n<p>LeetCode is one of the most popular online platforms for practicing coding challenges. It offers a large collection of problems, sorted by difficulty level (easy, medium, and hard) and categorized by topic (e.g., arrays, trees, graphs, dynamic programming). Many problems on LeetCode are similar to questions asked in actual interviews. The platform also features:</p>\n<ul>\n<li>A code editor with built-in support for multiple programming languages</li>\n<li>Test cases to verify your solution’s correctness and performance</li>\n<li>User-submitted solutions and explanations to learn from others</li>\n<li>A premium subscription option that unlocks additional features, such as company-specific questions</li>\n</ul>\n<h2 id=\"hackerrank-(https://www.hackerrank.com/):\">HackerRank (<a href=\"https://www.hackerrank.com/\">https://www.hackerrank.com/</a>):<a title=\"#hackerrank-(https://www.hackerrank.com/):\" href=\"#hackerrank-(https://www.hackerrank.com/):\"></a></h2>\n<p>HackerRank is another popular platform for practicing coding challenges, featuring problems across various domains, such as algorithms, data structures, artificial intelligence, and databases. HackerRank also offers:</p>\n<ul>\n<li>A code editor with built-in support for multiple programming languages</li>\n<li>Test cases and a scoring system to evaluate your solution</li>\n<li>Competitions and hackathons to test your skills against others</li>\n<li>A job board where you can apply to companies using your HackerRank profile</li>\n</ul>\n<h2 id=\"codesignal-(https://codesignal.com/):\">CodeSignal (<a href=\"https://codesignal.com/\">https://codesignal.com/</a>):<a title=\"#codesignal-(https://codesignal.com/):\" href=\"#codesignal-(https://codesignal.com/):\"></a></h2>\n<p>CodeSignal is a platform for practicing coding problems and participating in coding competitions. It offers a variety of challenges across multiple domains, such as algorithms, data structures, and databases. CodeSignal also provides:</p>\n<ul>\n<li>A code editor with built-in support for multiple programming languages</li>\n<li>Test cases and a scoring system to evaluate your solution</li>\n<li>Coding competitions and company-sponsored challenges</li>\n<li>A job board and a talent-matching system that connects you with potential employers</li>\n</ul>\n<h2 id=\"geeksforgeeks-(https://www.geeksforgeeks.org/):\">GeeksforGeeks (<a href=\"https://www.geeksforgeeks.org/\">https://www.geeksforgeeks.org/</a>):<a title=\"#geeksforgeeks-(https://www.geeksforgeeks.org/):\" href=\"#geeksforgeeks-(https://www.geeksforgeeks.org/):\"></a></h2>\n<p>GeeksforGeeks is a comprehensive resource for computer science fundamentals, programming tutorials, and coding problems. It offers a vast collection of articles, explanations, and sample solutions for various topics, such as data structures, algorithms, operating systems, and databases. GeeksforGeeks also features:</p>\n<ul>\n<li>A code editor for trying out code snippets and examples</li>\n<li>A question bank with coding problems from various companies</li>\n<li>Mock interviews and interview experiences shared by users</li>\n<li>Online courses and certifications for more structured learning</li>\n</ul>\n<h2 id=\"project-euler-(https://projecteuler.net/):\">Project Euler (<a href=\"https://projecteuler.net/\">https://projecteuler.net/</a>):<a title=\"#project-euler-(https://projecteuler.net/):\" href=\"#project-euler-(https://projecteuler.net/):\"></a></h2>\n<p>Project Euler is a collection of challenging mathematical problems that require creative problem-solving and programming skills. While not specifically focused on typical coding interview questions, solving Project Euler problems can help sharpen your analytical and optimization skills, which are valuable for technical interviews.</p>\n<p>By utilizing these resources, you can practice a wide range of coding problems and improve your problem-solving skills to succeed in Google software interviews. Remember to focus on the quality of your practice, understanding the underlying concepts, and learning from your mistakes to maximize your preparation.</p>\n<h2 id=\"timeline\">Timeline<a title=\"#timeline\" href=\"#timeline\"></a></h2>\n<h4 id=\"week-1:-getting-started-with-online-resources\">Week 1: Getting Started with Online Resources<a title=\"#week-1:-getting-started-with-online-resources\" href=\"#week-1:-getting-started-with-online-resources\"></a></h4>\n<p>Sign up for LeetCode, HackerRank, CodeSignal, and GeeksforGeeks<br>\nFamiliarize yourself with the platforms and their features<br>\nStart with easy coding problems on each platform</p>\n<h4 id=\"week-2:-data-structures\">Week 2: Data Structures<a title=\"#week-2:-data-structures\" href=\"#week-2:-data-structures\"></a></h4>\n<p>Focus on solving problems related to arrays, linked lists, stacks, queues, hash tables, trees, and graphs<br>\nUse online resources like GeeksforGeeks and LeetCode to find relevant problems and solutions</p>\n<h4 id=\"week-3:-algorithms\">Week 3: Algorithms<a title=\"#week-3:-algorithms\" href=\"#week-3:-algorithms\"></a></h4>\n<p>Practice problems on sorting, searching, recursion, dynamic programming, and greedy algorithms<br>\nUse platforms like HackerRank and CodeSignal to find algorithm challenges and competitions</p>\n<h4 id=\"week-4:-system-design\">Week 4: System Design<a title=\"#week-4:-system-design\" href=\"#week-4:-system-design\"></a></h4>\n<p>Study design patterns, scalability, performance optimization, and microservices architecture using online resources<br>\nAttempt system design problems on LeetCode</p>\n<h4 id=\"week-5:-mock-interviews\">Week 5: Mock Interviews<a title=\"#week-5:-mock-interviews\" href=\"#week-5:-mock-interviews\"></a></h4>\n<p>Participate in mock interviews on platforms like Pramp and <a href=\"http://Interviewing.io\">Interviewing.io</a><br>\nFocus on applying concepts learned from online resources during mock interviews</p>\n<h4 id=\"week-6:-coding-competitions-and-challenges\">Week 6: Coding Competitions and Challenges<a title=\"#week-6:-coding-competitions-and-challenges\" href=\"#week-6:-coding-competitions-and-challenges\"></a></h4>\n<p>Participate in coding competitions on platforms like CodeSignal and HackerRank<br>\nSolve time-bound coding challenges to improve your problem-solving speed</p>\n<h4 id=\"week-7:-review-and-refine\">Week 7: Review and Refine<a title=\"#week-7:-review-and-refine\" href=\"#week-7:-review-and-refine\"></a></h4>\n<p>Revisit difficult topics and problems from previous weeks<br>\nStudy user-submitted solutions and explanations on LeetCode and GeeksforGeeks to learn alternative approaches</p>\n<h4 id=\"week-8:-final-preparation\">Week 8: Final Preparation<a title=\"#week-8:-final-preparation\" href=\"#week-8:-final-preparation\"></a></h4>\n<p>Continue practicing coding problems on various platforms<br>\nFocus on improving your speed, accuracy, and efficiency<br>\nParticipate in additional mock interviews using online resources</p>\n<p><img src=\"images/working-at-google-leetcode-and-other-resources-hero.jpg\" alt=\"space\" loading=\"lazy\" class=\"φbp\"></p>\n","site":{"data":{}},"more":"<p>Practicing coding problems is essential for preparing for technical interviews at companies like Google. LeetCode and other online resources offer a vast collection of coding challenges that help you hone your problem-solving and coding skills. Here’s more detail on LeetCode and some other popular platforms:</p>\n<h2 id=\"leetcode-(https://leetcode.com/):\">LeetCode (<a href=\"https://leetcode.com/\">https://leetcode.com/</a>):<a title=\"#leetcode-(https://leetcode.com/):\" href=\"#leetcode-(https://leetcode.com/):\"></a></h2>\n<p>LeetCode is one of the most popular online platforms for practicing coding challenges. It offers a large collection of problems, sorted by difficulty level (easy, medium, and hard) and categorized by topic (e.g., arrays, trees, graphs, dynamic programming). Many problems on LeetCode are similar to questions asked in actual interviews. The platform also features:</p>\n<ul>\n<li>A code editor with built-in support for multiple programming languages</li>\n<li>Test cases to verify your solution’s correctness and performance</li>\n<li>User-submitted solutions and explanations to learn from others</li>\n<li>A premium subscription option that unlocks additional features, such as company-specific questions</li>\n</ul>\n<h2 id=\"hackerrank-(https://www.hackerrank.com/):\">HackerRank (<a href=\"https://www.hackerrank.com/\">https://www.hackerrank.com/</a>):<a title=\"#hackerrank-(https://www.hackerrank.com/):\" href=\"#hackerrank-(https://www.hackerrank.com/):\"></a></h2>\n<p>HackerRank is another popular platform for practicing coding challenges, featuring problems across various domains, such as algorithms, data structures, artificial intelligence, and databases. HackerRank also offers:</p>\n<ul>\n<li>A code editor with built-in support for multiple programming languages</li>\n<li>Test cases and a scoring system to evaluate your solution</li>\n<li>Competitions and hackathons to test your skills against others</li>\n<li>A job board where you can apply to companies using your HackerRank profile</li>\n</ul>\n<h2 id=\"codesignal-(https://codesignal.com/):\">CodeSignal (<a href=\"https://codesignal.com/\">https://codesignal.com/</a>):<a title=\"#codesignal-(https://codesignal.com/):\" href=\"#codesignal-(https://codesignal.com/):\"></a></h2>\n<p>CodeSignal is a platform for practicing coding problems and participating in coding competitions. It offers a variety of challenges across multiple domains, such as algorithms, data structures, and databases. CodeSignal also provides:</p>\n<ul>\n<li>A code editor with built-in support for multiple programming languages</li>\n<li>Test cases and a scoring system to evaluate your solution</li>\n<li>Coding competitions and company-sponsored challenges</li>\n<li>A job board and a talent-matching system that connects you with potential employers</li>\n</ul>\n<h2 id=\"geeksforgeeks-(https://www.geeksforgeeks.org/):\">GeeksforGeeks (<a href=\"https://www.geeksforgeeks.org/\">https://www.geeksforgeeks.org/</a>):<a title=\"#geeksforgeeks-(https://www.geeksforgeeks.org/):\" href=\"#geeksforgeeks-(https://www.geeksforgeeks.org/):\"></a></h2>\n<p>GeeksforGeeks is a comprehensive resource for computer science fundamentals, programming tutorials, and coding problems. It offers a vast collection of articles, explanations, and sample solutions for various topics, such as data structures, algorithms, operating systems, and databases. GeeksforGeeks also features:</p>\n<ul>\n<li>A code editor for trying out code snippets and examples</li>\n<li>A question bank with coding problems from various companies</li>\n<li>Mock interviews and interview experiences shared by users</li>\n<li>Online courses and certifications for more structured learning</li>\n</ul>\n<h2 id=\"project-euler-(https://projecteuler.net/):\">Project Euler (<a href=\"https://projecteuler.net/\">https://projecteuler.net/</a>):<a title=\"#project-euler-(https://projecteuler.net/):\" href=\"#project-euler-(https://projecteuler.net/):\"></a></h2>\n<p>Project Euler is a collection of challenging mathematical problems that require creative problem-solving and programming skills. While not specifically focused on typical coding interview questions, solving Project Euler problems can help sharpen your analytical and optimization skills, which are valuable for technical interviews.</p>\n<p>By utilizing these resources, you can practice a wide range of coding problems and improve your problem-solving skills to succeed in Google software interviews. Remember to focus on the quality of your practice, understanding the underlying concepts, and learning from your mistakes to maximize your preparation.</p>\n<h2 id=\"timeline\">Timeline<a title=\"#timeline\" href=\"#timeline\"></a></h2>\n<h4 id=\"week-1:-getting-started-with-online-resources\">Week 1: Getting Started with Online Resources<a title=\"#week-1:-getting-started-with-online-resources\" href=\"#week-1:-getting-started-with-online-resources\"></a></h4>\n<p>Sign up for LeetCode, HackerRank, CodeSignal, and GeeksforGeeks<br>\nFamiliarize yourself with the platforms and their features<br>\nStart with easy coding problems on each platform</p>\n<h4 id=\"week-2:-data-structures\">Week 2: Data Structures<a title=\"#week-2:-data-structures\" href=\"#week-2:-data-structures\"></a></h4>\n<p>Focus on solving problems related to arrays, linked lists, stacks, queues, hash tables, trees, and graphs<br>\nUse online resources like GeeksforGeeks and LeetCode to find relevant problems and solutions</p>\n<h4 id=\"week-3:-algorithms\">Week 3: Algorithms<a title=\"#week-3:-algorithms\" href=\"#week-3:-algorithms\"></a></h4>\n<p>Practice problems on sorting, searching, recursion, dynamic programming, and greedy algorithms<br>\nUse platforms like HackerRank and CodeSignal to find algorithm challenges and competitions</p>\n<h4 id=\"week-4:-system-design\">Week 4: System Design<a title=\"#week-4:-system-design\" href=\"#week-4:-system-design\"></a></h4>\n<p>Study design patterns, scalability, performance optimization, and microservices architecture using online resources<br>\nAttempt system design problems on LeetCode</p>\n<h4 id=\"week-5:-mock-interviews\">Week 5: Mock Interviews<a title=\"#week-5:-mock-interviews\" href=\"#week-5:-mock-interviews\"></a></h4>\n<p>Participate in mock interviews on platforms like Pramp and <a href=\"http://Interviewing.io\">Interviewing.io</a><br>\nFocus on applying concepts learned from online resources during mock interviews</p>\n<h4 id=\"week-6:-coding-competitions-and-challenges\">Week 6: Coding Competitions and Challenges<a title=\"#week-6:-coding-competitions-and-challenges\" href=\"#week-6:-coding-competitions-and-challenges\"></a></h4>\n<p>Participate in coding competitions on platforms like CodeSignal and HackerRank<br>\nSolve time-bound coding challenges to improve your problem-solving speed</p>\n<h4 id=\"week-7:-review-and-refine\">Week 7: Review and Refine<a title=\"#week-7:-review-and-refine\" href=\"#week-7:-review-and-refine\"></a></h4>\n<p>Revisit difficult topics and problems from previous weeks<br>\nStudy user-submitted solutions and explanations on LeetCode and GeeksforGeeks to learn alternative approaches</p>\n<h4 id=\"week-8:-final-preparation\">Week 8: Final Preparation<a title=\"#week-8:-final-preparation\" href=\"#week-8:-final-preparation\"></a></h4>\n<p>Continue practicing coding problems on various platforms<br>\nFocus on improving your speed, accuracy, and efficiency<br>\nParticipate in additional mock interviews using online resources</p>\n<p><img src=\"images/working-at-google-leetcode-and-other-resources-hero.jpg\" alt=\"space\" loading=\"lazy\" class=\"φbp\"></p>\n","date_formatted":{"ll":"Mar 25, 2023","L":"03/25/2023","MM-DD":"03-25"},"plink":"http://codesandtags.io/blog/2023/03/25/en/working-at-google-leetcode-and-other-resources/","type":"post","toc":[{"id":"leetcode-(https://leetcode.com/):","title":"LeetCode (https:&#x2F;&#x2F;leetcode.com&#x2F;):","index":"1"},{"id":"hackerrank-(https://www.hackerrank.com/):","title":"HackerRank (https:&#x2F;&#x2F;www.hackerrank.com&#x2F;):","index":"2"},{"id":"codesignal-(https://codesignal.com/):","title":"CodeSignal (https:&#x2F;&#x2F;codesignal.com&#x2F;):","index":"3"},{"id":"geeksforgeeks-(https://www.geeksforgeeks.org/):","title":"GeeksforGeeks (https:&#x2F;&#x2F;www.geeksforgeeks.org&#x2F;):","index":"4"},{"id":"project-euler-(https://projecteuler.net/):","title":"Project Euler (https:&#x2F;&#x2F;projecteuler.net&#x2F;):","index":"5"},{"id":"timeline","title":"Timeline","index":"6"}],"reading_time":"707 words in 5 min"},{"title":"Working at Google - optimize your problem solving (part 6)","date":"2023-03-27T02:44:01.000Z","excerpt":"Optimizing your problem-solving approach is essential to succeed in technical interviews, as it allows you to tackle problems more efficiently and effectively.","author":"codesandtags","thumbnail":"images/faang-google-thumbnail.jpg","_content":"\nOptimizing your problem-solving approach is essential to succeed in technical interviews, as it allows you to tackle problems more efficiently and effectively. Here are some strategies to help you optimize your approach:\n\n## 1. Understand the problem\n\nBefore diving into writing code, take the time to thoroughly understand the problem statement, including the input format, constraints, and expected output. Ask the interviewer any clarifying questions to ensure you fully grasp the problem requirements.\n\n## 2. Identify patterns and techniques\n\nRecognize common patterns in the problem, such as whether it involves searching, sorting, or graph traversal. This will help you determine which data structures and algorithms might be useful in solving the problem. Drawing from your experience with similar problems can also provide valuable insights.\n\n## 3. Develop a plan\n\nBefore writing any code, outline a high-level plan for solving the problem. This may include steps such as parsing the input, iterating through data, applying algorithms, and generating output. Discuss your plan with the interviewer to ensure it's on the right track and to receive any necessary feedback.\n\n## 4. Choose the right data structures\n\nSelect appropriate data structures for your solution, considering factors such as time and space complexity, ease of implementation, and readability. Choosing the right data structures can significantly impact the efficiency and effectiveness of your solution.\n\n## 5. Write clean and efficient code\n\nWhen implementing your solution, focus on writing clean and efficient code. Use meaningful variable names, follow consistent indentation and formatting, and include comments to explain your logic. Optimize your code by eliminating redundant operations, minimizing nested loops, and using efficient algorithms.\n\n## 6. Test and debug your solution\n\nAfter implementing your solution, test it using a variety of test cases, including edge cases and common scenarios. This will help you identify any errors or inefficiencies in your code. When debugging, use a systematic approach to narrow down the source of the issue and apply targeted fixes.\n\n## 7. Optimize and iterate\n\nContinuously look for opportunities to optimize your solution, whether it's improving time complexity, reducing space usage, or enhancing code readability. Discuss trade-offs with the interviewer and seek their input on potential optimizations.\n\n## 8. Practice time management\n\nDevelop a sense of pacing during your interviews, allowing enough time for each stage of the problem-solving process. This may involve allocating time for understanding the problem, developing a plan, writing code, and testing your solution.\n\n## 9. Communicate effectively\n\nThroughout the interview, maintain open communication with the interviewer. Explain your thought process, discuss your plan, and ask for feedback. Effective communication not only demonstrates your problem-solving approach but also showcases your ability to collaborate and articulate your ideas.\n\nBy optimizing your problem-solving approach and practicing these strategies, you'll be better equipped to tackle a wide range of problems during Google software interviews and demonstrate your ability to develop efficient and effective solutions.\n","source":"_posts/en/working-at-google-optimize-your-problem-solving.md","raw":"---\ntitle: Working at Google - optimize your problem solving (part 6)\ndate: 2023-03-26 22:44:01\ntags: [google, software, interview]\nexcerpt: Optimizing your problem-solving approach is essential to succeed in technical interviews, as it allows you to tackle problems more efficiently and effectively.\nauthor: codesandtags\ncategory: FAANG\nthumbnail: images/faang-google-thumbnail.jpg\n---\n\nOptimizing your problem-solving approach is essential to succeed in technical interviews, as it allows you to tackle problems more efficiently and effectively. Here are some strategies to help you optimize your approach:\n\n## 1. Understand the problem\n\nBefore diving into writing code, take the time to thoroughly understand the problem statement, including the input format, constraints, and expected output. Ask the interviewer any clarifying questions to ensure you fully grasp the problem requirements.\n\n## 2. Identify patterns and techniques\n\nRecognize common patterns in the problem, such as whether it involves searching, sorting, or graph traversal. This will help you determine which data structures and algorithms might be useful in solving the problem. Drawing from your experience with similar problems can also provide valuable insights.\n\n## 3. Develop a plan\n\nBefore writing any code, outline a high-level plan for solving the problem. This may include steps such as parsing the input, iterating through data, applying algorithms, and generating output. Discuss your plan with the interviewer to ensure it's on the right track and to receive any necessary feedback.\n\n## 4. Choose the right data structures\n\nSelect appropriate data structures for your solution, considering factors such as time and space complexity, ease of implementation, and readability. Choosing the right data structures can significantly impact the efficiency and effectiveness of your solution.\n\n## 5. Write clean and efficient code\n\nWhen implementing your solution, focus on writing clean and efficient code. Use meaningful variable names, follow consistent indentation and formatting, and include comments to explain your logic. Optimize your code by eliminating redundant operations, minimizing nested loops, and using efficient algorithms.\n\n## 6. Test and debug your solution\n\nAfter implementing your solution, test it using a variety of test cases, including edge cases and common scenarios. This will help you identify any errors or inefficiencies in your code. When debugging, use a systematic approach to narrow down the source of the issue and apply targeted fixes.\n\n## 7. Optimize and iterate\n\nContinuously look for opportunities to optimize your solution, whether it's improving time complexity, reducing space usage, or enhancing code readability. Discuss trade-offs with the interviewer and seek their input on potential optimizations.\n\n## 8. Practice time management\n\nDevelop a sense of pacing during your interviews, allowing enough time for each stage of the problem-solving process. This may involve allocating time for understanding the problem, developing a plan, writing code, and testing your solution.\n\n## 9. Communicate effectively\n\nThroughout the interview, maintain open communication with the interviewer. Explain your thought process, discuss your plan, and ask for feedback. Effective communication not only demonstrates your problem-solving approach but also showcases your ability to collaborate and articulate your ideas.\n\nBy optimizing your problem-solving approach and practicing these strategies, you'll be better equipped to tackle a wide range of problems during Google software interviews and demonstrate your ability to develop efficient and effective solutions.\n","slug":"en/working-at-google-optimize-your-problem-solving","published":1,"updated":"2023-07-17T22:47:10.537Z","comments":0,"layout":"post","photos":[],"link":"2023/03/26/en/working-at-google-optimize-your-problem-solving","_id":"clnwi7gb2000nqbt29fvsdc7e","content":"<p>Optimizing your problem-solving approach is essential to succeed in technical interviews, as it allows you to tackle problems more efficiently and effectively. Here are some strategies to help you optimize your approach:</p>\n<h2 id=\"1.-understand-the-problem\">1. Understand the problem<a title=\"#1.-understand-the-problem\" href=\"#1.-understand-the-problem\"></a></h2>\n<p>Before diving into writing code, take the time to thoroughly understand the problem statement, including the input format, constraints, and expected output. Ask the interviewer any clarifying questions to ensure you fully grasp the problem requirements.</p>\n<h2 id=\"2.-identify-patterns-and-techniques\">2. Identify patterns and techniques<a title=\"#2.-identify-patterns-and-techniques\" href=\"#2.-identify-patterns-and-techniques\"></a></h2>\n<p>Recognize common patterns in the problem, such as whether it involves searching, sorting, or graph traversal. This will help you determine which data structures and algorithms might be useful in solving the problem. Drawing from your experience with similar problems can also provide valuable insights.</p>\n<h2 id=\"3.-develop-a-plan\">3. Develop a plan<a title=\"#3.-develop-a-plan\" href=\"#3.-develop-a-plan\"></a></h2>\n<p>Before writing any code, outline a high-level plan for solving the problem. This may include steps such as parsing the input, iterating through data, applying algorithms, and generating output. Discuss your plan with the interviewer to ensure it’s on the right track and to receive any necessary feedback.</p>\n<h2 id=\"4.-choose-the-right-data-structures\">4. Choose the right data structures<a title=\"#4.-choose-the-right-data-structures\" href=\"#4.-choose-the-right-data-structures\"></a></h2>\n<p>Select appropriate data structures for your solution, considering factors such as time and space complexity, ease of implementation, and readability. Choosing the right data structures can significantly impact the efficiency and effectiveness of your solution.</p>\n<h2 id=\"5.-write-clean-and-efficient-code\">5. Write clean and efficient code<a title=\"#5.-write-clean-and-efficient-code\" href=\"#5.-write-clean-and-efficient-code\"></a></h2>\n<p>When implementing your solution, focus on writing clean and efficient code. Use meaningful variable names, follow consistent indentation and formatting, and include comments to explain your logic. Optimize your code by eliminating redundant operations, minimizing nested loops, and using efficient algorithms.</p>\n<h2 id=\"6.-test-and-debug-your-solution\">6. Test and debug your solution<a title=\"#6.-test-and-debug-your-solution\" href=\"#6.-test-and-debug-your-solution\"></a></h2>\n<p>After implementing your solution, test it using a variety of test cases, including edge cases and common scenarios. This will help you identify any errors or inefficiencies in your code. When debugging, use a systematic approach to narrow down the source of the issue and apply targeted fixes.</p>\n<h2 id=\"7.-optimize-and-iterate\">7. Optimize and iterate<a title=\"#7.-optimize-and-iterate\" href=\"#7.-optimize-and-iterate\"></a></h2>\n<p>Continuously look for opportunities to optimize your solution, whether it’s improving time complexity, reducing space usage, or enhancing code readability. Discuss trade-offs with the interviewer and seek their input on potential optimizations.</p>\n<h2 id=\"8.-practice-time-management\">8. Practice time management<a title=\"#8.-practice-time-management\" href=\"#8.-practice-time-management\"></a></h2>\n<p>Develop a sense of pacing during your interviews, allowing enough time for each stage of the problem-solving process. This may involve allocating time for understanding the problem, developing a plan, writing code, and testing your solution.</p>\n<h2 id=\"9.-communicate-effectively\">9. Communicate effectively<a title=\"#9.-communicate-effectively\" href=\"#9.-communicate-effectively\"></a></h2>\n<p>Throughout the interview, maintain open communication with the interviewer. Explain your thought process, discuss your plan, and ask for feedback. Effective communication not only demonstrates your problem-solving approach but also showcases your ability to collaborate and articulate your ideas.</p>\n<p>By optimizing your problem-solving approach and practicing these strategies, you’ll be better equipped to tackle a wide range of problems during Google software interviews and demonstrate your ability to develop efficient and effective solutions.</p>\n","site":{"data":{}},"more":"<p>Optimizing your problem-solving approach is essential to succeed in technical interviews, as it allows you to tackle problems more efficiently and effectively. Here are some strategies to help you optimize your approach:</p>\n<h2 id=\"1.-understand-the-problem\">1. Understand the problem<a title=\"#1.-understand-the-problem\" href=\"#1.-understand-the-problem\"></a></h2>\n<p>Before diving into writing code, take the time to thoroughly understand the problem statement, including the input format, constraints, and expected output. Ask the interviewer any clarifying questions to ensure you fully grasp the problem requirements.</p>\n<h2 id=\"2.-identify-patterns-and-techniques\">2. Identify patterns and techniques<a title=\"#2.-identify-patterns-and-techniques\" href=\"#2.-identify-patterns-and-techniques\"></a></h2>\n<p>Recognize common patterns in the problem, such as whether it involves searching, sorting, or graph traversal. This will help you determine which data structures and algorithms might be useful in solving the problem. Drawing from your experience with similar problems can also provide valuable insights.</p>\n<h2 id=\"3.-develop-a-plan\">3. Develop a plan<a title=\"#3.-develop-a-plan\" href=\"#3.-develop-a-plan\"></a></h2>\n<p>Before writing any code, outline a high-level plan for solving the problem. This may include steps such as parsing the input, iterating through data, applying algorithms, and generating output. Discuss your plan with the interviewer to ensure it’s on the right track and to receive any necessary feedback.</p>\n<h2 id=\"4.-choose-the-right-data-structures\">4. Choose the right data structures<a title=\"#4.-choose-the-right-data-structures\" href=\"#4.-choose-the-right-data-structures\"></a></h2>\n<p>Select appropriate data structures for your solution, considering factors such as time and space complexity, ease of implementation, and readability. Choosing the right data structures can significantly impact the efficiency and effectiveness of your solution.</p>\n<h2 id=\"5.-write-clean-and-efficient-code\">5. Write clean and efficient code<a title=\"#5.-write-clean-and-efficient-code\" href=\"#5.-write-clean-and-efficient-code\"></a></h2>\n<p>When implementing your solution, focus on writing clean and efficient code. Use meaningful variable names, follow consistent indentation and formatting, and include comments to explain your logic. Optimize your code by eliminating redundant operations, minimizing nested loops, and using efficient algorithms.</p>\n<h2 id=\"6.-test-and-debug-your-solution\">6. Test and debug your solution<a title=\"#6.-test-and-debug-your-solution\" href=\"#6.-test-and-debug-your-solution\"></a></h2>\n<p>After implementing your solution, test it using a variety of test cases, including edge cases and common scenarios. This will help you identify any errors or inefficiencies in your code. When debugging, use a systematic approach to narrow down the source of the issue and apply targeted fixes.</p>\n<h2 id=\"7.-optimize-and-iterate\">7. Optimize and iterate<a title=\"#7.-optimize-and-iterate\" href=\"#7.-optimize-and-iterate\"></a></h2>\n<p>Continuously look for opportunities to optimize your solution, whether it’s improving time complexity, reducing space usage, or enhancing code readability. Discuss trade-offs with the interviewer and seek their input on potential optimizations.</p>\n<h2 id=\"8.-practice-time-management\">8. Practice time management<a title=\"#8.-practice-time-management\" href=\"#8.-practice-time-management\"></a></h2>\n<p>Develop a sense of pacing during your interviews, allowing enough time for each stage of the problem-solving process. This may involve allocating time for understanding the problem, developing a plan, writing code, and testing your solution.</p>\n<h2 id=\"9.-communicate-effectively\">9. Communicate effectively<a title=\"#9.-communicate-effectively\" href=\"#9.-communicate-effectively\"></a></h2>\n<p>Throughout the interview, maintain open communication with the interviewer. Explain your thought process, discuss your plan, and ask for feedback. Effective communication not only demonstrates your problem-solving approach but also showcases your ability to collaborate and articulate your ideas.</p>\n<p>By optimizing your problem-solving approach and practicing these strategies, you’ll be better equipped to tackle a wide range of problems during Google software interviews and demonstrate your ability to develop efficient and effective solutions.</p>\n","date_formatted":{"ll":"Mar 26, 2023","L":"03/26/2023","MM-DD":"03-26"},"plink":"http://codesandtags.io/blog/2023/03/26/en/working-at-google-optimize-your-problem-solving/","type":"post","toc":[{"id":"1.-understand-the-problem","title":"1. Understand the problem","index":"1"},{"id":"2.-identify-patterns-and-techniques","title":"2. Identify patterns and techniques","index":"2"},{"id":"3.-develop-a-plan","title":"3. Develop a plan","index":"3"},{"id":"4.-choose-the-right-data-structures","title":"4. Choose the right data structures","index":"4"},{"id":"5.-write-clean-and-efficient-code","title":"5. Write clean and efficient code","index":"5"},{"id":"6.-test-and-debug-your-solution","title":"6. Test and debug your solution","index":"6"},{"id":"7.-optimize-and-iterate","title":"7. Optimize and iterate","index":"7"},{"id":"8.-practice-time-management","title":"8. Practice time management","index":"8"},{"id":"9.-communicate-effectively","title":"9. Communicate effectively","index":"9"}],"reading_time":"477 words in 3 min"},{"title":"Working at Google - preparation plan (part 1)","date":"2023-03-25T04:22:35.000Z","excerpt":"Working at Google could be one of the most exciting things in life for Software Engineers, here I have a detailed plan splitted in several articles.","author":"codesandtags","thumbnail":"images/faang-google-thumbnail.jpg","_content":"\nWorking at Google could be one of the most exciting things in life for Software Engineers, here I have a detailed plan splitted in several articles.\n\n## Understand the interview process:\n\nGoogle's software interview process typically\nconsists of multiple stages, such as an initial phone screen, technical interviews, and a final on-site interview. Familiarize yourself with the expectations at each stage.\n\n## Review the fundamentals:\n\nThoroughly review computer science fundamentals, including data structures (arrays, lists, stacks, queues, trees, graphs, hash tables), algorithms (searching, sorting, recursion, dynamic programming, graph traversal), and complexity analysis (Big-O notation).\n\n## Study Google-specific topics:\n\nGoogle often places a high emphasis on topics like distributed systems, large-scale system design, and machine learning. Be prepared to discuss these topics at a high level and understand key concepts.\n\n## LeetCode and other online resources:\n\nPractice coding problems on platforms like LeetCode, HackerRank, or CodeSignal. Focus on problems related to Google's interview topics, and try to solve problems of varying difficulty levels (easy, medium, and hard).\n\n## Optimize your problem-solving approach:\n\nImprove your problem-solving skills by following a structured approach:\na. Understand the problem and ask clarifying questions.\nb. Come up with test cases and edge cases.\nc. Design an initial solution, discussing trade-offs and optimizations.\nd. Write clean, efficient code while explaining your thought process.\ne. Test your code with the provided test cases and edge cases.\nf. Analyze the time and space complexity of your solution.\n\n## Practice behavioral questions:\n\nPrepare for behavioral questions related to teamwork, conflict resolution, problem-solving, and communication skills. Use the STAR (Situation, Task, Action, Result) technique to structure your answers.\n\n## Mock interviews:\n\nParticipate in mock interviews with friends, peers, or online platforms like Pramp or Interviewing.io. This will help you get comfortable with the interview format, time constraints, and pressure.\n\n## Optimize your resume:\n\nTailor your resume to highlight relevant skills and experiences, focusing on software development accomplishments, programming languages, and any Google-specific knowledge.\n\n## Network and referrals:\n\nConnect with current or former Google employees to learn more about the interview process, gain insights, and possibly obtain a referral, which can help get your foot in the door.\n\n## Stay up-to-date with the tech industry:\n\nKeep up with the latest trends in software development, programming languages, and frameworks, as Google is known for its innovative and cutting-edge approach.\n\n## Stay persistent and learn from your experiences:\n\nThe Google interview process can be challenging, and not everyone passes on their first attempt. Learn from your experiences, iterate on your approach, and keep working towards your goal.\n\nBy following this strategy, you can improve your chances of passing Google's software interviews and potentially land a position at the company.\n\n![space](images/working-at-google-preparation-plan-hero.jpg)\n","source":"_posts/en/working-at-google-preparation-plan.md","raw":"---\ntitle: Working at Google - preparation plan (part 1)\ndate: 2023-03-25 00:22:35\ntags: [google, software, interview]\nexcerpt: Working at Google could be one of the most exciting things in life for Software Engineers, here I have a detailed plan splitted in several articles.\nauthor: codesandtags\ncategory: FAANG\nthumbnail: images/faang-google-thumbnail.jpg\n---\n\nWorking at Google could be one of the most exciting things in life for Software Engineers, here I have a detailed plan splitted in several articles.\n\n## Understand the interview process:\n\nGoogle's software interview process typically\nconsists of multiple stages, such as an initial phone screen, technical interviews, and a final on-site interview. Familiarize yourself with the expectations at each stage.\n\n## Review the fundamentals:\n\nThoroughly review computer science fundamentals, including data structures (arrays, lists, stacks, queues, trees, graphs, hash tables), algorithms (searching, sorting, recursion, dynamic programming, graph traversal), and complexity analysis (Big-O notation).\n\n## Study Google-specific topics:\n\nGoogle often places a high emphasis on topics like distributed systems, large-scale system design, and machine learning. Be prepared to discuss these topics at a high level and understand key concepts.\n\n## LeetCode and other online resources:\n\nPractice coding problems on platforms like LeetCode, HackerRank, or CodeSignal. Focus on problems related to Google's interview topics, and try to solve problems of varying difficulty levels (easy, medium, and hard).\n\n## Optimize your problem-solving approach:\n\nImprove your problem-solving skills by following a structured approach:\na. Understand the problem and ask clarifying questions.\nb. Come up with test cases and edge cases.\nc. Design an initial solution, discussing trade-offs and optimizations.\nd. Write clean, efficient code while explaining your thought process.\ne. Test your code with the provided test cases and edge cases.\nf. Analyze the time and space complexity of your solution.\n\n## Practice behavioral questions:\n\nPrepare for behavioral questions related to teamwork, conflict resolution, problem-solving, and communication skills. Use the STAR (Situation, Task, Action, Result) technique to structure your answers.\n\n## Mock interviews:\n\nParticipate in mock interviews with friends, peers, or online platforms like Pramp or Interviewing.io. This will help you get comfortable with the interview format, time constraints, and pressure.\n\n## Optimize your resume:\n\nTailor your resume to highlight relevant skills and experiences, focusing on software development accomplishments, programming languages, and any Google-specific knowledge.\n\n## Network and referrals:\n\nConnect with current or former Google employees to learn more about the interview process, gain insights, and possibly obtain a referral, which can help get your foot in the door.\n\n## Stay up-to-date with the tech industry:\n\nKeep up with the latest trends in software development, programming languages, and frameworks, as Google is known for its innovative and cutting-edge approach.\n\n## Stay persistent and learn from your experiences:\n\nThe Google interview process can be challenging, and not everyone passes on their first attempt. Learn from your experiences, iterate on your approach, and keep working towards your goal.\n\nBy following this strategy, you can improve your chances of passing Google's software interviews and potentially land a position at the company.\n\n![space](images/working-at-google-preparation-plan-hero.jpg)\n","slug":"en/working-at-google-preparation-plan","published":1,"updated":"2023-07-17T22:47:10.537Z","comments":0,"layout":"post","photos":[],"link":"2023/03/25/en/working-at-google-preparation-plan","_id":"clnwi7gb3000pqbt2c83o122j","content":"<p>Working at Google could be one of the most exciting things in life for Software Engineers, here I have a detailed plan splitted in several articles.</p>\n<h2 id=\"understand-the-interview-process:\">Understand the interview process:<a title=\"#understand-the-interview-process:\" href=\"#understand-the-interview-process:\"></a></h2>\n<p>Google’s software interview process typically<br>\nconsists of multiple stages, such as an initial phone screen, technical interviews, and a final on-site interview. Familiarize yourself with the expectations at each stage.</p>\n<h2 id=\"review-the-fundamentals:\">Review the fundamentals:<a title=\"#review-the-fundamentals:\" href=\"#review-the-fundamentals:\"></a></h2>\n<p>Thoroughly review computer science fundamentals, including data structures (arrays, lists, stacks, queues, trees, graphs, hash tables), algorithms (searching, sorting, recursion, dynamic programming, graph traversal), and complexity analysis (Big-O notation).</p>\n<h2 id=\"study-google-specific-topics:\">Study Google-specific topics:<a title=\"#study-google-specific-topics:\" href=\"#study-google-specific-topics:\"></a></h2>\n<p>Google often places a high emphasis on topics like distributed systems, large-scale system design, and machine learning. Be prepared to discuss these topics at a high level and understand key concepts.</p>\n<h2 id=\"leetcode-and-other-online-resources:\">LeetCode and other online resources:<a title=\"#leetcode-and-other-online-resources:\" href=\"#leetcode-and-other-online-resources:\"></a></h2>\n<p>Practice coding problems on platforms like LeetCode, HackerRank, or CodeSignal. Focus on problems related to Google’s interview topics, and try to solve problems of varying difficulty levels (easy, medium, and hard).</p>\n<h2 id=\"optimize-your-problem-solving-approach:\">Optimize your problem-solving approach:<a title=\"#optimize-your-problem-solving-approach:\" href=\"#optimize-your-problem-solving-approach:\"></a></h2>\n<p>Improve your problem-solving skills by following a structured approach:<br>\na. Understand the problem and ask clarifying questions.<br>\nb. Come up with test cases and edge cases.<br>\nc. Design an initial solution, discussing trade-offs and optimizations.<br>\nd. Write clean, efficient code while explaining your thought process.<br>\ne. Test your code with the provided test cases and edge cases.<br>\nf. Analyze the time and space complexity of your solution.</p>\n<h2 id=\"practice-behavioral-questions:\">Practice behavioral questions:<a title=\"#practice-behavioral-questions:\" href=\"#practice-behavioral-questions:\"></a></h2>\n<p>Prepare for behavioral questions related to teamwork, conflict resolution, problem-solving, and communication skills. Use the STAR (Situation, Task, Action, Result) technique to structure your answers.</p>\n<h2 id=\"mock-interviews:\">Mock interviews:<a title=\"#mock-interviews:\" href=\"#mock-interviews:\"></a></h2>\n<p>Participate in mock interviews with friends, peers, or online platforms like Pramp or <a href=\"http://Interviewing.io\">Interviewing.io</a>. This will help you get comfortable with the interview format, time constraints, and pressure.</p>\n<h2 id=\"optimize-your-resume:\">Optimize your resume:<a title=\"#optimize-your-resume:\" href=\"#optimize-your-resume:\"></a></h2>\n<p>Tailor your resume to highlight relevant skills and experiences, focusing on software development accomplishments, programming languages, and any Google-specific knowledge.</p>\n<h2 id=\"network-and-referrals:\">Network and referrals:<a title=\"#network-and-referrals:\" href=\"#network-and-referrals:\"></a></h2>\n<p>Connect with current or former Google employees to learn more about the interview process, gain insights, and possibly obtain a referral, which can help get your foot in the door.</p>\n<h2 id=\"stay-up-to-date-with-the-tech-industry:\">Stay up-to-date with the tech industry:<a title=\"#stay-up-to-date-with-the-tech-industry:\" href=\"#stay-up-to-date-with-the-tech-industry:\"></a></h2>\n<p>Keep up with the latest trends in software development, programming languages, and frameworks, as Google is known for its innovative and cutting-edge approach.</p>\n<h2 id=\"stay-persistent-and-learn-from-your-experiences:\">Stay persistent and learn from your experiences:<a title=\"#stay-persistent-and-learn-from-your-experiences:\" href=\"#stay-persistent-and-learn-from-your-experiences:\"></a></h2>\n<p>The Google interview process can be challenging, and not everyone passes on their first attempt. Learn from your experiences, iterate on your approach, and keep working towards your goal.</p>\n<p>By following this strategy, you can improve your chances of passing Google’s software interviews and potentially land a position at the company.</p>\n<p><img src=\"images/working-at-google-preparation-plan-hero.jpg\" alt=\"space\" loading=\"lazy\" class=\"φbp\"></p>\n","site":{"data":{}},"more":"<p>Working at Google could be one of the most exciting things in life for Software Engineers, here I have a detailed plan splitted in several articles.</p>\n<h2 id=\"understand-the-interview-process:\">Understand the interview process:<a title=\"#understand-the-interview-process:\" href=\"#understand-the-interview-process:\"></a></h2>\n<p>Google’s software interview process typically<br>\nconsists of multiple stages, such as an initial phone screen, technical interviews, and a final on-site interview. Familiarize yourself with the expectations at each stage.</p>\n<h2 id=\"review-the-fundamentals:\">Review the fundamentals:<a title=\"#review-the-fundamentals:\" href=\"#review-the-fundamentals:\"></a></h2>\n<p>Thoroughly review computer science fundamentals, including data structures (arrays, lists, stacks, queues, trees, graphs, hash tables), algorithms (searching, sorting, recursion, dynamic programming, graph traversal), and complexity analysis (Big-O notation).</p>\n<h2 id=\"study-google-specific-topics:\">Study Google-specific topics:<a title=\"#study-google-specific-topics:\" href=\"#study-google-specific-topics:\"></a></h2>\n<p>Google often places a high emphasis on topics like distributed systems, large-scale system design, and machine learning. Be prepared to discuss these topics at a high level and understand key concepts.</p>\n<h2 id=\"leetcode-and-other-online-resources:\">LeetCode and other online resources:<a title=\"#leetcode-and-other-online-resources:\" href=\"#leetcode-and-other-online-resources:\"></a></h2>\n<p>Practice coding problems on platforms like LeetCode, HackerRank, or CodeSignal. Focus on problems related to Google’s interview topics, and try to solve problems of varying difficulty levels (easy, medium, and hard).</p>\n<h2 id=\"optimize-your-problem-solving-approach:\">Optimize your problem-solving approach:<a title=\"#optimize-your-problem-solving-approach:\" href=\"#optimize-your-problem-solving-approach:\"></a></h2>\n<p>Improve your problem-solving skills by following a structured approach:<br>\na. Understand the problem and ask clarifying questions.<br>\nb. Come up with test cases and edge cases.<br>\nc. Design an initial solution, discussing trade-offs and optimizations.<br>\nd. Write clean, efficient code while explaining your thought process.<br>\ne. Test your code with the provided test cases and edge cases.<br>\nf. Analyze the time and space complexity of your solution.</p>\n<h2 id=\"practice-behavioral-questions:\">Practice behavioral questions:<a title=\"#practice-behavioral-questions:\" href=\"#practice-behavioral-questions:\"></a></h2>\n<p>Prepare for behavioral questions related to teamwork, conflict resolution, problem-solving, and communication skills. Use the STAR (Situation, Task, Action, Result) technique to structure your answers.</p>\n<h2 id=\"mock-interviews:\">Mock interviews:<a title=\"#mock-interviews:\" href=\"#mock-interviews:\"></a></h2>\n<p>Participate in mock interviews with friends, peers, or online platforms like Pramp or <a href=\"http://Interviewing.io\">Interviewing.io</a>. This will help you get comfortable with the interview format, time constraints, and pressure.</p>\n<h2 id=\"optimize-your-resume:\">Optimize your resume:<a title=\"#optimize-your-resume:\" href=\"#optimize-your-resume:\"></a></h2>\n<p>Tailor your resume to highlight relevant skills and experiences, focusing on software development accomplishments, programming languages, and any Google-specific knowledge.</p>\n<h2 id=\"network-and-referrals:\">Network and referrals:<a title=\"#network-and-referrals:\" href=\"#network-and-referrals:\"></a></h2>\n<p>Connect with current or former Google employees to learn more about the interview process, gain insights, and possibly obtain a referral, which can help get your foot in the door.</p>\n<h2 id=\"stay-up-to-date-with-the-tech-industry:\">Stay up-to-date with the tech industry:<a title=\"#stay-up-to-date-with-the-tech-industry:\" href=\"#stay-up-to-date-with-the-tech-industry:\"></a></h2>\n<p>Keep up with the latest trends in software development, programming languages, and frameworks, as Google is known for its innovative and cutting-edge approach.</p>\n<h2 id=\"stay-persistent-and-learn-from-your-experiences:\">Stay persistent and learn from your experiences:<a title=\"#stay-persistent-and-learn-from-your-experiences:\" href=\"#stay-persistent-and-learn-from-your-experiences:\"></a></h2>\n<p>The Google interview process can be challenging, and not everyone passes on their first attempt. Learn from your experiences, iterate on your approach, and keep working towards your goal.</p>\n<p>By following this strategy, you can improve your chances of passing Google’s software interviews and potentially land a position at the company.</p>\n<p><img src=\"images/working-at-google-preparation-plan-hero.jpg\" alt=\"space\" loading=\"lazy\" class=\"φbp\"></p>\n","date_formatted":{"ll":"Mar 25, 2023","L":"03/25/2023","MM-DD":"03-25"},"plink":"http://codesandtags.io/blog/2023/03/25/en/working-at-google-preparation-plan/","type":"post","toc":[{"id":"understand-the-interview-process:","title":"Understand the interview process:","index":"1"},{"id":"review-the-fundamentals:","title":"Review the fundamentals:","index":"2"},{"id":"study-google-specific-topics:","title":"Study Google-specific topics:","index":"3"},{"id":"leetcode-and-other-online-resources:","title":"LeetCode and other online resources:","index":"4"},{"id":"optimize-your-problem-solving-approach:","title":"Optimize your problem-solving approach:","index":"5"},{"id":"practice-behavioral-questions:","title":"Practice behavioral questions:","index":"6"},{"id":"mock-interviews:","title":"Mock interviews:","index":"7"},{"id":"optimize-your-resume:","title":"Optimize your resume:","index":"8"},{"id":"network-and-referrals:","title":"Network and referrals:","index":"9"},{"id":"stay-up-to-date-with-the-tech-industry:","title":"Stay up-to-date with the tech industry:","index":"10"},{"id":"stay-persistent-and-learn-from-your-experiences:","title":"Stay persistent and learn from your experiences:","index":"11"}],"reading_time":"459 words in 3 min"},{"title":"Working at Google - Study Google-Specific topics (part 4)","date":"2023-03-25T15:35:14.000Z","excerpt":"Reviewing the fundamentals is crucial for preparing for Google software interviews, as they form the foundation of your problem-solving skills.","author":"codesandtags","thumbnail":"images/faang-google-thumbnail.jpg","_content":"\nGoogle is known for its focus on large-scale systems, cutting-edge technologies, and innovative solutions. To prepare for Google software interviews, it's essential to study topics that are particularly relevant to the company. Here are some Google-specific topics you should familiarize yourself with:\n\n## Distributed systems:\n\nUnderstand the fundamental concepts and challenges associated with designing and implementing distributed systems, including:\n\n- Consistency models (e.g., eventual, strong, linearizability, sequential)\n- CAP theorem (Consistency, Availability, and Partition Tolerance)\n- Fault tolerance and replication (e.g., quorum, active/passive, active/active)\n- Scalability (e.g., horizontal, vertical, load balancing, sharding)\n- Data partitioning and sharding strategies\n- Messaging and communication patterns (e.g., publish-subscribe, message queues)\n- Consensus algorithms (e.g., Paxos, Raft)\n\n## Large-scale system design:\n\nDevelop the ability to design scalable and robust systems that can handle massive amounts of data and high levels of traffic. Key aspects to consider include:\n\n- Availability and reliability\n- Latency and performance optimization\n- Caching strategies (e.g., content delivery networks, cache eviction policies)\n- Data storage and retrieval (e.g., distributed databases, key-value stores)\n- Microservices architecture and API design\n- Monitoring, logging, and alerting\n\n## Google's infrastructure and technologies:\n\nFamiliarize yourself with Google's infrastructure and some of the technologies the company has developed, such as:\n\n- Bigtable (a distributed storage system for structured data)\n- Spanner (a globally-distributed, strongly consistent database)\n- MapReduce (a programming model for processing large datasets)\n- TensorFlow (an open-source machine learning framework)\n- Kubernetes (an open-source container orchestration system)\n- gRPC (a high-performance, open-source RPC framework)\n\n## Machine learning:\n\nGoogle is a leader in machine learning and artificial intelligence. While you may not be required to have in-depth knowledge unless you're applying for a specific machine learning role, it's helpful to understand basic concepts, such as:\n\n- Supervised, unsupervised, and reinforcement learning\n- Common algorithms (e.g., linear regression, logistic regression, decision trees, - k-means clustering, neural networks)\n- Feature engineering and feature selection\n- Model evaluation metrics (e.g., accuracy, precision, recall, F1-score)\n- Overfitting, underfitting, and regularization techniques\n- Deep learning and convolutional neural networks (CNNs)\n\nBy studying these Google-specific topics and understanding their relevance to the company's products and services, you will be better prepared for the interview process and demonstrate your alignment with Google's technology focus.\n\n## Timeline\n\n#### Week 1: Google's Culture and Values\n\nCompany history\nMission and vision\nCompany culture\nGoogle's values and principles\n\n#### Week 2: Google's Products and Services\n\nSearch Engine\nAndroid\nGoogle Cloud Platform\nG Suite (Google Workspace)\nGoogle Ads\n\n#### Week 3: Google's Software Engineering Practices\n\nCode review process\nTesting practices\nContinuous integration and deployment\nGoogle's programming languages (C++, Java, Python, Go, etc.)\n\n#### Week 4: Google's System Design and Infrastructure\n\nGoogle File System\nBigtable\nMapReduce\nSpanner\nTensorFlow\n\n#### Week 5: Google's Algorithms and Data Structures\n\nPageRank\nMapReduce Algorithms\nNeural Networks\nSearch Algorithms\n\n#### Week 6: Google's Interview Process and Tips\n\nResearch on Google's interview process\nBehavioral interview preparation\nTechnical interview preparation\nTips from Google engineers\n\n#### Week 7: Coding Challenges and Mock Interviews\n\nSolve Google-specific coding problems\nParticipate in mock interviews with a focus on Google's interview style\n\n#### Week 8: Review and Practice\n\nRevisit difficult topics\nContinue practicing coding problems related to Google-specific concepts\nAdditional mock interviews with a focus on Google's interview process\n\n![space](images/working-at-google-study-google-specifc-topics-hero.jpg)\n","source":"_posts/en/working-at-google-study-google-specifc-topics.md","raw":"---\ntitle: Working at Google - Study Google-Specific topics (part 4)\ndate: 2023-03-25 11:35:14\ntags: [google, software, interview]\nexcerpt: Reviewing the fundamentals is crucial for preparing for Google software interviews, as they form the foundation of your problem-solving skills.\nauthor: codesandtags\ncategory: FAANG\nthumbnail: images/faang-google-thumbnail.jpg\n---\n\nGoogle is known for its focus on large-scale systems, cutting-edge technologies, and innovative solutions. To prepare for Google software interviews, it's essential to study topics that are particularly relevant to the company. Here are some Google-specific topics you should familiarize yourself with:\n\n## Distributed systems:\n\nUnderstand the fundamental concepts and challenges associated with designing and implementing distributed systems, including:\n\n- Consistency models (e.g., eventual, strong, linearizability, sequential)\n- CAP theorem (Consistency, Availability, and Partition Tolerance)\n- Fault tolerance and replication (e.g., quorum, active/passive, active/active)\n- Scalability (e.g., horizontal, vertical, load balancing, sharding)\n- Data partitioning and sharding strategies\n- Messaging and communication patterns (e.g., publish-subscribe, message queues)\n- Consensus algorithms (e.g., Paxos, Raft)\n\n## Large-scale system design:\n\nDevelop the ability to design scalable and robust systems that can handle massive amounts of data and high levels of traffic. Key aspects to consider include:\n\n- Availability and reliability\n- Latency and performance optimization\n- Caching strategies (e.g., content delivery networks, cache eviction policies)\n- Data storage and retrieval (e.g., distributed databases, key-value stores)\n- Microservices architecture and API design\n- Monitoring, logging, and alerting\n\n## Google's infrastructure and technologies:\n\nFamiliarize yourself with Google's infrastructure and some of the technologies the company has developed, such as:\n\n- Bigtable (a distributed storage system for structured data)\n- Spanner (a globally-distributed, strongly consistent database)\n- MapReduce (a programming model for processing large datasets)\n- TensorFlow (an open-source machine learning framework)\n- Kubernetes (an open-source container orchestration system)\n- gRPC (a high-performance, open-source RPC framework)\n\n## Machine learning:\n\nGoogle is a leader in machine learning and artificial intelligence. While you may not be required to have in-depth knowledge unless you're applying for a specific machine learning role, it's helpful to understand basic concepts, such as:\n\n- Supervised, unsupervised, and reinforcement learning\n- Common algorithms (e.g., linear regression, logistic regression, decision trees, - k-means clustering, neural networks)\n- Feature engineering and feature selection\n- Model evaluation metrics (e.g., accuracy, precision, recall, F1-score)\n- Overfitting, underfitting, and regularization techniques\n- Deep learning and convolutional neural networks (CNNs)\n\nBy studying these Google-specific topics and understanding their relevance to the company's products and services, you will be better prepared for the interview process and demonstrate your alignment with Google's technology focus.\n\n## Timeline\n\n#### Week 1: Google's Culture and Values\n\nCompany history\nMission and vision\nCompany culture\nGoogle's values and principles\n\n#### Week 2: Google's Products and Services\n\nSearch Engine\nAndroid\nGoogle Cloud Platform\nG Suite (Google Workspace)\nGoogle Ads\n\n#### Week 3: Google's Software Engineering Practices\n\nCode review process\nTesting practices\nContinuous integration and deployment\nGoogle's programming languages (C++, Java, Python, Go, etc.)\n\n#### Week 4: Google's System Design and Infrastructure\n\nGoogle File System\nBigtable\nMapReduce\nSpanner\nTensorFlow\n\n#### Week 5: Google's Algorithms and Data Structures\n\nPageRank\nMapReduce Algorithms\nNeural Networks\nSearch Algorithms\n\n#### Week 6: Google's Interview Process and Tips\n\nResearch on Google's interview process\nBehavioral interview preparation\nTechnical interview preparation\nTips from Google engineers\n\n#### Week 7: Coding Challenges and Mock Interviews\n\nSolve Google-specific coding problems\nParticipate in mock interviews with a focus on Google's interview style\n\n#### Week 8: Review and Practice\n\nRevisit difficult topics\nContinue practicing coding problems related to Google-specific concepts\nAdditional mock interviews with a focus on Google's interview process\n\n![space](images/working-at-google-study-google-specifc-topics-hero.jpg)\n","slug":"en/working-at-google-study-google-specifc-topics","published":1,"updated":"2023-07-17T22:47:10.537Z","comments":0,"layout":"post","photos":[],"link":"2023/03/25/en/working-at-google-study-google-specifc-topics","_id":"clnwi7gb5000tqbt2h5293mxs","content":"<p>Google is known for its focus on large-scale systems, cutting-edge technologies, and innovative solutions. To prepare for Google software interviews, it’s essential to study topics that are particularly relevant to the company. Here are some Google-specific topics you should familiarize yourself with:</p>\n<h2 id=\"distributed-systems:\">Distributed systems:<a title=\"#distributed-systems:\" href=\"#distributed-systems:\"></a></h2>\n<p>Understand the fundamental concepts and challenges associated with designing and implementing distributed systems, including:</p>\n<ul>\n<li>Consistency models (e.g., eventual, strong, linearizability, sequential)</li>\n<li>CAP theorem (Consistency, Availability, and Partition Tolerance)</li>\n<li>Fault tolerance and replication (e.g., quorum, active/passive, active/active)</li>\n<li>Scalability (e.g., horizontal, vertical, load balancing, sharding)</li>\n<li>Data partitioning and sharding strategies</li>\n<li>Messaging and communication patterns (e.g., publish-subscribe, message queues)</li>\n<li>Consensus algorithms (e.g., Paxos, Raft)</li>\n</ul>\n<h2 id=\"large-scale-system-design:\">Large-scale system design:<a title=\"#large-scale-system-design:\" href=\"#large-scale-system-design:\"></a></h2>\n<p>Develop the ability to design scalable and robust systems that can handle massive amounts of data and high levels of traffic. Key aspects to consider include:</p>\n<ul>\n<li>Availability and reliability</li>\n<li>Latency and performance optimization</li>\n<li>Caching strategies (e.g., content delivery networks, cache eviction policies)</li>\n<li>Data storage and retrieval (e.g., distributed databases, key-value stores)</li>\n<li>Microservices architecture and API design</li>\n<li>Monitoring, logging, and alerting</li>\n</ul>\n<h2 id=\"google's-infrastructure-and-technologies:\">Google’s infrastructure and technologies:<a title=\"#google's-infrastructure-and-technologies:\" href=\"#google's-infrastructure-and-technologies:\"></a></h2>\n<p>Familiarize yourself with Google’s infrastructure and some of the technologies the company has developed, such as:</p>\n<ul>\n<li>Bigtable (a distributed storage system for structured data)</li>\n<li>Spanner (a globally-distributed, strongly consistent database)</li>\n<li>MapReduce (a programming model for processing large datasets)</li>\n<li>TensorFlow (an open-source machine learning framework)</li>\n<li>Kubernetes (an open-source container orchestration system)</li>\n<li>gRPC (a high-performance, open-source RPC framework)</li>\n</ul>\n<h2 id=\"machine-learning:\">Machine learning:<a title=\"#machine-learning:\" href=\"#machine-learning:\"></a></h2>\n<p>Google is a leader in machine learning and artificial intelligence. While you may not be required to have in-depth knowledge unless you’re applying for a specific machine learning role, it’s helpful to understand basic concepts, such as:</p>\n<ul>\n<li>Supervised, unsupervised, and reinforcement learning</li>\n<li>Common algorithms (e.g., linear regression, logistic regression, decision trees, - k-means clustering, neural networks)</li>\n<li>Feature engineering and feature selection</li>\n<li>Model evaluation metrics (e.g., accuracy, precision, recall, F1-score)</li>\n<li>Overfitting, underfitting, and regularization techniques</li>\n<li>Deep learning and convolutional neural networks (CNNs)</li>\n</ul>\n<p>By studying these Google-specific topics and understanding their relevance to the company’s products and services, you will be better prepared for the interview process and demonstrate your alignment with Google’s technology focus.</p>\n<h2 id=\"timeline\">Timeline<a title=\"#timeline\" href=\"#timeline\"></a></h2>\n<h4 id=\"week-1:-google's-culture-and-values\">Week 1: Google’s Culture and Values<a title=\"#week-1:-google's-culture-and-values\" href=\"#week-1:-google's-culture-and-values\"></a></h4>\n<p>Company history<br>\nMission and vision<br>\nCompany culture<br>\nGoogle’s values and principles</p>\n<h4 id=\"week-2:-google's-products-and-services\">Week 2: Google’s Products and Services<a title=\"#week-2:-google's-products-and-services\" href=\"#week-2:-google's-products-and-services\"></a></h4>\n<p>Search Engine<br>\nAndroid<br>\nGoogle Cloud Platform<br>\nG Suite (Google Workspace)<br>\nGoogle Ads</p>\n<h4 id=\"week-3:-google's-software-engineering-practices\">Week 3: Google’s Software Engineering Practices<a title=\"#week-3:-google's-software-engineering-practices\" href=\"#week-3:-google's-software-engineering-practices\"></a></h4>\n<p>Code review process<br>\nTesting practices<br>\nContinuous integration and deployment<br>\nGoogle’s programming languages (C++, Java, Python, Go, etc.)</p>\n<h4 id=\"week-4:-google's-system-design-and-infrastructure\">Week 4: Google’s System Design and Infrastructure<a title=\"#week-4:-google's-system-design-and-infrastructure\" href=\"#week-4:-google's-system-design-and-infrastructure\"></a></h4>\n<p>Google File System<br>\nBigtable<br>\nMapReduce<br>\nSpanner<br>\nTensorFlow</p>\n<h4 id=\"week-5:-google's-algorithms-and-data-structures\">Week 5: Google’s Algorithms and Data Structures<a title=\"#week-5:-google's-algorithms-and-data-structures\" href=\"#week-5:-google's-algorithms-and-data-structures\"></a></h4>\n<p>PageRank<br>\nMapReduce Algorithms<br>\nNeural Networks<br>\nSearch Algorithms</p>\n<h4 id=\"week-6:-google's-interview-process-and-tips\">Week 6: Google’s Interview Process and Tips<a title=\"#week-6:-google's-interview-process-and-tips\" href=\"#week-6:-google's-interview-process-and-tips\"></a></h4>\n<p>Research on Google’s interview process<br>\nBehavioral interview preparation<br>\nTechnical interview preparation<br>\nTips from Google engineers</p>\n<h4 id=\"week-7:-coding-challenges-and-mock-interviews\">Week 7: Coding Challenges and Mock Interviews<a title=\"#week-7:-coding-challenges-and-mock-interviews\" href=\"#week-7:-coding-challenges-and-mock-interviews\"></a></h4>\n<p>Solve Google-specific coding problems<br>\nParticipate in mock interviews with a focus on Google’s interview style</p>\n<h4 id=\"week-8:-review-and-practice\">Week 8: Review and Practice<a title=\"#week-8:-review-and-practice\" href=\"#week-8:-review-and-practice\"></a></h4>\n<p>Revisit difficult topics<br>\nContinue practicing coding problems related to Google-specific concepts<br>\nAdditional mock interviews with a focus on Google’s interview process</p>\n<p><img src=\"images/working-at-google-study-google-specifc-topics-hero.jpg\" alt=\"space\" loading=\"lazy\" class=\"φbp\"></p>\n","site":{"data":{}},"more":"<p>Google is known for its focus on large-scale systems, cutting-edge technologies, and innovative solutions. To prepare for Google software interviews, it’s essential to study topics that are particularly relevant to the company. Here are some Google-specific topics you should familiarize yourself with:</p>\n<h2 id=\"distributed-systems:\">Distributed systems:<a title=\"#distributed-systems:\" href=\"#distributed-systems:\"></a></h2>\n<p>Understand the fundamental concepts and challenges associated with designing and implementing distributed systems, including:</p>\n<ul>\n<li>Consistency models (e.g., eventual, strong, linearizability, sequential)</li>\n<li>CAP theorem (Consistency, Availability, and Partition Tolerance)</li>\n<li>Fault tolerance and replication (e.g., quorum, active/passive, active/active)</li>\n<li>Scalability (e.g., horizontal, vertical, load balancing, sharding)</li>\n<li>Data partitioning and sharding strategies</li>\n<li>Messaging and communication patterns (e.g., publish-subscribe, message queues)</li>\n<li>Consensus algorithms (e.g., Paxos, Raft)</li>\n</ul>\n<h2 id=\"large-scale-system-design:\">Large-scale system design:<a title=\"#large-scale-system-design:\" href=\"#large-scale-system-design:\"></a></h2>\n<p>Develop the ability to design scalable and robust systems that can handle massive amounts of data and high levels of traffic. Key aspects to consider include:</p>\n<ul>\n<li>Availability and reliability</li>\n<li>Latency and performance optimization</li>\n<li>Caching strategies (e.g., content delivery networks, cache eviction policies)</li>\n<li>Data storage and retrieval (e.g., distributed databases, key-value stores)</li>\n<li>Microservices architecture and API design</li>\n<li>Monitoring, logging, and alerting</li>\n</ul>\n<h2 id=\"google's-infrastructure-and-technologies:\">Google’s infrastructure and technologies:<a title=\"#google's-infrastructure-and-technologies:\" href=\"#google's-infrastructure-and-technologies:\"></a></h2>\n<p>Familiarize yourself with Google’s infrastructure and some of the technologies the company has developed, such as:</p>\n<ul>\n<li>Bigtable (a distributed storage system for structured data)</li>\n<li>Spanner (a globally-distributed, strongly consistent database)</li>\n<li>MapReduce (a programming model for processing large datasets)</li>\n<li>TensorFlow (an open-source machine learning framework)</li>\n<li>Kubernetes (an open-source container orchestration system)</li>\n<li>gRPC (a high-performance, open-source RPC framework)</li>\n</ul>\n<h2 id=\"machine-learning:\">Machine learning:<a title=\"#machine-learning:\" href=\"#machine-learning:\"></a></h2>\n<p>Google is a leader in machine learning and artificial intelligence. While you may not be required to have in-depth knowledge unless you’re applying for a specific machine learning role, it’s helpful to understand basic concepts, such as:</p>\n<ul>\n<li>Supervised, unsupervised, and reinforcement learning</li>\n<li>Common algorithms (e.g., linear regression, logistic regression, decision trees, - k-means clustering, neural networks)</li>\n<li>Feature engineering and feature selection</li>\n<li>Model evaluation metrics (e.g., accuracy, precision, recall, F1-score)</li>\n<li>Overfitting, underfitting, and regularization techniques</li>\n<li>Deep learning and convolutional neural networks (CNNs)</li>\n</ul>\n<p>By studying these Google-specific topics and understanding their relevance to the company’s products and services, you will be better prepared for the interview process and demonstrate your alignment with Google’s technology focus.</p>\n<h2 id=\"timeline\">Timeline<a title=\"#timeline\" href=\"#timeline\"></a></h2>\n<h4 id=\"week-1:-google's-culture-and-values\">Week 1: Google’s Culture and Values<a title=\"#week-1:-google's-culture-and-values\" href=\"#week-1:-google's-culture-and-values\"></a></h4>\n<p>Company history<br>\nMission and vision<br>\nCompany culture<br>\nGoogle’s values and principles</p>\n<h4 id=\"week-2:-google's-products-and-services\">Week 2: Google’s Products and Services<a title=\"#week-2:-google's-products-and-services\" href=\"#week-2:-google's-products-and-services\"></a></h4>\n<p>Search Engine<br>\nAndroid<br>\nGoogle Cloud Platform<br>\nG Suite (Google Workspace)<br>\nGoogle Ads</p>\n<h4 id=\"week-3:-google's-software-engineering-practices\">Week 3: Google’s Software Engineering Practices<a title=\"#week-3:-google's-software-engineering-practices\" href=\"#week-3:-google's-software-engineering-practices\"></a></h4>\n<p>Code review process<br>\nTesting practices<br>\nContinuous integration and deployment<br>\nGoogle’s programming languages (C++, Java, Python, Go, etc.)</p>\n<h4 id=\"week-4:-google's-system-design-and-infrastructure\">Week 4: Google’s System Design and Infrastructure<a title=\"#week-4:-google's-system-design-and-infrastructure\" href=\"#week-4:-google's-system-design-and-infrastructure\"></a></h4>\n<p>Google File System<br>\nBigtable<br>\nMapReduce<br>\nSpanner<br>\nTensorFlow</p>\n<h4 id=\"week-5:-google's-algorithms-and-data-structures\">Week 5: Google’s Algorithms and Data Structures<a title=\"#week-5:-google's-algorithms-and-data-structures\" href=\"#week-5:-google's-algorithms-and-data-structures\"></a></h4>\n<p>PageRank<br>\nMapReduce Algorithms<br>\nNeural Networks<br>\nSearch Algorithms</p>\n<h4 id=\"week-6:-google's-interview-process-and-tips\">Week 6: Google’s Interview Process and Tips<a title=\"#week-6:-google's-interview-process-and-tips\" href=\"#week-6:-google's-interview-process-and-tips\"></a></h4>\n<p>Research on Google’s interview process<br>\nBehavioral interview preparation<br>\nTechnical interview preparation<br>\nTips from Google engineers</p>\n<h4 id=\"week-7:-coding-challenges-and-mock-interviews\">Week 7: Coding Challenges and Mock Interviews<a title=\"#week-7:-coding-challenges-and-mock-interviews\" href=\"#week-7:-coding-challenges-and-mock-interviews\"></a></h4>\n<p>Solve Google-specific coding problems<br>\nParticipate in mock interviews with a focus on Google’s interview style</p>\n<h4 id=\"week-8:-review-and-practice\">Week 8: Review and Practice<a title=\"#week-8:-review-and-practice\" href=\"#week-8:-review-and-practice\"></a></h4>\n<p>Revisit difficult topics<br>\nContinue practicing coding problems related to Google-specific concepts<br>\nAdditional mock interviews with a focus on Google’s interview process</p>\n<p><img src=\"images/working-at-google-study-google-specifc-topics-hero.jpg\" alt=\"space\" loading=\"lazy\" class=\"φbp\"></p>\n","date_formatted":{"ll":"Mar 25, 2023","L":"03/25/2023","MM-DD":"03-25"},"plink":"http://codesandtags.io/blog/2023/03/25/en/working-at-google-study-google-specifc-topics/","type":"post","toc":[{"id":"distributed-systems:","title":"Distributed systems:","index":"1"},{"id":"large-scale-system-design:","title":"Large-scale system design:","index":"2"},{"id":"google's-infrastructure-and-technologies:","title":"Google’s infrastructure and technologies:","index":"3"},{"id":"machine-learning:","title":"Machine learning:","index":"4"},{"id":"timeline","title":"Timeline","index":"5"}],"reading_time":"556 words in 4 min"},{"title":"Working at Google - Review the fundamentals (part 3)","date":"2023-03-25T15:28:14.000Z","excerpt":"Reviewing the fundamentals is crucial for preparing for Google software interviews, as they form the foundation of your problem-solving skills.","author":"codesandtags","thumbnail":"images/faang-google-thumbnail.jpg","_content":"\nReviewing the fundamentals is crucial for preparing for Google software interviews, as they form the foundation of your problem-solving skills. Here are the key areas you should focus on when reviewing computer science fundamentals:\n\n## Data structures:\n\nEnsure you have a solid understanding of basic data structures and their operations, including:\n\n- Arrays\n- Linked Lists (singly and doubly)\n- Stacks\n- Queues\n- Trees (binary, balanced, AVL, red-black)\n- Graphs (directed, undirected, adjacency matrix, adjacency list)\n- Heaps (min and max)\n- Hash Tables (hash functions, collision resolution techniques)\n\n## Algorithms:\n\nFamiliarize yourself with common algorithms, their use cases, and how to implement them:\n\n- Searching (linear, binary)\n- Sorting (bubble, insertion, selection, merge, quick, radix)\n- Recursion and backtracking (e.g., permutations, combinations, tree traversal)\n- Dynamic programming (e.g., memoization, top-down, bottom-up)\n- Graph traversal (depth-first search, breadth-first search, Dijkstra's, A\\*, Bellman-Ford)\n- Greedy algorithms (e.g., Kruskal's, Prim's, Huffman coding)\n\n## Complexity analysis:\n\nDevelop a strong understanding of time and space complexity, including:\n\n- Big-O, Big-Ω, and Big-Θ notation\n- How to analyze the time and space complexity of an algorithm\n- Understanding the complexity of common operations on various data structures\n- Identifying and optimizing bottlenecks in your code\n\n## Programming languages:\n\nBe proficient in at least one programming language, preferably one that is commonly used at Google, such as Python, Java, Typescript, or C++. You should be comfortable with the syntax, standard libraries, and language-specific data structures and algorithms.\n\n## Object-oriented programming (OOP):\n\nUnderstand OOP concepts, such as inheritance, polymorphism, encapsulation, and abstraction. Be able to design and implement classes, interfaces, and objects in your chosen programming language.\n\n## Operating systems and concurrency:\n\nFamiliarize yourself with basic operating system concepts, such as process management, memory management, file systems, and synchronization primitives (e.g., mutexes, semaphores, locks).\n\n## Networking:\n\nAcquire a basic understanding of networking concepts, such as the OSI model, TCP/IP, sockets, and common network protocols (HTTP, FTP, DNS, etc.).\n\n## Databases:\n\nLearn about relational databases (e.g., SQL, normalization, indexing) and NoSQL databases (e.g., key-value stores, document databases, column stores, graph databases).\nBy reviewing these fundamentals and practicing problems that involve their application, you'll be better equipped to tackle Google's software interview questions and demonstrate your problem-solving skills.\n\n## Timeline\n\n#### Week 1: Data Structures\n\nArrays\nLinked Lists\nStacks and Queues\nHash Tables\nTrees and Graphs\n\n#### Week 2: Algorithms\n\nSorting (Bubble, Selection, Insertion, Merge, Quick)\nSearching (Linear, Binary)\nRecursion\nDynamic Programming\nGreedy Algorithms\n\n#### Week 3: Operating Systems\n\nProcess Management\nMemory Management\nFile Systems\nScheduling Algorithms\n\n#### Week 4: Networking\n\nOSI Model\nTCP/IP Model\nRouting Protocols\nNetwork Security\n\n#### Week 5: Databases\n\nRelational Databases\nSQL\nNoSQL\nACID Properties\n\n#### Week 6: Object-Oriented Programming\n\nClasses and Objects\nInheritance\nPolymorphism\nEncapsulation\n\n#### Week 7: System Design\n\nDesign Patterns\nScalability\nPerformance Optimization\nMicroservices Architecture\n\n#### Week 8: Review and Practice\n\nRevisit difficult topics\nSolve coding problems related to the studied concepts\nMock interviews focusing on the fundamentals\n\n![space](images/working-at-google-review-the-fundamentals-hero.jpg)\n","source":"_posts/en/working-at-google-review-the-fundamentals.md","raw":"---\ntitle: Working at Google - Review the fundamentals (part 3)\ndate: 2023-03-25 11:28:14\ntags: [google, software, interview]\nexcerpt: Reviewing the fundamentals is crucial for preparing for Google software interviews, as they form the foundation of your problem-solving skills.\nauthor: codesandtags\ncategory: FAANG\nthumbnail: images/faang-google-thumbnail.jpg\n---\n\nReviewing the fundamentals is crucial for preparing for Google software interviews, as they form the foundation of your problem-solving skills. Here are the key areas you should focus on when reviewing computer science fundamentals:\n\n## Data structures:\n\nEnsure you have a solid understanding of basic data structures and their operations, including:\n\n- Arrays\n- Linked Lists (singly and doubly)\n- Stacks\n- Queues\n- Trees (binary, balanced, AVL, red-black)\n- Graphs (directed, undirected, adjacency matrix, adjacency list)\n- Heaps (min and max)\n- Hash Tables (hash functions, collision resolution techniques)\n\n## Algorithms:\n\nFamiliarize yourself with common algorithms, their use cases, and how to implement them:\n\n- Searching (linear, binary)\n- Sorting (bubble, insertion, selection, merge, quick, radix)\n- Recursion and backtracking (e.g., permutations, combinations, tree traversal)\n- Dynamic programming (e.g., memoization, top-down, bottom-up)\n- Graph traversal (depth-first search, breadth-first search, Dijkstra's, A\\*, Bellman-Ford)\n- Greedy algorithms (e.g., Kruskal's, Prim's, Huffman coding)\n\n## Complexity analysis:\n\nDevelop a strong understanding of time and space complexity, including:\n\n- Big-O, Big-Ω, and Big-Θ notation\n- How to analyze the time and space complexity of an algorithm\n- Understanding the complexity of common operations on various data structures\n- Identifying and optimizing bottlenecks in your code\n\n## Programming languages:\n\nBe proficient in at least one programming language, preferably one that is commonly used at Google, such as Python, Java, Typescript, or C++. You should be comfortable with the syntax, standard libraries, and language-specific data structures and algorithms.\n\n## Object-oriented programming (OOP):\n\nUnderstand OOP concepts, such as inheritance, polymorphism, encapsulation, and abstraction. Be able to design and implement classes, interfaces, and objects in your chosen programming language.\n\n## Operating systems and concurrency:\n\nFamiliarize yourself with basic operating system concepts, such as process management, memory management, file systems, and synchronization primitives (e.g., mutexes, semaphores, locks).\n\n## Networking:\n\nAcquire a basic understanding of networking concepts, such as the OSI model, TCP/IP, sockets, and common network protocols (HTTP, FTP, DNS, etc.).\n\n## Databases:\n\nLearn about relational databases (e.g., SQL, normalization, indexing) and NoSQL databases (e.g., key-value stores, document databases, column stores, graph databases).\nBy reviewing these fundamentals and practicing problems that involve their application, you'll be better equipped to tackle Google's software interview questions and demonstrate your problem-solving skills.\n\n## Timeline\n\n#### Week 1: Data Structures\n\nArrays\nLinked Lists\nStacks and Queues\nHash Tables\nTrees and Graphs\n\n#### Week 2: Algorithms\n\nSorting (Bubble, Selection, Insertion, Merge, Quick)\nSearching (Linear, Binary)\nRecursion\nDynamic Programming\nGreedy Algorithms\n\n#### Week 3: Operating Systems\n\nProcess Management\nMemory Management\nFile Systems\nScheduling Algorithms\n\n#### Week 4: Networking\n\nOSI Model\nTCP/IP Model\nRouting Protocols\nNetwork Security\n\n#### Week 5: Databases\n\nRelational Databases\nSQL\nNoSQL\nACID Properties\n\n#### Week 6: Object-Oriented Programming\n\nClasses and Objects\nInheritance\nPolymorphism\nEncapsulation\n\n#### Week 7: System Design\n\nDesign Patterns\nScalability\nPerformance Optimization\nMicroservices Architecture\n\n#### Week 8: Review and Practice\n\nRevisit difficult topics\nSolve coding problems related to the studied concepts\nMock interviews focusing on the fundamentals\n\n![space](images/working-at-google-review-the-fundamentals-hero.jpg)\n","slug":"en/working-at-google-review-the-fundamentals","published":1,"updated":"2023-07-17T22:47:10.537Z","comments":0,"layout":"post","photos":[],"link":"2023/03/25/en/working-at-google-review-the-fundamentals","_id":"clnwi7gb6000vqbt27lxe664v","content":"<p>Reviewing the fundamentals is crucial for preparing for Google software interviews, as they form the foundation of your problem-solving skills. Here are the key areas you should focus on when reviewing computer science fundamentals:</p>\n<h2 id=\"data-structures:\">Data structures:<a title=\"#data-structures:\" href=\"#data-structures:\"></a></h2>\n<p>Ensure you have a solid understanding of basic data structures and their operations, including:</p>\n<ul>\n<li>Arrays</li>\n<li>Linked Lists (singly and doubly)</li>\n<li>Stacks</li>\n<li>Queues</li>\n<li>Trees (binary, balanced, AVL, red-black)</li>\n<li>Graphs (directed, undirected, adjacency matrix, adjacency list)</li>\n<li>Heaps (min and max)</li>\n<li>Hash Tables (hash functions, collision resolution techniques)</li>\n</ul>\n<h2 id=\"algorithms:\">Algorithms:<a title=\"#algorithms:\" href=\"#algorithms:\"></a></h2>\n<p>Familiarize yourself with common algorithms, their use cases, and how to implement them:</p>\n<ul>\n<li>Searching (linear, binary)</li>\n<li>Sorting (bubble, insertion, selection, merge, quick, radix)</li>\n<li>Recursion and backtracking (e.g., permutations, combinations, tree traversal)</li>\n<li>Dynamic programming (e.g., memoization, top-down, bottom-up)</li>\n<li>Graph traversal (depth-first search, breadth-first search, Dijkstra’s, A*, Bellman-Ford)</li>\n<li>Greedy algorithms (e.g., Kruskal’s, Prim’s, Huffman coding)</li>\n</ul>\n<h2 id=\"complexity-analysis:\">Complexity analysis:<a title=\"#complexity-analysis:\" href=\"#complexity-analysis:\"></a></h2>\n<p>Develop a strong understanding of time and space complexity, including:</p>\n<ul>\n<li>Big-O, Big-Ω, and Big-Θ notation</li>\n<li>How to analyze the time and space complexity of an algorithm</li>\n<li>Understanding the complexity of common operations on various data structures</li>\n<li>Identifying and optimizing bottlenecks in your code</li>\n</ul>\n<h2 id=\"programming-languages:\">Programming languages:<a title=\"#programming-languages:\" href=\"#programming-languages:\"></a></h2>\n<p>Be proficient in at least one programming language, preferably one that is commonly used at Google, such as Python, Java, Typescript, or C++. You should be comfortable with the syntax, standard libraries, and language-specific data structures and algorithms.</p>\n<h2 id=\"object-oriented-programming-(oop):\">Object-oriented programming (OOP):<a title=\"#object-oriented-programming-(oop):\" href=\"#object-oriented-programming-(oop):\"></a></h2>\n<p>Understand OOP concepts, such as inheritance, polymorphism, encapsulation, and abstraction. Be able to design and implement classes, interfaces, and objects in your chosen programming language.</p>\n<h2 id=\"operating-systems-and-concurrency:\">Operating systems and concurrency:<a title=\"#operating-systems-and-concurrency:\" href=\"#operating-systems-and-concurrency:\"></a></h2>\n<p>Familiarize yourself with basic operating system concepts, such as process management, memory management, file systems, and synchronization primitives (e.g., mutexes, semaphores, locks).</p>\n<h2 id=\"networking:\">Networking:<a title=\"#networking:\" href=\"#networking:\"></a></h2>\n<p>Acquire a basic understanding of networking concepts, such as the OSI model, TCP/IP, sockets, and common network protocols (HTTP, FTP, DNS, etc.).</p>\n<h2 id=\"databases:\">Databases:<a title=\"#databases:\" href=\"#databases:\"></a></h2>\n<p>Learn about relational databases (e.g., SQL, normalization, indexing) and NoSQL databases (e.g., key-value stores, document databases, column stores, graph databases).<br>\nBy reviewing these fundamentals and practicing problems that involve their application, you’ll be better equipped to tackle Google’s software interview questions and demonstrate your problem-solving skills.</p>\n<h2 id=\"timeline\">Timeline<a title=\"#timeline\" href=\"#timeline\"></a></h2>\n<h4 id=\"week-1:-data-structures\">Week 1: Data Structures<a title=\"#week-1:-data-structures\" href=\"#week-1:-data-structures\"></a></h4>\n<p>Arrays<br>\nLinked Lists<br>\nStacks and Queues<br>\nHash Tables<br>\nTrees and Graphs</p>\n<h4 id=\"week-2:-algorithms\">Week 2: Algorithms<a title=\"#week-2:-algorithms\" href=\"#week-2:-algorithms\"></a></h4>\n<p>Sorting (Bubble, Selection, Insertion, Merge, Quick)<br>\nSearching (Linear, Binary)<br>\nRecursion<br>\nDynamic Programming<br>\nGreedy Algorithms</p>\n<h4 id=\"week-3:-operating-systems\">Week 3: Operating Systems<a title=\"#week-3:-operating-systems\" href=\"#week-3:-operating-systems\"></a></h4>\n<p>Process Management<br>\nMemory Management<br>\nFile Systems<br>\nScheduling Algorithms</p>\n<h4 id=\"week-4:-networking\">Week 4: Networking<a title=\"#week-4:-networking\" href=\"#week-4:-networking\"></a></h4>\n<p>OSI Model<br>\nTCP/IP Model<br>\nRouting Protocols<br>\nNetwork Security</p>\n<h4 id=\"week-5:-databases\">Week 5: Databases<a title=\"#week-5:-databases\" href=\"#week-5:-databases\"></a></h4>\n<p>Relational Databases<br>\nSQL<br>\nNoSQL<br>\nACID Properties</p>\n<h4 id=\"week-6:-object-oriented-programming\">Week 6: Object-Oriented Programming<a title=\"#week-6:-object-oriented-programming\" href=\"#week-6:-object-oriented-programming\"></a></h4>\n<p>Classes and Objects<br>\nInheritance<br>\nPolymorphism<br>\nEncapsulation</p>\n<h4 id=\"week-7:-system-design\">Week 7: System Design<a title=\"#week-7:-system-design\" href=\"#week-7:-system-design\"></a></h4>\n<p>Design Patterns<br>\nScalability<br>\nPerformance Optimization<br>\nMicroservices Architecture</p>\n<h4 id=\"week-8:-review-and-practice\">Week 8: Review and Practice<a title=\"#week-8:-review-and-practice\" href=\"#week-8:-review-and-practice\"></a></h4>\n<p>Revisit difficult topics<br>\nSolve coding problems related to the studied concepts<br>\nMock interviews focusing on the fundamentals</p>\n<p><img src=\"images/working-at-google-review-the-fundamentals-hero.jpg\" alt=\"space\" loading=\"lazy\" class=\"φbp\"></p>\n","site":{"data":{}},"more":"<p>Reviewing the fundamentals is crucial for preparing for Google software interviews, as they form the foundation of your problem-solving skills. Here are the key areas you should focus on when reviewing computer science fundamentals:</p>\n<h2 id=\"data-structures:\">Data structures:<a title=\"#data-structures:\" href=\"#data-structures:\"></a></h2>\n<p>Ensure you have a solid understanding of basic data structures and their operations, including:</p>\n<ul>\n<li>Arrays</li>\n<li>Linked Lists (singly and doubly)</li>\n<li>Stacks</li>\n<li>Queues</li>\n<li>Trees (binary, balanced, AVL, red-black)</li>\n<li>Graphs (directed, undirected, adjacency matrix, adjacency list)</li>\n<li>Heaps (min and max)</li>\n<li>Hash Tables (hash functions, collision resolution techniques)</li>\n</ul>\n<h2 id=\"algorithms:\">Algorithms:<a title=\"#algorithms:\" href=\"#algorithms:\"></a></h2>\n<p>Familiarize yourself with common algorithms, their use cases, and how to implement them:</p>\n<ul>\n<li>Searching (linear, binary)</li>\n<li>Sorting (bubble, insertion, selection, merge, quick, radix)</li>\n<li>Recursion and backtracking (e.g., permutations, combinations, tree traversal)</li>\n<li>Dynamic programming (e.g., memoization, top-down, bottom-up)</li>\n<li>Graph traversal (depth-first search, breadth-first search, Dijkstra’s, A*, Bellman-Ford)</li>\n<li>Greedy algorithms (e.g., Kruskal’s, Prim’s, Huffman coding)</li>\n</ul>\n<h2 id=\"complexity-analysis:\">Complexity analysis:<a title=\"#complexity-analysis:\" href=\"#complexity-analysis:\"></a></h2>\n<p>Develop a strong understanding of time and space complexity, including:</p>\n<ul>\n<li>Big-O, Big-Ω, and Big-Θ notation</li>\n<li>How to analyze the time and space complexity of an algorithm</li>\n<li>Understanding the complexity of common operations on various data structures</li>\n<li>Identifying and optimizing bottlenecks in your code</li>\n</ul>\n<h2 id=\"programming-languages:\">Programming languages:<a title=\"#programming-languages:\" href=\"#programming-languages:\"></a></h2>\n<p>Be proficient in at least one programming language, preferably one that is commonly used at Google, such as Python, Java, Typescript, or C++. You should be comfortable with the syntax, standard libraries, and language-specific data structures and algorithms.</p>\n<h2 id=\"object-oriented-programming-(oop):\">Object-oriented programming (OOP):<a title=\"#object-oriented-programming-(oop):\" href=\"#object-oriented-programming-(oop):\"></a></h2>\n<p>Understand OOP concepts, such as inheritance, polymorphism, encapsulation, and abstraction. Be able to design and implement classes, interfaces, and objects in your chosen programming language.</p>\n<h2 id=\"operating-systems-and-concurrency:\">Operating systems and concurrency:<a title=\"#operating-systems-and-concurrency:\" href=\"#operating-systems-and-concurrency:\"></a></h2>\n<p>Familiarize yourself with basic operating system concepts, such as process management, memory management, file systems, and synchronization primitives (e.g., mutexes, semaphores, locks).</p>\n<h2 id=\"networking:\">Networking:<a title=\"#networking:\" href=\"#networking:\"></a></h2>\n<p>Acquire a basic understanding of networking concepts, such as the OSI model, TCP/IP, sockets, and common network protocols (HTTP, FTP, DNS, etc.).</p>\n<h2 id=\"databases:\">Databases:<a title=\"#databases:\" href=\"#databases:\"></a></h2>\n<p>Learn about relational databases (e.g., SQL, normalization, indexing) and NoSQL databases (e.g., key-value stores, document databases, column stores, graph databases).<br>\nBy reviewing these fundamentals and practicing problems that involve their application, you’ll be better equipped to tackle Google’s software interview questions and demonstrate your problem-solving skills.</p>\n<h2 id=\"timeline\">Timeline<a title=\"#timeline\" href=\"#timeline\"></a></h2>\n<h4 id=\"week-1:-data-structures\">Week 1: Data Structures<a title=\"#week-1:-data-structures\" href=\"#week-1:-data-structures\"></a></h4>\n<p>Arrays<br>\nLinked Lists<br>\nStacks and Queues<br>\nHash Tables<br>\nTrees and Graphs</p>\n<h4 id=\"week-2:-algorithms\">Week 2: Algorithms<a title=\"#week-2:-algorithms\" href=\"#week-2:-algorithms\"></a></h4>\n<p>Sorting (Bubble, Selection, Insertion, Merge, Quick)<br>\nSearching (Linear, Binary)<br>\nRecursion<br>\nDynamic Programming<br>\nGreedy Algorithms</p>\n<h4 id=\"week-3:-operating-systems\">Week 3: Operating Systems<a title=\"#week-3:-operating-systems\" href=\"#week-3:-operating-systems\"></a></h4>\n<p>Process Management<br>\nMemory Management<br>\nFile Systems<br>\nScheduling Algorithms</p>\n<h4 id=\"week-4:-networking\">Week 4: Networking<a title=\"#week-4:-networking\" href=\"#week-4:-networking\"></a></h4>\n<p>OSI Model<br>\nTCP/IP Model<br>\nRouting Protocols<br>\nNetwork Security</p>\n<h4 id=\"week-5:-databases\">Week 5: Databases<a title=\"#week-5:-databases\" href=\"#week-5:-databases\"></a></h4>\n<p>Relational Databases<br>\nSQL<br>\nNoSQL<br>\nACID Properties</p>\n<h4 id=\"week-6:-object-oriented-programming\">Week 6: Object-Oriented Programming<a title=\"#week-6:-object-oriented-programming\" href=\"#week-6:-object-oriented-programming\"></a></h4>\n<p>Classes and Objects<br>\nInheritance<br>\nPolymorphism<br>\nEncapsulation</p>\n<h4 id=\"week-7:-system-design\">Week 7: System Design<a title=\"#week-7:-system-design\" href=\"#week-7:-system-design\"></a></h4>\n<p>Design Patterns<br>\nScalability<br>\nPerformance Optimization<br>\nMicroservices Architecture</p>\n<h4 id=\"week-8:-review-and-practice\">Week 8: Review and Practice<a title=\"#week-8:-review-and-practice\" href=\"#week-8:-review-and-practice\"></a></h4>\n<p>Revisit difficult topics<br>\nSolve coding problems related to the studied concepts<br>\nMock interviews focusing on the fundamentals</p>\n<p><img src=\"images/working-at-google-review-the-fundamentals-hero.jpg\" alt=\"space\" loading=\"lazy\" class=\"φbp\"></p>\n","date_formatted":{"ll":"Mar 25, 2023","L":"03/25/2023","MM-DD":"03-25"},"plink":"http://codesandtags.io/blog/2023/03/25/en/working-at-google-review-the-fundamentals/","type":"post","toc":[{"id":"data-structures:","title":"Data structures:","index":"1"},{"id":"algorithms:","title":"Algorithms:","index":"2"},{"id":"complexity-analysis:","title":"Complexity analysis:","index":"3"},{"id":"programming-languages:","title":"Programming languages:","index":"4"},{"id":"object-oriented-programming-(oop):","title":"Object-oriented programming (OOP):","index":"5"},{"id":"operating-systems-and-concurrency:","title":"Operating systems and concurrency:","index":"6"},{"id":"networking:","title":"Networking:","index":"7"},{"id":"databases:","title":"Databases:","index":"8"},{"id":"timeline","title":"Timeline","index":"9"}],"reading_time":"490 words in 3 min"}],"PostAsset":[],"PostCategory":[{"post_id":"clnwi7gas0006qbt290lmg9ej","category_id":"clnwi7gap0003qbt2fzswhnek","_id":"clnwi7gay000cqbt25x7t5jq2"},{"post_id":"clnwi7gak0001qbt23w6ad5es","category_id":"clnwi7gap0003qbt2fzswhnek","_id":"clnwi7gaz000gqbt29ofy909u"},{"post_id":"clnwi7gat0007qbt295n72i2z","category_id":"clnwi7gap0003qbt2fzswhnek","_id":"clnwi7gb1000jqbt23l1z0w48"},{"post_id":"clnwi7gan0002qbt28kvmc8bx","category_id":"clnwi7gap0003qbt2fzswhnek","_id":"clnwi7gb3000oqbt27wzic91d"},{"post_id":"clnwi7gar0005qbt2amhxc97t","category_id":"clnwi7gap0003qbt2fzswhnek","_id":"clnwi7gb4000qqbt29lq87hsc"},{"post_id":"clnwi7gb2000nqbt29fvsdc7e","category_id":"clnwi7gb1000kqbt27ktg848m","_id":"clnwi7gb6000wqbt28fo0avw8"},{"post_id":"clnwi7gaw000aqbt2c2qo4q2r","category_id":"clnwi7gb1000kqbt27ktg848m","_id":"clnwi7gb70010qbt2actedhz1"},{"post_id":"clnwi7gb3000pqbt2c83o122j","category_id":"clnwi7gb1000kqbt27ktg848m","_id":"clnwi7gb80011qbt22hax8225"},{"post_id":"clnwi7gb5000tqbt2h5293mxs","category_id":"clnwi7gb1000kqbt27ktg848m","_id":"clnwi7gb80014qbt2b1kthtgh"},{"post_id":"clnwi7gax000bqbt29naw4thl","category_id":"clnwi7gb1000kqbt27ktg848m","_id":"clnwi7gb90016qbt25ma07myq"},{"post_id":"clnwi7gb6000vqbt27lxe664v","category_id":"clnwi7gb1000kqbt27ktg848m","_id":"clnwi7gb90019qbt24ufx29bp"},{"post_id":"clnwi7gaz000fqbt25mhge3pm","category_id":"clnwi7gb1000kqbt27ktg848m","_id":"clnwi7gb9001bqbt28ke8bxwb"},{"post_id":"clnwi7gb0000iqbt21q5144vy","category_id":"clnwi7gb1000kqbt27ktg848m","_id":"clnwi7gba001eqbt26xr46i2a"}],"PostTag":[{"post_id":"clnwi7gak0001qbt23w6ad5es","tag_id":"clnwi7gaq0004qbt2019eb1m6","_id":"clnwi7gaz000hqbt2hee65tfm"},{"post_id":"clnwi7gak0001qbt23w6ad5es","tag_id":"clnwi7gau0009qbt20icd76gr","_id":"clnwi7gb1000lqbt238bg3zxx"},{"post_id":"clnwi7gan0002qbt28kvmc8bx","tag_id":"clnwi7gaq0004qbt2019eb1m6","_id":"clnwi7gb5000uqbt2124fab8b"},{"post_id":"clnwi7gan0002qbt28kvmc8bx","tag_id":"clnwi7gau0009qbt20icd76gr","_id":"clnwi7gb6000xqbt2ex7oblhh"},{"post_id":"clnwi7gar0005qbt2amhxc97t","tag_id":"clnwi7gaq0004qbt2019eb1m6","_id":"clnwi7gb80015qbt2enm69ri2"},{"post_id":"clnwi7gar0005qbt2amhxc97t","tag_id":"clnwi7gau0009qbt20icd76gr","_id":"clnwi7gb90017qbt2doh6a6b2"},{"post_id":"clnwi7gas0006qbt290lmg9ej","tag_id":"clnwi7gaq0004qbt2019eb1m6","_id":"clnwi7gb9001aqbt25f6d5d57"},{"post_id":"clnwi7gas0006qbt290lmg9ej","tag_id":"clnwi7gau0009qbt20icd76gr","_id":"clnwi7gb9001cqbt2g2a743jn"},{"post_id":"clnwi7gat0007qbt295n72i2z","tag_id":"clnwi7gaq0004qbt2019eb1m6","_id":"clnwi7gba001fqbt26jxtc7u8"},{"post_id":"clnwi7gat0007qbt295n72i2z","tag_id":"clnwi7gau0009qbt20icd76gr","_id":"clnwi7gba001gqbt2hszd34qr"},{"post_id":"clnwi7gaw000aqbt2c2qo4q2r","tag_id":"clnwi7gba001dqbt2dec3dcip","_id":"clnwi7gbb001iqbt28l7ohfer"},{"post_id":"clnwi7gax000bqbt29naw4thl","tag_id":"clnwi7gba001dqbt2dec3dcip","_id":"clnwi7gbb001kqbt238uv422z"},{"post_id":"clnwi7gaz000fqbt25mhge3pm","tag_id":"clnwi7gbb001jqbt2an3g0gpn","_id":"clnwi7gbc001oqbt2blvndyj3"},{"post_id":"clnwi7gaz000fqbt25mhge3pm","tag_id":"clnwi7gbb001lqbt2cmaqbckj","_id":"clnwi7gbc001pqbt27sp0820t"},{"post_id":"clnwi7gaz000fqbt25mhge3pm","tag_id":"clnwi7gba001dqbt2dec3dcip","_id":"clnwi7gbc001rqbt2h63zhptv"},{"post_id":"clnwi7gb0000iqbt21q5144vy","tag_id":"clnwi7gbb001jqbt2an3g0gpn","_id":"clnwi7gbd001vqbt2cdgq71rz"},{"post_id":"clnwi7gb0000iqbt21q5144vy","tag_id":"clnwi7gbb001lqbt2cmaqbckj","_id":"clnwi7gbd001wqbt23dir4vf3"},{"post_id":"clnwi7gb0000iqbt21q5144vy","tag_id":"clnwi7gba001dqbt2dec3dcip","_id":"clnwi7gbd001yqbt2ekz6da4w"},{"post_id":"clnwi7gb0000iqbt21q5144vy","tag_id":"clnwi7gbd001tqbt292g23prl","_id":"clnwi7gbd001zqbt2dsjp2spg"},{"post_id":"clnwi7gb2000nqbt29fvsdc7e","tag_id":"clnwi7gbb001jqbt2an3g0gpn","_id":"clnwi7gbe0022qbt2cjcp7lgt"},{"post_id":"clnwi7gb2000nqbt29fvsdc7e","tag_id":"clnwi7gbb001lqbt2cmaqbckj","_id":"clnwi7gbe0023qbt24f2g9yvq"},{"post_id":"clnwi7gb2000nqbt29fvsdc7e","tag_id":"clnwi7gba001dqbt2dec3dcip","_id":"clnwi7gbe0025qbt25nev4j4p"},{"post_id":"clnwi7gb3000pqbt2c83o122j","tag_id":"clnwi7gbb001jqbt2an3g0gpn","_id":"clnwi7gbf0028qbt2f0dd2vcu"},{"post_id":"clnwi7gb3000pqbt2c83o122j","tag_id":"clnwi7gbb001lqbt2cmaqbckj","_id":"clnwi7gbf0029qbt20j6t00ne"},{"post_id":"clnwi7gb3000pqbt2c83o122j","tag_id":"clnwi7gba001dqbt2dec3dcip","_id":"clnwi7gbf002bqbt21sxjf84z"},{"post_id":"clnwi7gb5000tqbt2h5293mxs","tag_id":"clnwi7gbb001jqbt2an3g0gpn","_id":"clnwi7gbg002eqbt2bhgt6xi0"},{"post_id":"clnwi7gb5000tqbt2h5293mxs","tag_id":"clnwi7gbb001lqbt2cmaqbckj","_id":"clnwi7gbg002fqbt232th4vc1"},{"post_id":"clnwi7gb5000tqbt2h5293mxs","tag_id":"clnwi7gba001dqbt2dec3dcip","_id":"clnwi7gbg002hqbt2dm410g6w"},{"post_id":"clnwi7gb6000vqbt27lxe664v","tag_id":"clnwi7gbb001jqbt2an3g0gpn","_id":"clnwi7gbh002jqbt2ft75a97x"},{"post_id":"clnwi7gb6000vqbt27lxe664v","tag_id":"clnwi7gbb001lqbt2cmaqbckj","_id":"clnwi7gbh002kqbt24vki7bnb"},{"post_id":"clnwi7gb6000vqbt27lxe664v","tag_id":"clnwi7gba001dqbt2dec3dcip","_id":"clnwi7gbh002lqbt2gzd98imt"}],"Tag":[{"name":"software-architecture","_id":"clnwi7gaq0004qbt2019eb1m6"},{"name":"books","_id":"clnwi7gau0009qbt20icd76gr"},{"name":"interview","_id":"clnwi7gba001dqbt2dec3dcip"},{"name":"google","_id":"clnwi7gbb001jqbt2an3g0gpn"},{"name":"software","_id":"clnwi7gbb001lqbt2cmaqbckj"},{"name":"leetcode","_id":"clnwi7gbd001tqbt292g23prl"}]}}