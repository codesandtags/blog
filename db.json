{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"source/images/behavioral-questions.jpg","path":"images/behavioral-questions.jpg","modified":0,"renderable":0},{"_id":"source/images/faang-thumbnail.jpg","path":"images/faang-thumbnail.jpg","modified":0,"renderable":0},{"_id":"source/images/faang-google-thumbnail.jpg","path":"images/faang-google-thumbnail.jpg","modified":0,"renderable":0},{"_id":"source/images/favicon.ico","path":"images/favicon.ico","modified":0,"renderable":0},{"_id":"source/images/favicon-32x32.png","path":"images/favicon-32x32.png","modified":0,"renderable":0},{"_id":"source/images/working-at-google-interview-process-hero.jpg","path":"images/working-at-google-interview-process-hero.jpg","modified":0,"renderable":0},{"_id":"source/images/working-at-google-leetcode-and-other-resources-hero.jpg","path":"images/working-at-google-leetcode-and-other-resources-hero.jpg","modified":0,"renderable":0},{"_id":"source/images/working-at-google-preparation-plan-hero.jpg","path":"images/working-at-google-preparation-plan-hero.jpg","modified":0,"renderable":0},{"_id":"source/images/working-at-google-review-the-fundamentals-hero.jpg","path":"images/working-at-google-review-the-fundamentals-hero.jpg","modified":0,"renderable":0},{"_id":"source/images/working-at-google-study-google-specifc-topics-hero.jpg","path":"images/working-at-google-study-google-specifc-topics-hero.jpg","modified":0,"renderable":0},{"_id":"source/images/xfaang-google-thumbnail.jpg","path":"images/xfaang-google-thumbnail.jpg","modified":0,"renderable":0},{"_id":"source/images/books/cover-fundamentals-software-architecture.png","path":"images/books/cover-fundamentals-software-architecture.png","modified":0,"renderable":0},{"_id":"source/images/books/software-architecture-four-dimensions.png","path":"images/books/software-architecture-four-dimensions.png","modified":0,"renderable":0},{"_id":"node_modules/hexo-theme-inside/source/3rdpartylicenses.txt","path":"3rdpartylicenses.txt","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-inside/source/main.543c891b4aad158701f3.js","path":"main.543c891b4aad158701f3.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-inside/source/polyfills.b7bf56fc45f931a8b83e.js","path":"polyfills.b7bf56fc45f931a8b83e.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-inside/source/runtime.1ed960b0635ea0669f87.js","path":"runtime.1ed960b0635ea0669f87.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-inside/source/styles.91e7dfca63c7c151daa6.css","path":"styles.91e7dfca63c7c151daa6.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-inside/source/theme.9ecc9ab1.js","path":"theme.9ecc9ab1.js","modified":0,"renderable":1},{"_id":"source/images/books/software-architecture-traditional-approach.png","path":"images/books/software-architecture-traditional-approach.png","modified":0,"renderable":0},{"_id":"source/images/books/software-architecture-knowledge-representation.png","path":"images/books/software-architecture-knowledge-representation.png","modified":0,"renderable":0},{"_id":"source/images/books/software-architecture-explicit-implicit-characteristics.png","path":"images/books/software-architecture-explicit-implicit-characteristics.png","modified":1,"renderable":0},{"_id":"source/images/books/software-architecture-characteristics.png","path":"images/books/software-architecture-characteristics.png","modified":1,"renderable":0}],"Cache":[{"_id":"source/about/index.md","hash":"001f07c1dc3cd36f6f983d066dc08b0293aa1399","modified":1689726527878},{"_id":"source/images/favicon-32x32.png","hash":"3931c919ed3cbe05699ae7bf3d2bdc6bbc5f9136","modified":1689634030544},{"_id":"source/images/favicon.ico","hash":"1dfacab8c7afd34ae977b1fae2cd5f0d24716bfd","modified":1689634030545},{"_id":"source/images/xfaang-google-thumbnail.jpg","hash":"3587836dc92c6f9a7146145237c81d0d77399709","modified":1689634030572},{"_id":"source/_posts/en/fundamentals-of-software-architecture-part-1.md","hash":"535e1201ef3ebe553be6727c460ef9cee3019310","modified":1689802647653},{"_id":"source/_posts/en/how-can-mock-interviews-help-you.md","hash":"e4e7e468f032e45e01646273e723c45d90ca7f2e","modified":1689634030536},{"_id":"source/_posts/en/working-at-google-interview-process.md","hash":"9cca81f02443c5ec7be29e9200c0301680d646e0","modified":1689634030536},{"_id":"source/_posts/en/how-to-succeed-behavioral-questions.md","hash":"4efec43ea7810a5c6787643f8755ad33b34d43e6","modified":1689634030536},{"_id":"source/_posts/en/working-at-google-leetcode-and-other-resources.md","hash":"f0db5a3f609cf6db30c91d953feae0c925bde4c7","modified":1689634030536},{"_id":"source/_posts/en/working-at-google-optimize-your-problem-solving.md","hash":"dbb1d07eb05b693b30a1f115f0cf8581befd00d1","modified":1689634030537},{"_id":"source/_posts/en/working-at-google-preparation-plan.md","hash":"1b65ddfbb287b4eafc6b5d069ed4f7e660406e59","modified":1689634030537},{"_id":"source/_posts/en/working-at-google-review-the-fundamentals.md","hash":"8a0386ecbb2187e7c45b53fe9d077d023a745e17","modified":1689634030537},{"_id":"source/_posts/en/working-at-google-study-google-specifc-topics.md","hash":"db1ac03212a26b3ab01d313d72d6f76bfe7050c2","modified":1689634030537},{"_id":"source/images/faang-thumbnail.jpg","hash":"75a354c7c96ea65514780e5e70061ac982d60bd4","modified":1689634030544},{"_id":"source/images/faang-google-thumbnail.jpg","hash":"0bb66e4bb79ae0ae7902caa63311640030e60d8f","modified":1689634030543},{"_id":"source/images/books/cover-fundamentals-software-architecture.png","hash":"0cdcaf8b7a3b0a46d703eccbd7c025ab7b633d3e","modified":1689636239581},{"_id":"source/images/working-at-google-leetcode-and-other-resources-hero.jpg","hash":"95a66f3ec14798d8ad23835f4c24f2cb3ff4ad61","modified":1689634030558},{"_id":"source/images/working-at-google-preparation-plan-hero.jpg","hash":"d8f4fd3f91d2c187ca9ba39480011ce20e1a4442","modified":1689634030562},{"_id":"node_modules/hexo-theme-inside/LICENSE","hash":"80e42bdfa4902549136f3a2445f16bff8ec46be8","modified":1689634083827},{"_id":"node_modules/hexo-theme-inside/README.md","hash":"e646ba8a95ba31d088ca21e518bd59a0390ec588","modified":1689634083827},{"_id":"node_modules/hexo-theme-inside/README_zh-Hans.md","hash":"4fbdd86fba6988352422144ae917993bb68e82d9","modified":1689634083827},{"_id":"node_modules/hexo-theme-inside/_config.yml","hash":"fe3f71e89395398c71ac629d6351412fa33b2c48","modified":1689634083827},{"_id":"node_modules/hexo-theme-inside/languages/en.yml","hash":"9cb7e597a23fc9e1cf10b4f283ccbc0ea97cbb20","modified":1689634083827},{"_id":"node_modules/hexo-theme-inside/package.json","hash":"4cb0c940e3a473cab8b1140ba2b74783057f455d","modified":1689634083827},{"_id":"node_modules/hexo-theme-inside/languages/zh-Hant.yml","hash":"e35078d3d5e6299178135aabdbb1b2a95252a42a","modified":1689634083827},{"_id":"node_modules/hexo-theme-inside/languages/ja.yml","hash":"757de0ada468d30ff0b575981e3fc3b0c1d7a143","modified":1689634083827},{"_id":"node_modules/hexo-theme-inside/lib/configSchema.json","hash":"43f14fe0592685bedf493cfa1ae578548dbab99f","modified":1689634083827},{"_id":"node_modules/hexo-theme-inside/languages/zh-Hans.yml","hash":"c19d12bc4326f7963c7a21b83bd4279213310bc2","modified":1689634083827},{"_id":"node_modules/hexo-theme-inside/lib/utils.js","hash":"59cb0cf6828efa2c7229564292c9e139c9f10080","modified":1689634083827},{"_id":"node_modules/hexo-theme-inside/lib/config.js","hash":"c1a36889230c0e744074e45a3ba5f1b551dc18c4","modified":1689634083827},{"_id":"node_modules/hexo-theme-inside/layout/index.njk","hash":"c9badf67c9048e1c46a4c6f232e33d33937342f0","modified":1689634083827},{"_id":"node_modules/hexo-theme-inside/source/3rdpartylicenses.txt","hash":"1b7039121dbb0d2772eb0bfe827e029a144caef7","modified":1689634083827},{"_id":"node_modules/hexo-theme-inside/source/_manifest.json","hash":"da1182fcbe3cdfd9c1a031187b03208f088c89ac","modified":1689634083827},{"_id":"node_modules/hexo-theme-inside/source/polyfills.b7bf56fc45f931a8b83e.js","hash":"4f742c8c6f028dc25a8a020f6909128b03cfda48","modified":1689634083827},{"_id":"node_modules/hexo-theme-inside/source/runtime.1ed960b0635ea0669f87.js","hash":"1a23d8cab7062a7fae5ed6184d88f6b37c77516b","modified":1689634083827},{"_id":"node_modules/hexo-theme-inside/source/theme.9ecc9ab1.js","hash":"c8ddb3e8d21e4591fd8d3c8c002234183deb49a0","modified":1689634083827},{"_id":"node_modules/hexo-theme-inside/source/styles.91e7dfca63c7c151daa6.css","hash":"be513488e892c07b5734dd0a095d0c4fc4c7804b","modified":1689634083827},{"_id":"node_modules/hexo-theme-inside/scripts/index.js","hash":"2163e057444c2e5e3b786d28500e9cc5467e3c6b","modified":1689634083827},{"_id":"node_modules/hexo-theme-inside/lib/filter/index.js","hash":"ab87beb03adc8f8f273d59dd4403c4da8268ef83","modified":1689634083827},{"_id":"node_modules/hexo-theme-inside/lib/filter/post.js","hash":"23f17c0964fbe649a2b7ed1030755cc81455eadf","modified":1689634083827},{"_id":"node_modules/hexo-theme-inside/lib/filter/templates.js","hash":"86b31cec8512f37824dc4b18c89d0cf7b5987de5","modified":1689634083827},{"_id":"node_modules/hexo-theme-inside/lib/filter/ssr.js","hash":"ed3786805f1be7a791efd7185e25ea41e7322d5e","modified":1689634083827},{"_id":"node_modules/hexo-theme-inside/lib/helper/ga.js","hash":"adc62bd06443a781d6046d3e78aa57b5e4291611","modified":1689634083827},{"_id":"node_modules/hexo-theme-inside/lib/helper/index.js","hash":"93fbe9d8fe364cf4e2e55cc3d4d3156dde028f56","modified":1689634083827},{"_id":"node_modules/hexo-theme-inside/lib/helper/structured_data.js","hash":"682cfb827880ccfe5a972bb326ab4691cd8c470d","modified":1689634083827},{"_id":"node_modules/hexo-theme-inside/lib/helper/url_trim.js","hash":"a88302c028d2667d9336b72b50e0590e0b2edcd1","modified":1689634083827},{"_id":"node_modules/hexo-theme-inside/lib/generator/config.js","hash":"495d9dee09f186e7ebe96cee18732e0a59b6d0a9","modified":1689634083827},{"_id":"node_modules/hexo-theme-inside/lib/generator/index.js","hash":"31cb0d3cf08b65deb78e7a02110b6424d1fe2f04","modified":1689634083827},{"_id":"node_modules/hexo-theme-inside/lib/generator/manifest.js","hash":"e6eb7d3353fb1e13218535a3987cd31d569fc5bd","modified":1689634083827},{"_id":"node_modules/hexo-theme-inside/lib/generator/sitemap.js","hash":"7939aac2e0d38ec342c0c289b37aed42262e86f2","modified":1689634083827},{"_id":"node_modules/hexo-theme-inside/lib/plugins/cipher.js","hash":"ebf9e166e856980e27c1e8203e0a8dcf6ec3b69a","modified":1689634083827},{"_id":"node_modules/hexo-theme-inside/lib/generator/sw.js","hash":"216cc78d48e0dd3d0cff374c49bdc8e83b2ecd62","modified":1689634083827},{"_id":"node_modules/hexo-theme-inside/lib/plugins/manifest.json","hash":"65717c8073e334628d9c2821e848b47d2bac7919","modified":1689634083827},{"_id":"node_modules/hexo-theme-inside/lib/plugins/disqus.js","hash":"363b194bf1441a40890ecc264622f4730a2a943b","modified":1689634083827},{"_id":"node_modules/hexo-theme-inside/lib/renderer/index.js","hash":"c35a04ff425742ad9768f8942a8b3fcb00202ede","modified":1689634083827},{"_id":"node_modules/hexo-theme-inside/lib/plugins/palette.js","hash":"29430b1146a30fa44406995d244a749cd8a77856","modified":1689634083827},{"_id":"node_modules/hexo-theme-inside/lib/tag/canvas.js","hash":"24c02f85506c1f412a3386d14f1ceb074e4864e2","modified":1689634083827},{"_id":"node_modules/hexo-theme-inside/lib/tag/gist.js","hash":"4bedda6e6c07e2eeac3a3fc97617181287d77d34","modified":1689634083827},{"_id":"node_modules/hexo-theme-inside/lib/tag/index.js","hash":"bf75dd670a1d6ffffbacb183b406235780d680c6","modified":1689634083827},{"_id":"node_modules/hexo-theme-inside/lib/generator/entries/categories.js","hash":"276dfc2d9e010a9f3815d76571a60ddcdb04b1fe","modified":1689634083827},{"_id":"node_modules/hexo-theme-inside/lib/generator/entries/archives.js","hash":"b9c2e6ead1d280d8a2a4db4676b46b2fdf92ccb0","modified":1689634083827},{"_id":"node_modules/hexo-theme-inside/lib/generator/entries/index.js","hash":"9bac29a0223eaf7f3aa69b04502fc049969ae78b","modified":1689634083827},{"_id":"node_modules/hexo-theme-inside/lib/generator/entries/posts.js","hash":"cf7cb8b58714b457a028b14c92958127839aba26","modified":1689634083827},{"_id":"node_modules/hexo-theme-inside/lib/generator/entries/pages.js","hash":"26b314ba0df5acf8b18a152811441b58a69201d0","modified":1689634083827},{"_id":"node_modules/hexo-theme-inside/lib/generator/entries/properties.js","hash":"bb306150254015f9bf6f9e58340eb521231a7e55","modified":1689634083827},{"_id":"node_modules/hexo-theme-inside/lib/generator/entries/search.js","hash":"d874785d284e1b8d18dbcb5358888e522b45988a","modified":1689634083827},{"_id":"node_modules/hexo-theme-inside/lib/generator/entries/tags.js","hash":"2a10e4c4d9c92e0ac26b3884511f12472d43898f","modified":1689634083827},{"_id":"node_modules/hexo-theme-inside/lib/renderer/markdown/index.js","hash":"cbad561e5fbaa126afcb7df990900afa4fc652ee","modified":1689634083827},{"_id":"node_modules/hexo-theme-inside/lib/renderer/markdown/plugins/collapse.js","hash":"eda5c79868f2aac2a2d5f82fe8a483c88f0a43da","modified":1689634083827},{"_id":"node_modules/hexo-theme-inside/lib/renderer/markdown/mixins.js","hash":"e1377839483f2e6dacf5f158bc29d21e5093f27a","modified":1689634083827},{"_id":"node_modules/hexo-theme-inside/lib/renderer/markdown/plugins/index.js","hash":"6d185c7c171606907e663b0ab99a9bcafeef9783","modified":1689634083827},{"_id":"node_modules/hexo-theme-inside/lib/renderer/markdown/plugins/timeline.js","hash":"16ffd617d146d672847a566a94e88aece0b642ea","modified":1689634083827},{"_id":"node_modules/hexo-theme-inside/lib/renderer/markdown/plugins/tree.js","hash":"f7f30e3a1a5d29864f42b693f7a4a6c0a7fb05c2","modified":1689634083827},{"_id":"source/images/books/software-architecture-four-dimensions.png","hash":"5e0238e57931596b0ee09f94e9eb8d14b85b0976","modified":1689635247151},{"_id":"source/images/working-at-google-review-the-fundamentals-hero.jpg","hash":"761ca5ff3fa14c5837c2a4120331668c191a00d4","modified":1689634030567},{"_id":"source/images/working-at-google-study-google-specifc-topics-hero.jpg","hash":"65a6dcc862b3e9a62f6305c4f60a83e049aa0d11","modified":1689634030571},{"_id":"source/images/behavioral-questions.jpg","hash":"f38849e9011ce0e756fc02e20663e4ed65c9c12e","modified":1689634030542},{"_id":"source/images/working-at-google-interview-process-hero.jpg","hash":"10e2a99fb435d5a9bfec7ceab8341fafb832fb8a","modified":1689634030553},{"_id":"node_modules/hexo-theme-inside/source/main.543c891b4aad158701f3.js","hash":"9d0edfa9c6b5f269f1c2c5d622e23ec6dbd8141c","modified":1689634083827},{"_id":"node_modules/hexo-theme-inside/source/_ssr.js","hash":"cdc036e56f497b4d2f933bc5fc19d61564e36beb","modified":1689634083827},{"_id":"public/config.2629bcca4c6f53d3528c.js","hash":"73aae9bc2f4147f4b24c5ecfc580af8d255e9336","modified":1689727230022},{"_id":"public/api/YWJvdXQ.json","hash":"78eeb03cb96bedd28e7d184194fc5dc874968b27","modified":1689727230022},{"_id":"public/api/MjAyMy8wNy8xNy9lbi9mdW5kYW1lbnRhbHMtb2Ytc29mdHdhcmUtYXJjaGl0ZWN0dXJlLXBhcnQtMQ.json","hash":"b77630bc5c90020a36337c99e507d50db1729b90","modified":1689727230022},{"_id":"public/api/MjAyMy8wMy8yOC9lbi9ob3ctY2FuLW1vY2staW50ZXJ2aWV3cy1oZWxwLXlvdQ.json","hash":"a42e5381433de02aa83f4cd82cf66992bd2bbd06","modified":1689727230022},{"_id":"public/api/MjAyMy8wMy8yNi9lbi9ob3ctdG8tc3VjY2VlZC1iZWhhdmlvcmFsLXF1ZXN0aW9ucw.json","hash":"4fa54052943bb8cb86f576b452904a167298a421","modified":1689727230022},{"_id":"public/api/MjAyMy8wMy8yNi9lbi93b3JraW5nLWF0LWdvb2dsZS1vcHRpbWl6ZS15b3VyLXByb2JsZW0tc29sdmluZw.json","hash":"e95dd0a4735cc23107b69f76981803518ce666a9","modified":1689727230022},{"_id":"public/api/MjAyMy8wMy8yNS9lbi93b3JraW5nLWF0LWdvb2dsZS1sZWV0Y29kZS1hbmQtb3RoZXItcmVzb3VyY2Vz.json","hash":"956b861f0fd09d59622563762d2d93b2d990314a","modified":1689727230022},{"_id":"public/api/MjAyMy8wMy8yNS9lbi93b3JraW5nLWF0LWdvb2dsZS1zdHVkeS1nb29nbGUtc3BlY2lmYy10b3BpY3M.json","hash":"d027384cdc93535b27dd44d0953717830356ab4e","modified":1689727230022},{"_id":"public/api/MjAyMy8wMy8yNS9lbi93b3JraW5nLWF0LWdvb2dsZS1yZXZpZXctdGhlLWZ1bmRhbWVudGFscw.json","hash":"79cd0cf74a4160a101e7afe42d45180ba29985a6","modified":1689727230022},{"_id":"public/api/MjAyMy8wMy8yNS9lbi93b3JraW5nLWF0LWdvb2dsZS1pbnRlcnZpZXctcHJvY2Vzcw.json","hash":"4a769fe77f859bc708c90d259c30d04971bac60b","modified":1689727230022},{"_id":"public/api/MjAyMy8wMy8yNS9lbi93b3JraW5nLWF0LWdvb2dsZS1wcmVwYXJhdGlvbi1wbGFu.json","hash":"a853f2f90b66a389fe1ea3d44b5d987f1f72863e","modified":1689727230022},{"_id":"public/api/cGFnZQ.json","hash":"842e2f80bbf18f1510e34cf778e9c590196eeb75","modified":1689727230022},{"_id":"public/api/dGFncw.json","hash":"5a898f5b838a1a809967efa638ef38a84ed63806","modified":1689727230022},{"_id":"public/api/dGFncy9ib29rcw.json","hash":"fd55e832abbc4322502dd7eecab983a978906854","modified":1689727230022},{"_id":"public/api/dGFncy9nb29nbGU.json","hash":"be328665d9d9917ac03e5313ff836a97d740686c","modified":1689727230022},{"_id":"public/api/dGFncy9pbnRlcnZpZXc.json","hash":"c75cdb6a50bc3256898d3f19b95d17be9872ae60","modified":1689727230022},{"_id":"public/api/dGFncy9sZWV0Y29kZQ.json","hash":"4e9be48eb60a5b2a172cac934fd3bd8ea8c6070a","modified":1689727230022},{"_id":"public/api/dGFncy9zb2Z0d2FyZQ.json","hash":"ebdf9486fce67fe3588aa443706accfe47071a37","modified":1689727230022},{"_id":"public/api/dGFncy9zb2Z0d2FyZS1hcmNoaXRlY3R1cmU.json","hash":"23a61b1371e43956a54de25fc9a12fe541e1c555","modified":1689727230022},{"_id":"public/api/Y2F0ZWdvcmllcw.json","hash":"8d2b169d580343f998548e13c7aeaad60569b2ec","modified":1689727230022},{"_id":"public/api/Y2F0ZWdvcmllcy9GQUFORw.json","hash":"b661cd8d3aa7d372118214e83477ab6434f28530","modified":1689727230022},{"_id":"public/api/Y2F0ZWdvcmllcy9Tb2Z0d2FyZSBBcmNoaXRlY3R1cmU.json","hash":"7f78465146d708cd73cda11cdadd5fb4e9e1b12e","modified":1689727230022},{"_id":"public/api/YXJjaGl2ZXM.json","hash":"294e5d8a2591490ecb41c9b27666eb3251a3f15c","modified":1689727230022},{"_id":"public/api/c2VhcmNo.json","hash":"41314bfe9fabf2e8f009345080d6ae5678df75f8","modified":1689727230022},{"_id":"public/sitemap.xml","hash":"45fa49f0bcdd4a472c721cb9ddae1f3ccacf0ebc","modified":1689727230022},{"_id":"public/disqus.645052c6.js","hash":"fe4907e0c3b9ed75321ce696ffa627869bb76ef0","modified":1689727230022},{"_id":"public/about/index.html","hash":"4c6bf9ee7846eabb63dc91700e453dca5fde7ad2","modified":1689727230022},{"_id":"public/404/index.html","hash":"5f7eb2f11d60a5bffe97953195231249367735cb","modified":1689727230022},{"_id":"public/2023/07/17/en/fundamentals-of-software-architecture-part-1/index.html","hash":"2fe952ae38d2d08776eca17257c6d4fca1e09ea7","modified":1689727230022},{"_id":"public/2023/03/28/en/how-can-mock-interviews-help-you/index.html","hash":"e4a9433a6ba77f235bc3ad0cdf64b61dd74d40d0","modified":1689727230022},{"_id":"public/2023/03/26/en/how-to-succeed-behavioral-questions/index.html","hash":"cee391020e2454b09b5821362fae359e48e64329","modified":1689727230022},{"_id":"public/2023/03/26/en/working-at-google-optimize-your-problem-solving/index.html","hash":"528a8215d9052c3cc59f70b5bcddef340030eb22","modified":1689727230022},{"_id":"public/2023/03/25/en/working-at-google-leetcode-and-other-resources/index.html","hash":"5085f3b3f2b39c82e0557699434c5252041defee","modified":1689727230022},{"_id":"public/2023/03/25/en/working-at-google-study-google-specifc-topics/index.html","hash":"b85fd5debaff71fc05f21738378305684271e947","modified":1689727230022},{"_id":"public/2023/03/25/en/working-at-google-review-the-fundamentals/index.html","hash":"912cec09a0c51d41e1e6aab6b49e81dd1b8f1724","modified":1689727230022},{"_id":"public/2023/03/25/en/working-at-google-interview-process/index.html","hash":"9c15f08c0c4e676b675d0c962868a01c6db28faa","modified":1689727230022},{"_id":"public/2023/03/25/en/working-at-google-preparation-plan/index.html","hash":"2869d4f01ec36a7dff820b96b2f3fc7b98641b38","modified":1689727230022},{"_id":"public/index.html","hash":"3f6be5b5da7e449fb4cf068cd5e5ea0848382ede","modified":1689727230022},{"_id":"public/tags/index.html","hash":"582176afb3f5dccd93abb98c6883d464410b9381","modified":1689727230022},{"_id":"public/tags/books/index.html","hash":"ad6b57e8e0522ed7ff6afdd611afb1a55e513d27","modified":1689727230022},{"_id":"public/tags/google/index.html","hash":"a53db04528e0972e93947c29bf0b5b9edad73504","modified":1689727230022},{"_id":"public/tags/interview/index.html","hash":"b573962ed0a75ed9a87dd6ab66b818525fb141a9","modified":1689727230022},{"_id":"public/tags/leetcode/index.html","hash":"6038bc1c6433665a703fda7b0c99259e13e091ef","modified":1689727230022},{"_id":"public/tags/software/index.html","hash":"397ea1a860f93b6ced609630cba9f6bf1f92e52f","modified":1689727230022},{"_id":"public/tags/software-architecture/index.html","hash":"f6f473567559d8a9f4b85f81a875b28bb7c60e70","modified":1689727230022},{"_id":"public/categories/index.html","hash":"4f06168705131d3c1965d77a08642450518e28e0","modified":1689727230022},{"_id":"public/categories/FAANG/index.html","hash":"d85d3869610877cbac15386a3951220e5aabb0a1","modified":1689727230022},{"_id":"public/categories/Software Architecture/index.html","hash":"d2d4f70547480eaa3f6b9d37e73b5f699e1dd269","modified":1689727230022},{"_id":"public/archives/index.html","hash":"6006fd0bae05bfdde4197a81b98f7fe723c3184e","modified":1689727230022},{"_id":"public/search/index.html","hash":"7e84ea6e429f31a8173f0fe2cd18b71b4b3dd3bb","modified":1689727230022},{"_id":"public/images/favicon-32x32.png","hash":"3931c919ed3cbe05699ae7bf3d2bdc6bbc5f9136","modified":1689727230022},{"_id":"public/images/favicon.ico","hash":"1dfacab8c7afd34ae977b1fae2cd5f0d24716bfd","modified":1689727230022},{"_id":"public/images/xfaang-google-thumbnail.jpg","hash":"3587836dc92c6f9a7146145237c81d0d77399709","modified":1689727230022},{"_id":"public/3rdpartylicenses.txt","hash":"1b7039121dbb0d2772eb0bfe827e029a144caef7","modified":1689727230022},{"_id":"public/runtime.1ed960b0635ea0669f87.js","hash":"1a23d8cab7062a7fae5ed6184d88f6b37c77516b","modified":1689727230022},{"_id":"public/theme.9ecc9ab1.js","hash":"c8ddb3e8d21e4591fd8d3c8c002234183deb49a0","modified":1689727230022},{"_id":"public/polyfills.b7bf56fc45f931a8b83e.js","hash":"4f742c8c6f028dc25a8a020f6909128b03cfda48","modified":1689727230022},{"_id":"public/main.543c891b4aad158701f3.js","hash":"9d0edfa9c6b5f269f1c2c5d622e23ec6dbd8141c","modified":1689727230022},{"_id":"public/styles.91e7dfca63c7c151daa6.css","hash":"be513488e892c07b5734dd0a095d0c4fc4c7804b","modified":1689727230022},{"_id":"public/images/faang-google-thumbnail.jpg","hash":"0bb66e4bb79ae0ae7902caa63311640030e60d8f","modified":1689727230022},{"_id":"public/images/faang-thumbnail.jpg","hash":"75a354c7c96ea65514780e5e70061ac982d60bd4","modified":1689727230022},{"_id":"public/images/books/cover-fundamentals-software-architecture.png","hash":"0cdcaf8b7a3b0a46d703eccbd7c025ab7b633d3e","modified":1689727230022},{"_id":"public/images/working-at-google-leetcode-and-other-resources-hero.jpg","hash":"95a66f3ec14798d8ad23835f4c24f2cb3ff4ad61","modified":1689727230022},{"_id":"public/images/working-at-google-preparation-plan-hero.jpg","hash":"d8f4fd3f91d2c187ca9ba39480011ce20e1a4442","modified":1689727230022},{"_id":"public/images/books/software-architecture-four-dimensions.png","hash":"5e0238e57931596b0ee09f94e9eb8d14b85b0976","modified":1689727230022},{"_id":"public/images/working-at-google-review-the-fundamentals-hero.jpg","hash":"761ca5ff3fa14c5837c2a4120331668c191a00d4","modified":1689727230022},{"_id":"public/images/working-at-google-study-google-specifc-topics-hero.jpg","hash":"65a6dcc862b3e9a62f6305c4f60a83e049aa0d11","modified":1689727230022},{"_id":"public/images/working-at-google-interview-process-hero.jpg","hash":"10e2a99fb435d5a9bfec7ceab8341fafb832fb8a","modified":1689727230022},{"_id":"public/images/behavioral-questions.jpg","hash":"f38849e9011ce0e756fc02e20663e4ed65c9c12e","modified":1689727230022},{"_id":"source/images/books/software-architecture-traditional-approach.png","hash":"eb6b87dc3607cb134bfd58738df5a56f613c154b","modified":1689800324489},{"_id":"source/images/books/software-architecture-knowledge-representation.png","hash":"a3f21194ba66fc1f7f3753a7f9ec1257c1d37ded","modified":1689800603832},{"_id":"source/images/books/software-architecture-explicit-implicit-characteristics.png","hash":"bcd5e47f4ac8136a881b282a839f8712729c352b","modified":1689802512775},{"_id":"source/images/books/software-architecture-characteristics.png","hash":"b66bf0ebdaf1dcf9e0b9b47a0e1893c3478be91c","modified":1689802512797}],"Category":[{"name":"FAANG","_id":"clk8zxu0j000350t2arh49a42"},{"name":"Software Architecture","_id":"clk8zxu0o000850t2804rhhx0"}],"Data":[],"Page":[{"title":"👋 Hello","date":"2023-07-18T23:54:24.000Z","author":"codesandtags","_content":"\n<div style=\"width:100%; text-align:center\">\n  <img src=\"https://media.licdn.com/dms/image/C5603AQGPHNBZbhb3uA/profile-displayphoto-shrink_400_400/0/1654718787328?e=1695254400&v=beta&t=kb7cjNa7i5DfpIPT27slp5KjrbzsIlPWlbjY2MS2uDA\" style=\"width:150px;border-radius:50%;\"/>\n</div>\n\nI'm [Edwin Torres](https://www.linkedin.com/in/edwintorresdeveloper/), a human passionate by learning new stuffs, help others and I'm in love by the Front end Development, cool visual stuffs, and soon Machine Learning. One of my biggest purpose in life is to create a change in the world by helping people in the things I'm good, that's why I keep continue learning everyday to be a better professional and person.\n\n[Codes and Tags](https://codesandtags.org) is my personal project where I have fun, learn and share things with the world.\n","source":"about/index.md","raw":"---\ntitle: 👋 Hello\ndate: 2023-07-18 19:54:24\nauthor: codesandtags\n---\n\n<div style=\"width:100%; text-align:center\">\n  <img src=\"https://media.licdn.com/dms/image/C5603AQGPHNBZbhb3uA/profile-displayphoto-shrink_400_400/0/1654718787328?e=1695254400&v=beta&t=kb7cjNa7i5DfpIPT27slp5KjrbzsIlPWlbjY2MS2uDA\" style=\"width:150px;border-radius:50%;\"/>\n</div>\n\nI'm [Edwin Torres](https://www.linkedin.com/in/edwintorresdeveloper/), a human passionate by learning new stuffs, help others and I'm in love by the Front end Development, cool visual stuffs, and soon Machine Learning. One of my biggest purpose in life is to create a change in the world by helping people in the things I'm good, that's why I keep continue learning everyday to be a better professional and person.\n\n[Codes and Tags](https://codesandtags.org) is my personal project where I have fun, learn and share things with the world.\n","updated":"2023-07-19T00:28:47.878Z","path":"about/index.html","comments":1,"layout":"page","_id":"clk8zxu0a000050t2bczj6e53","content":"<div style=\"width:100%; text-align:center\">\n  <img src=\"https://media.licdn.com/dms/image/C5603AQGPHNBZbhb3uA/profile-displayphoto-shrink_400_400/0/1654718787328?e=1695254400&v=beta&t=kb7cjNa7i5DfpIPT27slp5KjrbzsIlPWlbjY2MS2uDA\" style=\"width:150px;border-radius:50%;\"/>\n</div>\n<p>I’m <a href=\"https://www.linkedin.com/in/edwintorresdeveloper/\" target=\"_blank\">Edwin Torres</a>, a human passionate by learning new stuffs, help others and I’m in love by the Front end Development, cool visual stuffs, and soon Machine Learning. One of my biggest purpose in life is to create a change in the world by helping people in the things I’m good, that’s why I keep continue learning everyday to be a better professional and person.</p>\n<p><a href=\"https://codesandtags.org\" target=\"_blank\">Codes and Tags</a> is my personal project where I have fun, learn and share things with the world.</p>\n","site":{"data":{}},"excerpt":"","more":"<div style=\"width:100%; text-align:center\">\n  <img src=\"https://media.licdn.com/dms/image/C5603AQGPHNBZbhb3uA/profile-displayphoto-shrink_400_400/0/1654718787328?e=1695254400&v=beta&t=kb7cjNa7i5DfpIPT27slp5KjrbzsIlPWlbjY2MS2uDA\" style=\"width:150px;border-radius:50%;\"/>\n</div>\n<p>I’m <a href=\"https://www.linkedin.com/in/edwintorresdeveloper/\" target=\"_blank\">Edwin Torres</a>, a human passionate by learning new stuffs, help others and I’m in love by the Front end Development, cool visual stuffs, and soon Machine Learning. One of my biggest purpose in life is to create a change in the world by helping people in the things I’m good, that’s why I keep continue learning everyday to be a better professional and person.</p>\n<p><a href=\"https://codesandtags.org\" target=\"_blank\">Codes and Tags</a> is my personal project where I have fun, learn and share things with the world.</p>\n","date_formatted":{"ll":"Jul 18, 2023","L":"07/18/2023","MM-DD":"07-18"},"link":"about","plink":"http://codesandtags.io/blog/about/","type":"page","reading_time":"105 words in 1 min"}],"Post":[{"title":"How can Mock Interviews help you?","date":"2023-03-28T21:50:23.000Z","excerpt":"Mock interviews are practice interviews conducted to help you prepare for the actual job interview. They are an essential part of your interview preparation as they can help you refine your answers, improve your communication skills, and increase your confidence.","author":"codesandtags","thumbnail":"images/faang-thumbnail.jpg","_content":"\nMock interviews are practice interviews conducted to help you prepare for the actual job interview. They are an essential part of your interview preparation as they can help you refine your answers, improve your communication skills, and increase your confidence. Here are some details about mock interviews:\n\n## Purpose\n\nMock interviews simulate the real interview experience, allowing you to practice answering questions, receive feedback on your performance, and identify areas for improvement. They can help you become more comfortable with the interview process and reduce anxiety on the day of the actual interview.\n\n## Format\n\nMock interviews can be conducted in various formats, including in-person, over the phone, or via video conferencing. They may be one-on-one, panel-style, or group interviews, depending on the format of the actual job interview.\n\n## Preparation\n\nBefore the mock interview, research the company and the role, review your resume, and prepare answers to common interview questions. Treat the mock interview as if it were the real thing, dressing professionally and arriving on time.\n\n## Conducting mock interviews\n\nFind a partner (friend, family member, mentor, or career coach) to conduct the mock interview. Provide them with a list of potential questions to ask, including both technical and behavioral questions. If possible, choose someone who is familiar with the industry or has experience conducting interviews.\n\n## Receiving feedback\n\nAfter the mock interview, ask your partner for feedback on your performance. Encourage them to critique your answers, body language, communication skills, and overall demeanor. Take note of their suggestions and use them to improve your performance in future interviews.\n\n## Practice multiple mock interviews\n\nConducting several mock interviews with different partners can help you gain diverse perspectives and refine your answers. This will also help you become more comfortable with the interview process and adapt to different interview styles.\n\n## Online platforms for mock interviews\n\nThere are several online platforms, such as Pramp and Interviewing.io, that offer mock interviews with industry professionals. These platforms can provide valuable insights and feedback from people who have experience in the field.\n\n## Record your mock interviews\n\nRecording your mock interviews can be helpful in identifying areas for improvement. Review the recording to assess your body language, tone of voice, and overall presentation. This can help you become more self-aware and make necessary adjustments before the actual interview.\n\nBy participating in mock interviews, you can improve your interview skills, identify your strengths and weaknesses, and become more confident in your ability to perform well during the actual job interview.\n","source":"_posts/en/how-can-mock-interviews-help-you.md","raw":"---\ntitle: How can Mock Interviews help you?\ndate: 2023-03-28 17:50:23\ntags: [interview]\nexcerpt: Mock interviews are practice interviews conducted to help you prepare for the actual job interview. They are an essential part of your interview preparation as they can help you refine your answers, improve your communication skills, and increase your confidence.\nauthor: codesandtags\ncategory: FAANG\nthumbnail: images/faang-thumbnail.jpg\n---\n\nMock interviews are practice interviews conducted to help you prepare for the actual job interview. They are an essential part of your interview preparation as they can help you refine your answers, improve your communication skills, and increase your confidence. Here are some details about mock interviews:\n\n## Purpose\n\nMock interviews simulate the real interview experience, allowing you to practice answering questions, receive feedback on your performance, and identify areas for improvement. They can help you become more comfortable with the interview process and reduce anxiety on the day of the actual interview.\n\n## Format\n\nMock interviews can be conducted in various formats, including in-person, over the phone, or via video conferencing. They may be one-on-one, panel-style, or group interviews, depending on the format of the actual job interview.\n\n## Preparation\n\nBefore the mock interview, research the company and the role, review your resume, and prepare answers to common interview questions. Treat the mock interview as if it were the real thing, dressing professionally and arriving on time.\n\n## Conducting mock interviews\n\nFind a partner (friend, family member, mentor, or career coach) to conduct the mock interview. Provide them with a list of potential questions to ask, including both technical and behavioral questions. If possible, choose someone who is familiar with the industry or has experience conducting interviews.\n\n## Receiving feedback\n\nAfter the mock interview, ask your partner for feedback on your performance. Encourage them to critique your answers, body language, communication skills, and overall demeanor. Take note of their suggestions and use them to improve your performance in future interviews.\n\n## Practice multiple mock interviews\n\nConducting several mock interviews with different partners can help you gain diverse perspectives and refine your answers. This will also help you become more comfortable with the interview process and adapt to different interview styles.\n\n## Online platforms for mock interviews\n\nThere are several online platforms, such as Pramp and Interviewing.io, that offer mock interviews with industry professionals. These platforms can provide valuable insights and feedback from people who have experience in the field.\n\n## Record your mock interviews\n\nRecording your mock interviews can be helpful in identifying areas for improvement. Review the recording to assess your body language, tone of voice, and overall presentation. This can help you become more self-aware and make necessary adjustments before the actual interview.\n\nBy participating in mock interviews, you can improve your interview skills, identify your strengths and weaknesses, and become more confident in your ability to perform well during the actual job interview.\n","slug":"en/how-can-mock-interviews-help-you","published":1,"updated":"2023-07-17T22:47:10.536Z","comments":1,"layout":"post","photos":[],"link":"2023/03/28/en/how-can-mock-interviews-help-you","_id":"clk8zxu0e000150t2h1de0awd","content":"<p>Mock interviews are practice interviews conducted to help you prepare for the actual job interview. They are an essential part of your interview preparation as they can help you refine your answers, improve your communication skills, and increase your confidence. Here are some details about mock interviews:</p>\n<h2 id=\"purpose\">Purpose<a title=\"#purpose\" href=\"#purpose\"></a></h2>\n<p>Mock interviews simulate the real interview experience, allowing you to practice answering questions, receive feedback on your performance, and identify areas for improvement. They can help you become more comfortable with the interview process and reduce anxiety on the day of the actual interview.</p>\n<h2 id=\"format\">Format<a title=\"#format\" href=\"#format\"></a></h2>\n<p>Mock interviews can be conducted in various formats, including in-person, over the phone, or via video conferencing. They may be one-on-one, panel-style, or group interviews, depending on the format of the actual job interview.</p>\n<h2 id=\"preparation\">Preparation<a title=\"#preparation\" href=\"#preparation\"></a></h2>\n<p>Before the mock interview, research the company and the role, review your resume, and prepare answers to common interview questions. Treat the mock interview as if it were the real thing, dressing professionally and arriving on time.</p>\n<h2 id=\"conducting-mock-interviews\">Conducting mock interviews<a title=\"#conducting-mock-interviews\" href=\"#conducting-mock-interviews\"></a></h2>\n<p>Find a partner (friend, family member, mentor, or career coach) to conduct the mock interview. Provide them with a list of potential questions to ask, including both technical and behavioral questions. If possible, choose someone who is familiar with the industry or has experience conducting interviews.</p>\n<h2 id=\"receiving-feedback\">Receiving feedback<a title=\"#receiving-feedback\" href=\"#receiving-feedback\"></a></h2>\n<p>After the mock interview, ask your partner for feedback on your performance. Encourage them to critique your answers, body language, communication skills, and overall demeanor. Take note of their suggestions and use them to improve your performance in future interviews.</p>\n<h2 id=\"practice-multiple-mock-interviews\">Practice multiple mock interviews<a title=\"#practice-multiple-mock-interviews\" href=\"#practice-multiple-mock-interviews\"></a></h2>\n<p>Conducting several mock interviews with different partners can help you gain diverse perspectives and refine your answers. This will also help you become more comfortable with the interview process and adapt to different interview styles.</p>\n<h2 id=\"online-platforms-for-mock-interviews\">Online platforms for mock interviews<a title=\"#online-platforms-for-mock-interviews\" href=\"#online-platforms-for-mock-interviews\"></a></h2>\n<p>There are several online platforms, such as Pramp and <a href=\"http://Interviewing.io\">Interviewing.io</a>, that offer mock interviews with industry professionals. These platforms can provide valuable insights and feedback from people who have experience in the field.</p>\n<h2 id=\"record-your-mock-interviews\">Record your mock interviews<a title=\"#record-your-mock-interviews\" href=\"#record-your-mock-interviews\"></a></h2>\n<p>Recording your mock interviews can be helpful in identifying areas for improvement. Review the recording to assess your body language, tone of voice, and overall presentation. This can help you become more self-aware and make necessary adjustments before the actual interview.</p>\n<p>By participating in mock interviews, you can improve your interview skills, identify your strengths and weaknesses, and become more confident in your ability to perform well during the actual job interview.</p>\n","site":{"data":{}},"more":"<p>Mock interviews are practice interviews conducted to help you prepare for the actual job interview. They are an essential part of your interview preparation as they can help you refine your answers, improve your communication skills, and increase your confidence. Here are some details about mock interviews:</p>\n<h2 id=\"purpose\">Purpose<a title=\"#purpose\" href=\"#purpose\"></a></h2>\n<p>Mock interviews simulate the real interview experience, allowing you to practice answering questions, receive feedback on your performance, and identify areas for improvement. They can help you become more comfortable with the interview process and reduce anxiety on the day of the actual interview.</p>\n<h2 id=\"format\">Format<a title=\"#format\" href=\"#format\"></a></h2>\n<p>Mock interviews can be conducted in various formats, including in-person, over the phone, or via video conferencing. They may be one-on-one, panel-style, or group interviews, depending on the format of the actual job interview.</p>\n<h2 id=\"preparation\">Preparation<a title=\"#preparation\" href=\"#preparation\"></a></h2>\n<p>Before the mock interview, research the company and the role, review your resume, and prepare answers to common interview questions. Treat the mock interview as if it were the real thing, dressing professionally and arriving on time.</p>\n<h2 id=\"conducting-mock-interviews\">Conducting mock interviews<a title=\"#conducting-mock-interviews\" href=\"#conducting-mock-interviews\"></a></h2>\n<p>Find a partner (friend, family member, mentor, or career coach) to conduct the mock interview. Provide them with a list of potential questions to ask, including both technical and behavioral questions. If possible, choose someone who is familiar with the industry or has experience conducting interviews.</p>\n<h2 id=\"receiving-feedback\">Receiving feedback<a title=\"#receiving-feedback\" href=\"#receiving-feedback\"></a></h2>\n<p>After the mock interview, ask your partner for feedback on your performance. Encourage them to critique your answers, body language, communication skills, and overall demeanor. Take note of their suggestions and use them to improve your performance in future interviews.</p>\n<h2 id=\"practice-multiple-mock-interviews\">Practice multiple mock interviews<a title=\"#practice-multiple-mock-interviews\" href=\"#practice-multiple-mock-interviews\"></a></h2>\n<p>Conducting several mock interviews with different partners can help you gain diverse perspectives and refine your answers. This will also help you become more comfortable with the interview process and adapt to different interview styles.</p>\n<h2 id=\"online-platforms-for-mock-interviews\">Online platforms for mock interviews<a title=\"#online-platforms-for-mock-interviews\" href=\"#online-platforms-for-mock-interviews\"></a></h2>\n<p>There are several online platforms, such as Pramp and <a href=\"http://Interviewing.io\">Interviewing.io</a>, that offer mock interviews with industry professionals. These platforms can provide valuable insights and feedback from people who have experience in the field.</p>\n<h2 id=\"record-your-mock-interviews\">Record your mock interviews<a title=\"#record-your-mock-interviews\" href=\"#record-your-mock-interviews\"></a></h2>\n<p>Recording your mock interviews can be helpful in identifying areas for improvement. Review the recording to assess your body language, tone of voice, and overall presentation. This can help you become more self-aware and make necessary adjustments before the actual interview.</p>\n<p>By participating in mock interviews, you can improve your interview skills, identify your strengths and weaknesses, and become more confident in your ability to perform well during the actual job interview.</p>\n","date_formatted":{"ll":"Mar 28, 2023","L":"03/28/2023","MM-DD":"03-28"},"plink":"http://codesandtags.io/blog/2023/03/28/en/how-can-mock-interviews-help-you/","type":"post","toc":[{"id":"purpose","title":"Purpose","index":"1"},{"id":"format","title":"Format","index":"2"},{"id":"preparation","title":"Preparation","index":"3"},{"id":"conducting-mock-interviews","title":"Conducting mock interviews","index":"4"},{"id":"receiving-feedback","title":"Receiving feedback","index":"5"},{"id":"practice-multiple-mock-interviews","title":"Practice multiple mock interviews","index":"6"},{"id":"online-platforms-for-mock-interviews","title":"Online platforms for mock interviews","index":"7"},{"id":"record-your-mock-interviews","title":"Record your mock interviews","index":"8"}],"reading_time":"415 words in 3 min"},{"title":"Fundamentals of Software Architecture Book - Part 1","date":"2023-07-17T22:50:03.000Z","excerpt":"Here I have the relevant points to me of the book Fundamentals of Software Architecture by Mark Richards and Neal Ford.","thumbnail":"images/books/cover-fundamentals-software-architecture.png","_content":"\n## Fundamentals of Software Architecture\n\n### Book Details\n\n- **Title**: [Fundamentals of Software Architecture](https://www.oreilly.com/library/view/fundamentals-of-software/9781492043447/)\n- **Author**: Mark Richards, Neal Ford\n- **Publication Year**: 2020\n\nThis year **2023** I've started to read more books, and I've decided to write a summary of each book I read. This is the first one, and I hope you enjoy it.\n\n### Summary\n\nThis book is a great introduction to software architecture, it covers the basics of software architecture, and it's a great starting point for anyone who wants to learn more about software architecture. Here are some of the topics covered in this book and I want to answer the self-assessment questions for each chapter.\n\n---\n\n## Chapter 1: Introduction\n\n1. **What are the four dimensions that define software architecture?**\n\n![four dimensions software architecture](images/books/software-architecture-four-dimensions.png)\n\n- **Architecture characteristics**: Define the success criteria of a system, which is generally orthogonal to the functionality of the system. Notice that all of the characteristics listed do not require knowledge of the functionality of the system, yet they are required in order for the system to function properly.\n- **Architecture Decisions**: Define the rules for how a system should be constructed. For example, an architect might make an architecture decision that only the business and services layers within a layered architecture can access the database.\n- **Structure**: Refers to the type of architecture style (or styles) the system is implemented in (such as microservices, layered, or microkernel)\n- Design principles: Define a guideline of principles rather than a hard-and-fast rule.\n\n2. **What is the difference between an architecture decision and a design principle?**\n\n- Architecture decisions form the constraints of the system and direct the development teams on what is and what isn’t allowed.\n- Design principles are guidelines that help development teams make decisions about how to implement the system.\n\n3. **List the eight core expectations of a software architect**\n\n- Make architecture decisions\n- Continually analyze the architecture\n- Keep current with latest trends\n- Ensure compliance with decisions\n- Diverse exposure and experience\n- Have business domain knowledge\n- Possess interpersonal skills\n- Understand and navigate politics\n\n4. **What is the First Law of Software Architecture?**\n\n> Everything in software architecture is a trade-off. -- First Law of Software Architecture\n\n> Why is more important than how. -- Second Law of Software Architecture\n\n---\n\n## Chapter 2: Architectural Thinking\n\n1. **Describe the traditional approach of architecture versus development and explain why that approach no longer works.**\n\n![Traditional approach architecture vs design](images/books/software-architecture-traditional-approach.png)\n\nThe traditional approach implies that architecture is something that is fully defined up front and then merely implemented by developers. However, this approach has been found to have several major drawbacks:\n\n- **Lack of Flexibility**: Once the architecture is defined, it can be very difficult to change. However, software development is often a highly unpredictable process, and changes in requirements or technologies may necessitate changes in the architecture.\n\n- **Communication Breakdown**: Because architects and developers often work in isolation from each other, there can be a lack of understanding and communication between the two groups. Architects may make decisions without fully understanding the implementation implications, and developers may struggle to implement an architecture they had no part in designing.\n\n- **Reality Gap**: Architectural designs often look good on paper but may not work as well when actually implemented. This gap between design and reality can lead to problems and delays.\n\n2. **List the three levels of knowledge in the knowledge triangle and provide an example of each.**\n\n![Knowledge representation](images/books/software-architecture-knowledge-representation.png)\n\nOur knowledge pyramid illustrates how fundamentally different the role of architect compares to developer. Developers spend their whole careers honing expertise, and transitioning to the architect role means a shift in that perspective, which many individuals find difficult. The architect role requires a different set of skills, and the knowledge pyramid illustrates this shift.\n\n3. **Why is it more important for an architect to focus on technical breadth rather than technical depth?**\n\nFocusing on technical breadth means acquiring a wide-ranging understanding of various technologies, patterns, languages, platforms, and principles. This breadth allows architects to:\n\n- **See the Big Picture**: Understand how different components and technologies fit together and influence each other. This is essential when designing complex systems where decisions in one area can significantly impact other areas.\n\n- **Make Informed Decisions**: Choose the most suitable technologies and designs for the system's requirements. A broad knowledge allows architects to consider a wider range of options and make more informed decisions.\n\n- **Communicate Effectively**: Communicate with different stakeholders, including developers, project managers, business stakeholders, and others. Each group may have different areas of expertise and concerns, and a broad understanding helps architects bridge these gaps.\n\n- **Adapt to Change**: Stay adaptable and resilient in the face of changing requirements, technologies, and business environments. A wide knowledge base allows architects to learn and adopt new technologies more easily.\n\nFor example, as an architect, it is more beneficial to know that five solutions exist for a particular problem than to have singular expertise in only one.\n\n4. **What are some of the ways of maintaining your technical depth and remaining hands-on as an architect?**\n\n- **Coding**: Try to spend some of your time coding. This could be writing prototypes, creating proofs of concept, fixing bugs, or contributing to critical parts of the system. This not only helps maintain your coding skills but also gives you firsthand experience with the technologies you're using.\n\n- **Education**: Continually educate yourself about new technologies, languages, and methodologies. This can involve reading books, articles, or research papers, attending conferences or webinars, or taking online courses.\n\n- **Personal Projects**: Work on personal projects outside of your day-to-day work. This can be a great way to learn new technologies, experiment with different architectures, or just keep your coding skills sharp.\n\n- **Code Reviews**: Participate in code reviews. This gives you a chance to see how the architecture is being implemented, spot potential issues, and provide valuable feedback to developers.\n\n- **Pair Programming**: Occasionally pair program with developers. This is another great way to stay familiar with the codebase and the challenges that developers face.\n\n- **Prototyping**: When considering a new technology or architectural approach, create a small prototype. This can provide valuable insights that you wouldn't get from reading about it alone.\n\n- **Stay Connected with the Developer Community**: Participate in tech meetups, online forums, open-source projects, and other communities. This can keep you updated on new technologies and best practices, and provide opportunities to learn from others.\n\nBy staying hands-on and maintaining technical depth, you'll be a more effective architect. You'll understand the challenges that developers face, make better architectural decisions, and be able to communicate more effectively with your team.\n\n---\n\n## Chapter 3 - Modularity\n\n1. What is meant by the term connascence?\n\n**Connascence** is a metric used to describe the coupling or the degree of interdependence between two or more parts of a software system.\n\n2. What is the difference between static and dynamic connascence?\n\n**Static connascence** is coupling that can be determined by examining the source code, while **dynamic connascence** is coupling that can only be determined when the code is running.\n\n3. What does connascence of type mean? Is it static or dynamic connascence?\n\n**Connascence of type** is when multiple parts of a program must agree on the type of an entity. It is a form of static connascence.\n\n4. What is the strongest form of connascence?\n\n**Connascence of Identity** is the strongest form of connascence. It refers to when multiple parts of the system depend on a mutable entity's identity.\n\n5. What is the weakest form of connascence?\n\n**Connascence of Name**, where multiple parts of the system must agree on the name of an entity, is considered the weakest form of connascence.\n\n6. Which is preferred within a code base—static or dynamic connascence?\n\n**Static connascence** is generally preferred within a code base as it is easier to identify and manage than dynamic connascence.\n\n---\n\n## Chapter 4 - Modularity\n\n![Architecture Characteristics](images/books/software-architecture-characteristics.png)\n\n**1. What three criteria must an attribute meet to be considered an architecture characteristic?**\n\nAn attribute must be testable, contribute to the architecture of the system, and provide a way to measure and quantify it.\n\n**2. What is the difference between an implicit characteristic and an explicit one? Provide an example of each.**\n\n![Architecture Characteristics](images/books/software-architecture-explicit-implicit-characteristics.png)\n\nAn implicit characteristic is one that is required or assumed but not explicitly stated, like usability. An explicit characteristic is one that is directly stated and designed for, such as response time.\n\n**3. Provide an example of an operational characteristic**\n\nAn example of an operational characteristic is availability, which refers to the system's ability to be in a state to perform its designated function during operation.\n\n**4. Provide an example of a structural characteristic.**\n\nAn example of a structural characteristic is modularity, referring to the degree to which a system's components may be separated and recombined.\n\n**5. Provide an example of a cross-cutting characteristic.**\n\nAn example of a cross-cutting characteristic is security, which is the system's ability to resist unauthorized attempts at usage or behavior modification, affecting multiple components of the system.\n\n**6. Which architecture characteristic is more important to strive for—availability or performance?**\n\nThe importance of availability versus performance **depends on the specific needs of the system being developed**. For a critical system where downtime could be costly, availability may be more important. For a system where speed is crucial for user satisfaction, performance may be more important. The context and requirements of the system dictate which characteristic is more important to strive for.\n","source":"_posts/en/fundamentals-of-software-architecture-part-1.md","raw":"---\ntitle: Fundamentals of Software Architecture Book - Part 1\ndate: 2023-07-17 18:50:03\ntags: [software-architecture, books]\nexcerpt: Here I have the relevant points to me of the book Fundamentals of Software Architecture by Mark Richards and Neal Ford.\ncategory: Software Architecture\nthumbnail: images/books/cover-fundamentals-software-architecture.png\n---\n\n## Fundamentals of Software Architecture\n\n### Book Details\n\n- **Title**: [Fundamentals of Software Architecture](https://www.oreilly.com/library/view/fundamentals-of-software/9781492043447/)\n- **Author**: Mark Richards, Neal Ford\n- **Publication Year**: 2020\n\nThis year **2023** I've started to read more books, and I've decided to write a summary of each book I read. This is the first one, and I hope you enjoy it.\n\n### Summary\n\nThis book is a great introduction to software architecture, it covers the basics of software architecture, and it's a great starting point for anyone who wants to learn more about software architecture. Here are some of the topics covered in this book and I want to answer the self-assessment questions for each chapter.\n\n---\n\n## Chapter 1: Introduction\n\n1. **What are the four dimensions that define software architecture?**\n\n![four dimensions software architecture](images/books/software-architecture-four-dimensions.png)\n\n- **Architecture characteristics**: Define the success criteria of a system, which is generally orthogonal to the functionality of the system. Notice that all of the characteristics listed do not require knowledge of the functionality of the system, yet they are required in order for the system to function properly.\n- **Architecture Decisions**: Define the rules for how a system should be constructed. For example, an architect might make an architecture decision that only the business and services layers within a layered architecture can access the database.\n- **Structure**: Refers to the type of architecture style (or styles) the system is implemented in (such as microservices, layered, or microkernel)\n- Design principles: Define a guideline of principles rather than a hard-and-fast rule.\n\n2. **What is the difference between an architecture decision and a design principle?**\n\n- Architecture decisions form the constraints of the system and direct the development teams on what is and what isn’t allowed.\n- Design principles are guidelines that help development teams make decisions about how to implement the system.\n\n3. **List the eight core expectations of a software architect**\n\n- Make architecture decisions\n- Continually analyze the architecture\n- Keep current with latest trends\n- Ensure compliance with decisions\n- Diverse exposure and experience\n- Have business domain knowledge\n- Possess interpersonal skills\n- Understand and navigate politics\n\n4. **What is the First Law of Software Architecture?**\n\n> Everything in software architecture is a trade-off. -- First Law of Software Architecture\n\n> Why is more important than how. -- Second Law of Software Architecture\n\n---\n\n## Chapter 2: Architectural Thinking\n\n1. **Describe the traditional approach of architecture versus development and explain why that approach no longer works.**\n\n![Traditional approach architecture vs design](images/books/software-architecture-traditional-approach.png)\n\nThe traditional approach implies that architecture is something that is fully defined up front and then merely implemented by developers. However, this approach has been found to have several major drawbacks:\n\n- **Lack of Flexibility**: Once the architecture is defined, it can be very difficult to change. However, software development is often a highly unpredictable process, and changes in requirements or technologies may necessitate changes in the architecture.\n\n- **Communication Breakdown**: Because architects and developers often work in isolation from each other, there can be a lack of understanding and communication between the two groups. Architects may make decisions without fully understanding the implementation implications, and developers may struggle to implement an architecture they had no part in designing.\n\n- **Reality Gap**: Architectural designs often look good on paper but may not work as well when actually implemented. This gap between design and reality can lead to problems and delays.\n\n2. **List the three levels of knowledge in the knowledge triangle and provide an example of each.**\n\n![Knowledge representation](images/books/software-architecture-knowledge-representation.png)\n\nOur knowledge pyramid illustrates how fundamentally different the role of architect compares to developer. Developers spend their whole careers honing expertise, and transitioning to the architect role means a shift in that perspective, which many individuals find difficult. The architect role requires a different set of skills, and the knowledge pyramid illustrates this shift.\n\n3. **Why is it more important for an architect to focus on technical breadth rather than technical depth?**\n\nFocusing on technical breadth means acquiring a wide-ranging understanding of various technologies, patterns, languages, platforms, and principles. This breadth allows architects to:\n\n- **See the Big Picture**: Understand how different components and technologies fit together and influence each other. This is essential when designing complex systems where decisions in one area can significantly impact other areas.\n\n- **Make Informed Decisions**: Choose the most suitable technologies and designs for the system's requirements. A broad knowledge allows architects to consider a wider range of options and make more informed decisions.\n\n- **Communicate Effectively**: Communicate with different stakeholders, including developers, project managers, business stakeholders, and others. Each group may have different areas of expertise and concerns, and a broad understanding helps architects bridge these gaps.\n\n- **Adapt to Change**: Stay adaptable and resilient in the face of changing requirements, technologies, and business environments. A wide knowledge base allows architects to learn and adopt new technologies more easily.\n\nFor example, as an architect, it is more beneficial to know that five solutions exist for a particular problem than to have singular expertise in only one.\n\n4. **What are some of the ways of maintaining your technical depth and remaining hands-on as an architect?**\n\n- **Coding**: Try to spend some of your time coding. This could be writing prototypes, creating proofs of concept, fixing bugs, or contributing to critical parts of the system. This not only helps maintain your coding skills but also gives you firsthand experience with the technologies you're using.\n\n- **Education**: Continually educate yourself about new technologies, languages, and methodologies. This can involve reading books, articles, or research papers, attending conferences or webinars, or taking online courses.\n\n- **Personal Projects**: Work on personal projects outside of your day-to-day work. This can be a great way to learn new technologies, experiment with different architectures, or just keep your coding skills sharp.\n\n- **Code Reviews**: Participate in code reviews. This gives you a chance to see how the architecture is being implemented, spot potential issues, and provide valuable feedback to developers.\n\n- **Pair Programming**: Occasionally pair program with developers. This is another great way to stay familiar with the codebase and the challenges that developers face.\n\n- **Prototyping**: When considering a new technology or architectural approach, create a small prototype. This can provide valuable insights that you wouldn't get from reading about it alone.\n\n- **Stay Connected with the Developer Community**: Participate in tech meetups, online forums, open-source projects, and other communities. This can keep you updated on new technologies and best practices, and provide opportunities to learn from others.\n\nBy staying hands-on and maintaining technical depth, you'll be a more effective architect. You'll understand the challenges that developers face, make better architectural decisions, and be able to communicate more effectively with your team.\n\n---\n\n## Chapter 3 - Modularity\n\n1. What is meant by the term connascence?\n\n**Connascence** is a metric used to describe the coupling or the degree of interdependence between two or more parts of a software system.\n\n2. What is the difference between static and dynamic connascence?\n\n**Static connascence** is coupling that can be determined by examining the source code, while **dynamic connascence** is coupling that can only be determined when the code is running.\n\n3. What does connascence of type mean? Is it static or dynamic connascence?\n\n**Connascence of type** is when multiple parts of a program must agree on the type of an entity. It is a form of static connascence.\n\n4. What is the strongest form of connascence?\n\n**Connascence of Identity** is the strongest form of connascence. It refers to when multiple parts of the system depend on a mutable entity's identity.\n\n5. What is the weakest form of connascence?\n\n**Connascence of Name**, where multiple parts of the system must agree on the name of an entity, is considered the weakest form of connascence.\n\n6. Which is preferred within a code base—static or dynamic connascence?\n\n**Static connascence** is generally preferred within a code base as it is easier to identify and manage than dynamic connascence.\n\n---\n\n## Chapter 4 - Modularity\n\n![Architecture Characteristics](images/books/software-architecture-characteristics.png)\n\n**1. What three criteria must an attribute meet to be considered an architecture characteristic?**\n\nAn attribute must be testable, contribute to the architecture of the system, and provide a way to measure and quantify it.\n\n**2. What is the difference between an implicit characteristic and an explicit one? Provide an example of each.**\n\n![Architecture Characteristics](images/books/software-architecture-explicit-implicit-characteristics.png)\n\nAn implicit characteristic is one that is required or assumed but not explicitly stated, like usability. An explicit characteristic is one that is directly stated and designed for, such as response time.\n\n**3. Provide an example of an operational characteristic**\n\nAn example of an operational characteristic is availability, which refers to the system's ability to be in a state to perform its designated function during operation.\n\n**4. Provide an example of a structural characteristic.**\n\nAn example of a structural characteristic is modularity, referring to the degree to which a system's components may be separated and recombined.\n\n**5. Provide an example of a cross-cutting characteristic.**\n\nAn example of a cross-cutting characteristic is security, which is the system's ability to resist unauthorized attempts at usage or behavior modification, affecting multiple components of the system.\n\n**6. Which architecture characteristic is more important to strive for—availability or performance?**\n\nThe importance of availability versus performance **depends on the specific needs of the system being developed**. For a critical system where downtime could be costly, availability may be more important. For a system where speed is crucial for user satisfaction, performance may be more important. The context and requirements of the system dictate which characteristic is more important to strive for.\n","slug":"en/fundamentals-of-software-architecture-part-1","published":1,"updated":"2023-07-19T21:37:27.653Z","_id":"clk8zxu0i000250t2bnsa44n1","comments":1,"layout":"post","photos":[],"link":"2023/07/17/en/fundamentals-of-software-architecture-part-1","content":"<h2 id=\"fundamentals-of-software-architecture\">Fundamentals of Software Architecture<a title=\"#fundamentals-of-software-architecture\" href=\"#fundamentals-of-software-architecture\"></a></h2>\n<h3 id=\"book-details\">Book Details<a title=\"#book-details\" href=\"#book-details\"></a></h3>\n<ul>\n<li><strong>Title</strong>: <a href=\"https://www.oreilly.com/library/view/fundamentals-of-software/9781492043447/\" target=\"_blank\">Fundamentals of Software Architecture</a></li>\n<li><strong>Author</strong>: Mark Richards, Neal Ford</li>\n<li><strong>Publication Year</strong>: 2020</li>\n</ul>\n<p>This year <strong>2023</strong> I’ve started to read more books, and I’ve decided to write a summary of each book I read. This is the first one, and I hope you enjoy it.</p>\n<h3 id=\"summary\">Summary<a title=\"#summary\" href=\"#summary\"></a></h3>\n<p>This book is a great introduction to software architecture, it covers the basics of software architecture, and it’s a great starting point for anyone who wants to learn more about software architecture. Here are some of the topics covered in this book and I want to answer the self-assessment questions for each chapter.</p>\n<hr>\n<h2 id=\"chapter-1:-introduction\">Chapter 1: Introduction<a title=\"#chapter-1:-introduction\" href=\"#chapter-1:-introduction\"></a></h2>\n<ol>\n<li><strong>What are the four dimensions that define software architecture?</strong></li>\n</ol>\n<p><img src=\"images/books/software-architecture-four-dimensions.png\" alt=\"four dimensions software architecture\" loading=\"lazy\" class=\"φbp\"></p>\n<ul>\n<li><strong>Architecture characteristics</strong>: Define the success criteria of a system, which is generally orthogonal to the functionality of the system. Notice that all of the characteristics listed do not require knowledge of the functionality of the system, yet they are required in order for the system to function properly.</li>\n<li><strong>Architecture Decisions</strong>: Define the rules for how a system should be constructed. For example, an architect might make an architecture decision that only the business and services layers within a layered architecture can access the database.</li>\n<li><strong>Structure</strong>: Refers to the type of architecture style (or styles) the system is implemented in (such as microservices, layered, or microkernel)</li>\n<li>Design principles: Define a guideline of principles rather than a hard-and-fast rule.</li>\n</ul>\n<ol start=\"2\">\n<li><strong>What is the difference between an architecture decision and a design principle?</strong></li>\n</ol>\n<ul>\n<li>Architecture decisions form the constraints of the system and direct the development teams on what is and what isn’t allowed.</li>\n<li>Design principles are guidelines that help development teams make decisions about how to implement the system.</li>\n</ul>\n<ol start=\"3\">\n<li><strong>List the eight core expectations of a software architect</strong></li>\n</ol>\n<ul>\n<li>Make architecture decisions</li>\n<li>Continually analyze the architecture</li>\n<li>Keep current with latest trends</li>\n<li>Ensure compliance with decisions</li>\n<li>Diverse exposure and experience</li>\n<li>Have business domain knowledge</li>\n<li>Possess interpersonal skills</li>\n<li>Understand and navigate politics</li>\n</ul>\n<ol start=\"4\">\n<li><strong>What is the First Law of Software Architecture?</strong></li>\n</ol>\n<blockquote>\n<p>Everything in software architecture is a trade-off. – First Law of Software Architecture</p>\n</blockquote>\n<blockquote>\n<p>Why is more important than how. – Second Law of Software Architecture</p>\n</blockquote>\n<hr>\n<h2 id=\"chapter-2:-architectural-thinking\">Chapter 2: Architectural Thinking<a title=\"#chapter-2:-architectural-thinking\" href=\"#chapter-2:-architectural-thinking\"></a></h2>\n<ol>\n<li><strong>Describe the traditional approach of architecture versus development and explain why that approach no longer works.</strong></li>\n</ol>\n<p><img src=\"images/books/software-architecture-traditional-approach.png\" alt=\"Traditional approach architecture vs design\" loading=\"lazy\" class=\"φbp\"></p>\n<p>The traditional approach implies that architecture is something that is fully defined up front and then merely implemented by developers. However, this approach has been found to have several major drawbacks:</p>\n<ul>\n<li>\n<p><strong>Lack of Flexibility</strong>: Once the architecture is defined, it can be very difficult to change. However, software development is often a highly unpredictable process, and changes in requirements or technologies may necessitate changes in the architecture.</p>\n</li>\n<li>\n<p><strong>Communication Breakdown</strong>: Because architects and developers often work in isolation from each other, there can be a lack of understanding and communication between the two groups. Architects may make decisions without fully understanding the implementation implications, and developers may struggle to implement an architecture they had no part in designing.</p>\n</li>\n<li>\n<p><strong>Reality Gap</strong>: Architectural designs often look good on paper but may not work as well when actually implemented. This gap between design and reality can lead to problems and delays.</p>\n</li>\n</ul>\n<ol start=\"2\">\n<li><strong>List the three levels of knowledge in the knowledge triangle and provide an example of each.</strong></li>\n</ol>\n<p><img src=\"images/books/software-architecture-knowledge-representation.png\" alt=\"Knowledge representation\" loading=\"lazy\" class=\"φbp\"></p>\n<p>Our knowledge pyramid illustrates how fundamentally different the role of architect compares to developer. Developers spend their whole careers honing expertise, and transitioning to the architect role means a shift in that perspective, which many individuals find difficult. The architect role requires a different set of skills, and the knowledge pyramid illustrates this shift.</p>\n<ol start=\"3\">\n<li><strong>Why is it more important for an architect to focus on technical breadth rather than technical depth?</strong></li>\n</ol>\n<p>Focusing on technical breadth means acquiring a wide-ranging understanding of various technologies, patterns, languages, platforms, and principles. This breadth allows architects to:</p>\n<ul>\n<li>\n<p><strong>See the Big Picture</strong>: Understand how different components and technologies fit together and influence each other. This is essential when designing complex systems where decisions in one area can significantly impact other areas.</p>\n</li>\n<li>\n<p><strong>Make Informed Decisions</strong>: Choose the most suitable technologies and designs for the system’s requirements. A broad knowledge allows architects to consider a wider range of options and make more informed decisions.</p>\n</li>\n<li>\n<p><strong>Communicate Effectively</strong>: Communicate with different stakeholders, including developers, project managers, business stakeholders, and others. Each group may have different areas of expertise and concerns, and a broad understanding helps architects bridge these gaps.</p>\n</li>\n<li>\n<p><strong>Adapt to Change</strong>: Stay adaptable and resilient in the face of changing requirements, technologies, and business environments. A wide knowledge base allows architects to learn and adopt new technologies more easily.</p>\n</li>\n</ul>\n<p>For example, as an architect, it is more beneficial to know that five solutions exist for a particular problem than to have singular expertise in only one.</p>\n<ol start=\"4\">\n<li><strong>What are some of the ways of maintaining your technical depth and remaining hands-on as an architect?</strong></li>\n</ol>\n<ul>\n<li>\n<p><strong>Coding</strong>: Try to spend some of your time coding. This could be writing prototypes, creating proofs of concept, fixing bugs, or contributing to critical parts of the system. This not only helps maintain your coding skills but also gives you firsthand experience with the technologies you’re using.</p>\n</li>\n<li>\n<p><strong>Education</strong>: Continually educate yourself about new technologies, languages, and methodologies. This can involve reading books, articles, or research papers, attending conferences or webinars, or taking online courses.</p>\n</li>\n<li>\n<p><strong>Personal Projects</strong>: Work on personal projects outside of your day-to-day work. This can be a great way to learn new technologies, experiment with different architectures, or just keep your coding skills sharp.</p>\n</li>\n<li>\n<p><strong>Code Reviews</strong>: Participate in code reviews. This gives you a chance to see how the architecture is being implemented, spot potential issues, and provide valuable feedback to developers.</p>\n</li>\n<li>\n<p><strong>Pair Programming</strong>: Occasionally pair program with developers. This is another great way to stay familiar with the codebase and the challenges that developers face.</p>\n</li>\n<li>\n<p><strong>Prototyping</strong>: When considering a new technology or architectural approach, create a small prototype. This can provide valuable insights that you wouldn’t get from reading about it alone.</p>\n</li>\n<li>\n<p><strong>Stay Connected with the Developer Community</strong>: Participate in tech meetups, online forums, open-source projects, and other communities. This can keep you updated on new technologies and best practices, and provide opportunities to learn from others.</p>\n</li>\n</ul>\n<p>By staying hands-on and maintaining technical depth, you’ll be a more effective architect. You’ll understand the challenges that developers face, make better architectural decisions, and be able to communicate more effectively with your team.</p>\n<hr>\n<h2 id=\"chapter-3---modularity\">Chapter 3 - Modularity<a title=\"#chapter-3---modularity\" href=\"#chapter-3---modularity\"></a></h2>\n<ol>\n<li>What is meant by the term connascence?</li>\n</ol>\n<p><strong>Connascence</strong> is a metric used to describe the coupling or the degree of interdependence between two or more parts of a software system.</p>\n<ol start=\"2\">\n<li>What is the difference between static and dynamic connascence?</li>\n</ol>\n<p><strong>Static connascence</strong> is coupling that can be determined by examining the source code, while <strong>dynamic connascence</strong> is coupling that can only be determined when the code is running.</p>\n<ol start=\"3\">\n<li>What does connascence of type mean? Is it static or dynamic connascence?</li>\n</ol>\n<p><strong>Connascence of type</strong> is when multiple parts of a program must agree on the type of an entity. It is a form of static connascence.</p>\n<ol start=\"4\">\n<li>What is the strongest form of connascence?</li>\n</ol>\n<p><strong>Connascence of Identity</strong> is the strongest form of connascence. It refers to when multiple parts of the system depend on a mutable entity’s identity.</p>\n<ol start=\"5\">\n<li>What is the weakest form of connascence?</li>\n</ol>\n<p><strong>Connascence of Name</strong>, where multiple parts of the system must agree on the name of an entity, is considered the weakest form of connascence.</p>\n<ol start=\"6\">\n<li>Which is preferred within a code base—static or dynamic connascence?</li>\n</ol>\n<p><strong>Static connascence</strong> is generally preferred within a code base as it is easier to identify and manage than dynamic connascence.</p>\n<hr>\n<h2 id=\"chapter-4---modularity\">Chapter 4 - Modularity<a title=\"#chapter-4---modularity\" href=\"#chapter-4---modularity\"></a></h2>\n<p><img src=\"images/books/software-architecture-characteristics.png\" alt=\"Architecture Characteristics\" loading=\"lazy\" class=\"φbp\"></p>\n<p><strong>1. What three criteria must an attribute meet to be considered an architecture characteristic?</strong></p>\n<p>An attribute must be testable, contribute to the architecture of the system, and provide a way to measure and quantify it.</p>\n<p><strong>2. What is the difference between an implicit characteristic and an explicit one? Provide an example of each.</strong></p>\n<p><img src=\"images/books/software-architecture-explicit-implicit-characteristics.png\" alt=\"Architecture Characteristics\" loading=\"lazy\" class=\"φbp\"></p>\n<p>An implicit characteristic is one that is required or assumed but not explicitly stated, like usability. An explicit characteristic is one that is directly stated and designed for, such as response time.</p>\n<p><strong>3. Provide an example of an operational characteristic</strong></p>\n<p>An example of an operational characteristic is availability, which refers to the system’s ability to be in a state to perform its designated function during operation.</p>\n<p><strong>4. Provide an example of a structural characteristic.</strong></p>\n<p>An example of a structural characteristic is modularity, referring to the degree to which a system’s components may be separated and recombined.</p>\n<p><strong>5. Provide an example of a cross-cutting characteristic.</strong></p>\n<p>An example of a cross-cutting characteristic is security, which is the system’s ability to resist unauthorized attempts at usage or behavior modification, affecting multiple components of the system.</p>\n<p><strong>6. Which architecture characteristic is more important to strive for—availability or performance?</strong></p>\n<p>The importance of availability versus performance <strong>depends on the specific needs of the system being developed</strong>. For a critical system where downtime could be costly, availability may be more important. For a system where speed is crucial for user satisfaction, performance may be more important. The context and requirements of the system dictate which characteristic is more important to strive for.</p>\n","site":{"data":{}},"more":"<h2 id=\"fundamentals-of-software-architecture\">Fundamentals of Software Architecture<a title=\"#fundamentals-of-software-architecture\" href=\"#fundamentals-of-software-architecture\"></a></h2>\n<h3 id=\"book-details\">Book Details<a title=\"#book-details\" href=\"#book-details\"></a></h3>\n<ul>\n<li><strong>Title</strong>: <a href=\"https://www.oreilly.com/library/view/fundamentals-of-software/9781492043447/\" target=\"_blank\">Fundamentals of Software Architecture</a></li>\n<li><strong>Author</strong>: Mark Richards, Neal Ford</li>\n<li><strong>Publication Year</strong>: 2020</li>\n</ul>\n<p>This year <strong>2023</strong> I’ve started to read more books, and I’ve decided to write a summary of each book I read. This is the first one, and I hope you enjoy it.</p>\n<h3 id=\"summary\">Summary<a title=\"#summary\" href=\"#summary\"></a></h3>\n<p>This book is a great introduction to software architecture, it covers the basics of software architecture, and it’s a great starting point for anyone who wants to learn more about software architecture. Here are some of the topics covered in this book and I want to answer the self-assessment questions for each chapter.</p>\n<hr>\n<h2 id=\"chapter-1:-introduction\">Chapter 1: Introduction<a title=\"#chapter-1:-introduction\" href=\"#chapter-1:-introduction\"></a></h2>\n<ol>\n<li><strong>What are the four dimensions that define software architecture?</strong></li>\n</ol>\n<p><img src=\"images/books/software-architecture-four-dimensions.png\" alt=\"four dimensions software architecture\" loading=\"lazy\" class=\"φbp\"></p>\n<ul>\n<li><strong>Architecture characteristics</strong>: Define the success criteria of a system, which is generally orthogonal to the functionality of the system. Notice that all of the characteristics listed do not require knowledge of the functionality of the system, yet they are required in order for the system to function properly.</li>\n<li><strong>Architecture Decisions</strong>: Define the rules for how a system should be constructed. For example, an architect might make an architecture decision that only the business and services layers within a layered architecture can access the database.</li>\n<li><strong>Structure</strong>: Refers to the type of architecture style (or styles) the system is implemented in (such as microservices, layered, or microkernel)</li>\n<li>Design principles: Define a guideline of principles rather than a hard-and-fast rule.</li>\n</ul>\n<ol start=\"2\">\n<li><strong>What is the difference between an architecture decision and a design principle?</strong></li>\n</ol>\n<ul>\n<li>Architecture decisions form the constraints of the system and direct the development teams on what is and what isn’t allowed.</li>\n<li>Design principles are guidelines that help development teams make decisions about how to implement the system.</li>\n</ul>\n<ol start=\"3\">\n<li><strong>List the eight core expectations of a software architect</strong></li>\n</ol>\n<ul>\n<li>Make architecture decisions</li>\n<li>Continually analyze the architecture</li>\n<li>Keep current with latest trends</li>\n<li>Ensure compliance with decisions</li>\n<li>Diverse exposure and experience</li>\n<li>Have business domain knowledge</li>\n<li>Possess interpersonal skills</li>\n<li>Understand and navigate politics</li>\n</ul>\n<ol start=\"4\">\n<li><strong>What is the First Law of Software Architecture?</strong></li>\n</ol>\n<blockquote>\n<p>Everything in software architecture is a trade-off. – First Law of Software Architecture</p>\n</blockquote>\n<blockquote>\n<p>Why is more important than how. – Second Law of Software Architecture</p>\n</blockquote>\n<hr>\n<h2 id=\"chapter-2:-architectural-thinking\">Chapter 2: Architectural Thinking<a title=\"#chapter-2:-architectural-thinking\" href=\"#chapter-2:-architectural-thinking\"></a></h2>\n<ol>\n<li><strong>Describe the traditional approach of architecture versus development and explain why that approach no longer works.</strong></li>\n</ol>\n<p><img src=\"images/books/software-architecture-traditional-approach.png\" alt=\"Traditional approach architecture vs design\" loading=\"lazy\" class=\"φbp\"></p>\n<p>The traditional approach implies that architecture is something that is fully defined up front and then merely implemented by developers. However, this approach has been found to have several major drawbacks:</p>\n<ul>\n<li>\n<p><strong>Lack of Flexibility</strong>: Once the architecture is defined, it can be very difficult to change. However, software development is often a highly unpredictable process, and changes in requirements or technologies may necessitate changes in the architecture.</p>\n</li>\n<li>\n<p><strong>Communication Breakdown</strong>: Because architects and developers often work in isolation from each other, there can be a lack of understanding and communication between the two groups. Architects may make decisions without fully understanding the implementation implications, and developers may struggle to implement an architecture they had no part in designing.</p>\n</li>\n<li>\n<p><strong>Reality Gap</strong>: Architectural designs often look good on paper but may not work as well when actually implemented. This gap between design and reality can lead to problems and delays.</p>\n</li>\n</ul>\n<ol start=\"2\">\n<li><strong>List the three levels of knowledge in the knowledge triangle and provide an example of each.</strong></li>\n</ol>\n<p><img src=\"images/books/software-architecture-knowledge-representation.png\" alt=\"Knowledge representation\" loading=\"lazy\" class=\"φbp\"></p>\n<p>Our knowledge pyramid illustrates how fundamentally different the role of architect compares to developer. Developers spend their whole careers honing expertise, and transitioning to the architect role means a shift in that perspective, which many individuals find difficult. The architect role requires a different set of skills, and the knowledge pyramid illustrates this shift.</p>\n<ol start=\"3\">\n<li><strong>Why is it more important for an architect to focus on technical breadth rather than technical depth?</strong></li>\n</ol>\n<p>Focusing on technical breadth means acquiring a wide-ranging understanding of various technologies, patterns, languages, platforms, and principles. This breadth allows architects to:</p>\n<ul>\n<li>\n<p><strong>See the Big Picture</strong>: Understand how different components and technologies fit together and influence each other. This is essential when designing complex systems where decisions in one area can significantly impact other areas.</p>\n</li>\n<li>\n<p><strong>Make Informed Decisions</strong>: Choose the most suitable technologies and designs for the system’s requirements. A broad knowledge allows architects to consider a wider range of options and make more informed decisions.</p>\n</li>\n<li>\n<p><strong>Communicate Effectively</strong>: Communicate with different stakeholders, including developers, project managers, business stakeholders, and others. Each group may have different areas of expertise and concerns, and a broad understanding helps architects bridge these gaps.</p>\n</li>\n<li>\n<p><strong>Adapt to Change</strong>: Stay adaptable and resilient in the face of changing requirements, technologies, and business environments. A wide knowledge base allows architects to learn and adopt new technologies more easily.</p>\n</li>\n</ul>\n<p>For example, as an architect, it is more beneficial to know that five solutions exist for a particular problem than to have singular expertise in only one.</p>\n<ol start=\"4\">\n<li><strong>What are some of the ways of maintaining your technical depth and remaining hands-on as an architect?</strong></li>\n</ol>\n<ul>\n<li>\n<p><strong>Coding</strong>: Try to spend some of your time coding. This could be writing prototypes, creating proofs of concept, fixing bugs, or contributing to critical parts of the system. This not only helps maintain your coding skills but also gives you firsthand experience with the technologies you’re using.</p>\n</li>\n<li>\n<p><strong>Education</strong>: Continually educate yourself about new technologies, languages, and methodologies. This can involve reading books, articles, or research papers, attending conferences or webinars, or taking online courses.</p>\n</li>\n<li>\n<p><strong>Personal Projects</strong>: Work on personal projects outside of your day-to-day work. This can be a great way to learn new technologies, experiment with different architectures, or just keep your coding skills sharp.</p>\n</li>\n<li>\n<p><strong>Code Reviews</strong>: Participate in code reviews. This gives you a chance to see how the architecture is being implemented, spot potential issues, and provide valuable feedback to developers.</p>\n</li>\n<li>\n<p><strong>Pair Programming</strong>: Occasionally pair program with developers. This is another great way to stay familiar with the codebase and the challenges that developers face.</p>\n</li>\n<li>\n<p><strong>Prototyping</strong>: When considering a new technology or architectural approach, create a small prototype. This can provide valuable insights that you wouldn’t get from reading about it alone.</p>\n</li>\n<li>\n<p><strong>Stay Connected with the Developer Community</strong>: Participate in tech meetups, online forums, open-source projects, and other communities. This can keep you updated on new technologies and best practices, and provide opportunities to learn from others.</p>\n</li>\n</ul>\n<p>By staying hands-on and maintaining technical depth, you’ll be a more effective architect. You’ll understand the challenges that developers face, make better architectural decisions, and be able to communicate more effectively with your team.</p>\n<hr>\n<h2 id=\"chapter-3---modularity\">Chapter 3 - Modularity<a title=\"#chapter-3---modularity\" href=\"#chapter-3---modularity\"></a></h2>\n<ol>\n<li>What is meant by the term connascence?</li>\n</ol>\n<p><strong>Connascence</strong> is a metric used to describe the coupling or the degree of interdependence between two or more parts of a software system.</p>\n<ol start=\"2\">\n<li>What is the difference between static and dynamic connascence?</li>\n</ol>\n<p><strong>Static connascence</strong> is coupling that can be determined by examining the source code, while <strong>dynamic connascence</strong> is coupling that can only be determined when the code is running.</p>\n<ol start=\"3\">\n<li>What does connascence of type mean? Is it static or dynamic connascence?</li>\n</ol>\n<p><strong>Connascence of type</strong> is when multiple parts of a program must agree on the type of an entity. It is a form of static connascence.</p>\n<ol start=\"4\">\n<li>What is the strongest form of connascence?</li>\n</ol>\n<p><strong>Connascence of Identity</strong> is the strongest form of connascence. It refers to when multiple parts of the system depend on a mutable entity’s identity.</p>\n<ol start=\"5\">\n<li>What is the weakest form of connascence?</li>\n</ol>\n<p><strong>Connascence of Name</strong>, where multiple parts of the system must agree on the name of an entity, is considered the weakest form of connascence.</p>\n<ol start=\"6\">\n<li>Which is preferred within a code base—static or dynamic connascence?</li>\n</ol>\n<p><strong>Static connascence</strong> is generally preferred within a code base as it is easier to identify and manage than dynamic connascence.</p>\n<hr>\n<h2 id=\"chapter-4---modularity\">Chapter 4 - Modularity<a title=\"#chapter-4---modularity\" href=\"#chapter-4---modularity\"></a></h2>\n<p><img src=\"images/books/software-architecture-characteristics.png\" alt=\"Architecture Characteristics\" loading=\"lazy\" class=\"φbp\"></p>\n<p><strong>1. What three criteria must an attribute meet to be considered an architecture characteristic?</strong></p>\n<p>An attribute must be testable, contribute to the architecture of the system, and provide a way to measure and quantify it.</p>\n<p><strong>2. What is the difference between an implicit characteristic and an explicit one? Provide an example of each.</strong></p>\n<p><img src=\"images/books/software-architecture-explicit-implicit-characteristics.png\" alt=\"Architecture Characteristics\" loading=\"lazy\" class=\"φbp\"></p>\n<p>An implicit characteristic is one that is required or assumed but not explicitly stated, like usability. An explicit characteristic is one that is directly stated and designed for, such as response time.</p>\n<p><strong>3. Provide an example of an operational characteristic</strong></p>\n<p>An example of an operational characteristic is availability, which refers to the system’s ability to be in a state to perform its designated function during operation.</p>\n<p><strong>4. Provide an example of a structural characteristic.</strong></p>\n<p>An example of a structural characteristic is modularity, referring to the degree to which a system’s components may be separated and recombined.</p>\n<p><strong>5. Provide an example of a cross-cutting characteristic.</strong></p>\n<p>An example of a cross-cutting characteristic is security, which is the system’s ability to resist unauthorized attempts at usage or behavior modification, affecting multiple components of the system.</p>\n<p><strong>6. Which architecture characteristic is more important to strive for—availability or performance?</strong></p>\n<p>The importance of availability versus performance <strong>depends on the specific needs of the system being developed</strong>. For a critical system where downtime could be costly, availability may be more important. For a system where speed is crucial for user satisfaction, performance may be more important. The context and requirements of the system dictate which characteristic is more important to strive for.</p>\n","date_formatted":{"ll":"Jul 17, 2023","L":"07/17/2023","MM-DD":"07-17"},"plink":"http://codesandtags.io/blog/2023/07/17/en/fundamentals-of-software-architecture-part-1/","type":"post","toc":[{"id":"fundamentals-of-software-architecture","title":"Fundamentals of Software Architecture","index":"1","children":[{"id":"book-details","title":"Book Details","index":"1.1"},{"id":"summary","title":"Summary","index":"1.2"}]},{"id":"chapter-1:-introduction","title":"Chapter 1: Introduction","index":"2"},{"id":"chapter-2:-architectural-thinking","title":"Chapter 2: Architectural Thinking","index":"3"},{"id":"chapter-3---modularity","title":"Chapter 3 - Modularity","index":"4"},{"id":"chapter-4---modularity","title":"Chapter 4 - Modularity","index":"5"}],"reading_time":"1606 words in 11 min"},{"title":"How to succeed behavioral questions?","date":"2023-03-27T02:53:52.000Z","excerpt":"Practicing behavioral questions is essential for interview preparation because they allow the interviewer to assess your interpersonal and problem-solving skills, work ethic, and cultural fit with the company.","author":"codesandtags","thumbnail":"images/faang-thumbnail.jpg","_content":"\nPracticing behavioral questions is essential for interview preparation because they allow the interviewer to assess your interpersonal and problem-solving skills, work ethic, and cultural fit with the company. Here are some tips and strategies for preparing for behavioral questions:\n\n## Understand the purpose\n\nBehavioral questions are designed to evaluate your soft skills, such as teamwork, communication, leadership, adaptability, and conflict resolution. Recognize that interviewers are looking for specific examples from your past experiences to gauge your potential for success in the role.\n\n## Use the STAR method\n\nThe STAR method is a widely used technique for answering behavioral interview questions. It helps structure your response by focusing on a specific example from your past experiences and demonstrating your skills and abilities in a clear, concise manner. The acronym STAR stands for:\n\n**Situation**: Begin by describing the context or background of the situation you faced. Provide enough detail to help the interviewer understand the circumstances, but be concise. This sets the stage for the rest of your answer and helps the interviewer visualize the scenario.\n\n**Example: **\n\n> \"In my previous role as a software developer, I was working on a project with a tight deadline, and one of my team members fell ill, leaving us short-staffed.\"\n\n**Task**: Explain the specific task or goal you needed to accomplish in that situation. This part highlights your responsibility and the challenge you faced.\n\n**Example: **\n\n> \"As the team lead, my task was to ensure we met the deadline without compromising the quality of the project, while also managing the increased workload due to my colleague's absence.\"\n\n**Action**: Describe the specific actions you took to address the task or challenge. Focus on your role and the steps you took, showcasing your skills, abilities, and decision-making process.\n\n**Example: **\n\n> \"I assessed the remaining tasks and prioritized them based on importance and time sensitivity. I then redistributed the workload among the team members, making sure to assign tasks based on individual strengths and availability. I also communicated the situation to our manager and requested additional resources. To keep the team motivated, I held daily check-ins to monitor progress and address any concerns.\"\n\n**Result**: Explain the outcome of your actions, emphasizing the positive impact you had on the situation. Quantify your results whenever possible to demonstrate the tangible benefits of your actions.\n\n**Example:**\n\n> \"As a result, we were able to complete the project on time and within budget, despite being short-staffed. Our manager praised the team for our effective communication and adaptability, and our client was satisfied with the quality of the final product.\"\n\nBy following the STAR method when answering behavioral questions, you can ensure that your response is well-structured, focused, and clearly demonstrates your skills and abilities. This technique helps you showcase your problem-solving and decision-making skills, making it easier for the interviewer to assess your fit for the role.\n\n## Research common behavioral questions\n\nFamiliarize yourself with common behavioral questions, such as:\n\n- Tell me about a time when you faced a difficult problem. How did you handle it?\n- Describe a situation where you had to collaborate with a difficult colleague.\n- Can you provide an example of when you had to lead a team or project? What challenges did - you face, and how did you overcome them?\n- How do you handle stressful situations or tight deadlines?\n- Prepare specific examples: Reflect on your past experiences (professional, academic, or personal) and identify situations that demonstrate your soft skills. Prepare detailed examples for each situation that follow the STAR method.\n\n## Practice your delivery\n\nRehearse your answers out loud to ensure your responses are clear, concise, and well-structured. Consider practicing with a friend, family member, or mentor who can provide feedback and ask follow-up questions.\n\n## Tailor your answers to the company and role\n\nResearch the company's values, culture, and expectations for the role you're interviewing for, and tailor your answers to align with their priorities. This demonstrates your understanding of the company and showcases your fit within the organization.\n\n## Be honest and authentic\n\nWhile it's essential to present yourself in the best light, avoid exaggerating or fabricating your experiences. Interviewers can often tell when a candidate is not being genuine, which could harm your credibility.\n\n## Show self-awareness and growth\n\nWhen discussing challenging situations or mistakes, emphasize what you learned from the experience and how you've grown as a result. This shows your ability to learn from your mistakes and adapt in the future.\n\nBy practicing behavioral questions using these strategies, you'll be better prepared to demonstrate your soft skills and showcase your fit within the company during the interview process.\n\n![space](images/behavioral-questions.jpg)\n","source":"_posts/en/how-to-succeed-behavioral-questions.md","raw":"---\ntitle: How to succeed behavioral questions?\ndate: 2023-03-26 22:53:52\ntags: [interview]\nexcerpt: Practicing behavioral questions is essential for interview preparation because they allow the interviewer to assess your interpersonal and problem-solving skills, work ethic, and cultural fit with the company.\nauthor: codesandtags\ncategory: FAANG\nthumbnail: images/faang-thumbnail.jpg\n---\n\nPracticing behavioral questions is essential for interview preparation because they allow the interviewer to assess your interpersonal and problem-solving skills, work ethic, and cultural fit with the company. Here are some tips and strategies for preparing for behavioral questions:\n\n## Understand the purpose\n\nBehavioral questions are designed to evaluate your soft skills, such as teamwork, communication, leadership, adaptability, and conflict resolution. Recognize that interviewers are looking for specific examples from your past experiences to gauge your potential for success in the role.\n\n## Use the STAR method\n\nThe STAR method is a widely used technique for answering behavioral interview questions. It helps structure your response by focusing on a specific example from your past experiences and demonstrating your skills and abilities in a clear, concise manner. The acronym STAR stands for:\n\n**Situation**: Begin by describing the context or background of the situation you faced. Provide enough detail to help the interviewer understand the circumstances, but be concise. This sets the stage for the rest of your answer and helps the interviewer visualize the scenario.\n\n**Example: **\n\n> \"In my previous role as a software developer, I was working on a project with a tight deadline, and one of my team members fell ill, leaving us short-staffed.\"\n\n**Task**: Explain the specific task or goal you needed to accomplish in that situation. This part highlights your responsibility and the challenge you faced.\n\n**Example: **\n\n> \"As the team lead, my task was to ensure we met the deadline without compromising the quality of the project, while also managing the increased workload due to my colleague's absence.\"\n\n**Action**: Describe the specific actions you took to address the task or challenge. Focus on your role and the steps you took, showcasing your skills, abilities, and decision-making process.\n\n**Example: **\n\n> \"I assessed the remaining tasks and prioritized them based on importance and time sensitivity. I then redistributed the workload among the team members, making sure to assign tasks based on individual strengths and availability. I also communicated the situation to our manager and requested additional resources. To keep the team motivated, I held daily check-ins to monitor progress and address any concerns.\"\n\n**Result**: Explain the outcome of your actions, emphasizing the positive impact you had on the situation. Quantify your results whenever possible to demonstrate the tangible benefits of your actions.\n\n**Example:**\n\n> \"As a result, we were able to complete the project on time and within budget, despite being short-staffed. Our manager praised the team for our effective communication and adaptability, and our client was satisfied with the quality of the final product.\"\n\nBy following the STAR method when answering behavioral questions, you can ensure that your response is well-structured, focused, and clearly demonstrates your skills and abilities. This technique helps you showcase your problem-solving and decision-making skills, making it easier for the interviewer to assess your fit for the role.\n\n## Research common behavioral questions\n\nFamiliarize yourself with common behavioral questions, such as:\n\n- Tell me about a time when you faced a difficult problem. How did you handle it?\n- Describe a situation where you had to collaborate with a difficult colleague.\n- Can you provide an example of when you had to lead a team or project? What challenges did - you face, and how did you overcome them?\n- How do you handle stressful situations or tight deadlines?\n- Prepare specific examples: Reflect on your past experiences (professional, academic, or personal) and identify situations that demonstrate your soft skills. Prepare detailed examples for each situation that follow the STAR method.\n\n## Practice your delivery\n\nRehearse your answers out loud to ensure your responses are clear, concise, and well-structured. Consider practicing with a friend, family member, or mentor who can provide feedback and ask follow-up questions.\n\n## Tailor your answers to the company and role\n\nResearch the company's values, culture, and expectations for the role you're interviewing for, and tailor your answers to align with their priorities. This demonstrates your understanding of the company and showcases your fit within the organization.\n\n## Be honest and authentic\n\nWhile it's essential to present yourself in the best light, avoid exaggerating or fabricating your experiences. Interviewers can often tell when a candidate is not being genuine, which could harm your credibility.\n\n## Show self-awareness and growth\n\nWhen discussing challenging situations or mistakes, emphasize what you learned from the experience and how you've grown as a result. This shows your ability to learn from your mistakes and adapt in the future.\n\nBy practicing behavioral questions using these strategies, you'll be better prepared to demonstrate your soft skills and showcase your fit within the company during the interview process.\n\n![space](images/behavioral-questions.jpg)\n","slug":"en/how-to-succeed-behavioral-questions","published":1,"updated":"2023-07-17T22:47:10.536Z","comments":1,"layout":"post","photos":[],"link":"2023/03/26/en/how-to-succeed-behavioral-questions","_id":"clk8zxu0m000550t2g1xi8fe0","content":"<p>Practicing behavioral questions is essential for interview preparation because they allow the interviewer to assess your interpersonal and problem-solving skills, work ethic, and cultural fit with the company. Here are some tips and strategies for preparing for behavioral questions:</p>\n<h2 id=\"understand-the-purpose\">Understand the purpose<a title=\"#understand-the-purpose\" href=\"#understand-the-purpose\"></a></h2>\n<p>Behavioral questions are designed to evaluate your soft skills, such as teamwork, communication, leadership, adaptability, and conflict resolution. Recognize that interviewers are looking for specific examples from your past experiences to gauge your potential for success in the role.</p>\n<h2 id=\"use-the-star-method\">Use the STAR method<a title=\"#use-the-star-method\" href=\"#use-the-star-method\"></a></h2>\n<p>The STAR method is a widely used technique for answering behavioral interview questions. It helps structure your response by focusing on a specific example from your past experiences and demonstrating your skills and abilities in a clear, concise manner. The acronym STAR stands for:</p>\n<p><strong>Situation</strong>: Begin by describing the context or background of the situation you faced. Provide enough detail to help the interviewer understand the circumstances, but be concise. This sets the stage for the rest of your answer and helps the interviewer visualize the scenario.</p>\n<p>**Example: **</p>\n<blockquote>\n<p>“In my previous role as a software developer, I was working on a project with a tight deadline, and one of my team members fell ill, leaving us short-staffed.”</p>\n</blockquote>\n<p><strong>Task</strong>: Explain the specific task or goal you needed to accomplish in that situation. This part highlights your responsibility and the challenge you faced.</p>\n<p>**Example: **</p>\n<blockquote>\n<p>“As the team lead, my task was to ensure we met the deadline without compromising the quality of the project, while also managing the increased workload due to my colleague’s absence.”</p>\n</blockquote>\n<p><strong>Action</strong>: Describe the specific actions you took to address the task or challenge. Focus on your role and the steps you took, showcasing your skills, abilities, and decision-making process.</p>\n<p>**Example: **</p>\n<blockquote>\n<p>“I assessed the remaining tasks and prioritized them based on importance and time sensitivity. I then redistributed the workload among the team members, making sure to assign tasks based on individual strengths and availability. I also communicated the situation to our manager and requested additional resources. To keep the team motivated, I held daily check-ins to monitor progress and address any concerns.”</p>\n</blockquote>\n<p><strong>Result</strong>: Explain the outcome of your actions, emphasizing the positive impact you had on the situation. Quantify your results whenever possible to demonstrate the tangible benefits of your actions.</p>\n<p><strong>Example:</strong></p>\n<blockquote>\n<p>“As a result, we were able to complete the project on time and within budget, despite being short-staffed. Our manager praised the team for our effective communication and adaptability, and our client was satisfied with the quality of the final product.”</p>\n</blockquote>\n<p>By following the STAR method when answering behavioral questions, you can ensure that your response is well-structured, focused, and clearly demonstrates your skills and abilities. This technique helps you showcase your problem-solving and decision-making skills, making it easier for the interviewer to assess your fit for the role.</p>\n<h2 id=\"research-common-behavioral-questions\">Research common behavioral questions<a title=\"#research-common-behavioral-questions\" href=\"#research-common-behavioral-questions\"></a></h2>\n<p>Familiarize yourself with common behavioral questions, such as:</p>\n<ul>\n<li>Tell me about a time when you faced a difficult problem. How did you handle it?</li>\n<li>Describe a situation where you had to collaborate with a difficult colleague.</li>\n<li>Can you provide an example of when you had to lead a team or project? What challenges did - you face, and how did you overcome them?</li>\n<li>How do you handle stressful situations or tight deadlines?</li>\n<li>Prepare specific examples: Reflect on your past experiences (professional, academic, or personal) and identify situations that demonstrate your soft skills. Prepare detailed examples for each situation that follow the STAR method.</li>\n</ul>\n<h2 id=\"practice-your-delivery\">Practice your delivery<a title=\"#practice-your-delivery\" href=\"#practice-your-delivery\"></a></h2>\n<p>Rehearse your answers out loud to ensure your responses are clear, concise, and well-structured. Consider practicing with a friend, family member, or mentor who can provide feedback and ask follow-up questions.</p>\n<h2 id=\"tailor-your-answers-to-the-company-and-role\">Tailor your answers to the company and role<a title=\"#tailor-your-answers-to-the-company-and-role\" href=\"#tailor-your-answers-to-the-company-and-role\"></a></h2>\n<p>Research the company’s values, culture, and expectations for the role you’re interviewing for, and tailor your answers to align with their priorities. This demonstrates your understanding of the company and showcases your fit within the organization.</p>\n<h2 id=\"be-honest-and-authentic\">Be honest and authentic<a title=\"#be-honest-and-authentic\" href=\"#be-honest-and-authentic\"></a></h2>\n<p>While it’s essential to present yourself in the best light, avoid exaggerating or fabricating your experiences. Interviewers can often tell when a candidate is not being genuine, which could harm your credibility.</p>\n<h2 id=\"show-self-awareness-and-growth\">Show self-awareness and growth<a title=\"#show-self-awareness-and-growth\" href=\"#show-self-awareness-and-growth\"></a></h2>\n<p>When discussing challenging situations or mistakes, emphasize what you learned from the experience and how you’ve grown as a result. This shows your ability to learn from your mistakes and adapt in the future.</p>\n<p>By practicing behavioral questions using these strategies, you’ll be better prepared to demonstrate your soft skills and showcase your fit within the company during the interview process.</p>\n<p><img src=\"images/behavioral-questions.jpg\" alt=\"space\" loading=\"lazy\" class=\"φbp\"></p>\n","site":{"data":{}},"more":"<p>Practicing behavioral questions is essential for interview preparation because they allow the interviewer to assess your interpersonal and problem-solving skills, work ethic, and cultural fit with the company. Here are some tips and strategies for preparing for behavioral questions:</p>\n<h2 id=\"understand-the-purpose\">Understand the purpose<a title=\"#understand-the-purpose\" href=\"#understand-the-purpose\"></a></h2>\n<p>Behavioral questions are designed to evaluate your soft skills, such as teamwork, communication, leadership, adaptability, and conflict resolution. Recognize that interviewers are looking for specific examples from your past experiences to gauge your potential for success in the role.</p>\n<h2 id=\"use-the-star-method\">Use the STAR method<a title=\"#use-the-star-method\" href=\"#use-the-star-method\"></a></h2>\n<p>The STAR method is a widely used technique for answering behavioral interview questions. It helps structure your response by focusing on a specific example from your past experiences and demonstrating your skills and abilities in a clear, concise manner. The acronym STAR stands for:</p>\n<p><strong>Situation</strong>: Begin by describing the context or background of the situation you faced. Provide enough detail to help the interviewer understand the circumstances, but be concise. This sets the stage for the rest of your answer and helps the interviewer visualize the scenario.</p>\n<p>**Example: **</p>\n<blockquote>\n<p>“In my previous role as a software developer, I was working on a project with a tight deadline, and one of my team members fell ill, leaving us short-staffed.”</p>\n</blockquote>\n<p><strong>Task</strong>: Explain the specific task or goal you needed to accomplish in that situation. This part highlights your responsibility and the challenge you faced.</p>\n<p>**Example: **</p>\n<blockquote>\n<p>“As the team lead, my task was to ensure we met the deadline without compromising the quality of the project, while also managing the increased workload due to my colleague’s absence.”</p>\n</blockquote>\n<p><strong>Action</strong>: Describe the specific actions you took to address the task or challenge. Focus on your role and the steps you took, showcasing your skills, abilities, and decision-making process.</p>\n<p>**Example: **</p>\n<blockquote>\n<p>“I assessed the remaining tasks and prioritized them based on importance and time sensitivity. I then redistributed the workload among the team members, making sure to assign tasks based on individual strengths and availability. I also communicated the situation to our manager and requested additional resources. To keep the team motivated, I held daily check-ins to monitor progress and address any concerns.”</p>\n</blockquote>\n<p><strong>Result</strong>: Explain the outcome of your actions, emphasizing the positive impact you had on the situation. Quantify your results whenever possible to demonstrate the tangible benefits of your actions.</p>\n<p><strong>Example:</strong></p>\n<blockquote>\n<p>“As a result, we were able to complete the project on time and within budget, despite being short-staffed. Our manager praised the team for our effective communication and adaptability, and our client was satisfied with the quality of the final product.”</p>\n</blockquote>\n<p>By following the STAR method when answering behavioral questions, you can ensure that your response is well-structured, focused, and clearly demonstrates your skills and abilities. This technique helps you showcase your problem-solving and decision-making skills, making it easier for the interviewer to assess your fit for the role.</p>\n<h2 id=\"research-common-behavioral-questions\">Research common behavioral questions<a title=\"#research-common-behavioral-questions\" href=\"#research-common-behavioral-questions\"></a></h2>\n<p>Familiarize yourself with common behavioral questions, such as:</p>\n<ul>\n<li>Tell me about a time when you faced a difficult problem. How did you handle it?</li>\n<li>Describe a situation where you had to collaborate with a difficult colleague.</li>\n<li>Can you provide an example of when you had to lead a team or project? What challenges did - you face, and how did you overcome them?</li>\n<li>How do you handle stressful situations or tight deadlines?</li>\n<li>Prepare specific examples: Reflect on your past experiences (professional, academic, or personal) and identify situations that demonstrate your soft skills. Prepare detailed examples for each situation that follow the STAR method.</li>\n</ul>\n<h2 id=\"practice-your-delivery\">Practice your delivery<a title=\"#practice-your-delivery\" href=\"#practice-your-delivery\"></a></h2>\n<p>Rehearse your answers out loud to ensure your responses are clear, concise, and well-structured. Consider practicing with a friend, family member, or mentor who can provide feedback and ask follow-up questions.</p>\n<h2 id=\"tailor-your-answers-to-the-company-and-role\">Tailor your answers to the company and role<a title=\"#tailor-your-answers-to-the-company-and-role\" href=\"#tailor-your-answers-to-the-company-and-role\"></a></h2>\n<p>Research the company’s values, culture, and expectations for the role you’re interviewing for, and tailor your answers to align with their priorities. This demonstrates your understanding of the company and showcases your fit within the organization.</p>\n<h2 id=\"be-honest-and-authentic\">Be honest and authentic<a title=\"#be-honest-and-authentic\" href=\"#be-honest-and-authentic\"></a></h2>\n<p>While it’s essential to present yourself in the best light, avoid exaggerating or fabricating your experiences. Interviewers can often tell when a candidate is not being genuine, which could harm your credibility.</p>\n<h2 id=\"show-self-awareness-and-growth\">Show self-awareness and growth<a title=\"#show-self-awareness-and-growth\" href=\"#show-self-awareness-and-growth\"></a></h2>\n<p>When discussing challenging situations or mistakes, emphasize what you learned from the experience and how you’ve grown as a result. This shows your ability to learn from your mistakes and adapt in the future.</p>\n<p>By practicing behavioral questions using these strategies, you’ll be better prepared to demonstrate your soft skills and showcase your fit within the company during the interview process.</p>\n<p><img src=\"images/behavioral-questions.jpg\" alt=\"space\" loading=\"lazy\" class=\"φbp\"></p>\n","date_formatted":{"ll":"Mar 26, 2023","L":"03/26/2023","MM-DD":"03-26"},"plink":"http://codesandtags.io/blog/2023/03/26/en/how-to-succeed-behavioral-questions/","type":"post","toc":[{"id":"understand-the-purpose","title":"Understand the purpose","index":"1"},{"id":"use-the-star-method","title":"Use the STAR method","index":"2"},{"id":"research-common-behavioral-questions","title":"Research common behavioral questions","index":"3"},{"id":"practice-your-delivery","title":"Practice your delivery","index":"4"},{"id":"tailor-your-answers-to-the-company-and-role","title":"Tailor your answers to the company and role","index":"5"},{"id":"be-honest-and-authentic","title":"Be honest and authentic","index":"6"},{"id":"show-self-awareness-and-growth","title":"Show self-awareness and growth","index":"7"}],"reading_time":"776 words in 5 min"},{"title":"Working at Google - the interview process (part 2)","date":"2023-03-25T05:48:14.000Z","excerpt":"Here we have a detailed explanation about the interview process at Google. So let's explore every step and how long could it take.","author":"codesandtags","thumbnail":"images/faang-google-thumbnail.jpg","_content":"\nUnderstanding the interview process is crucial to success in any job interview, and Google's software engineering interviews are no exception. Here is a more detailed breakdown of Google's interview process:\n\n## Application and resume review:\n\nSubmit your application and resume through Google's career website or via a referral. Google recruiters review applications to identify candidates with the required skills and experience. A well-crafted resume tailored for the role you're applying for can increase your chances of being noticed.\n\n## Initial phone screen:\n\nA Google recruiter will typically reach out for an initial phone screen to discuss your background, experience, and interest in the company. This is also an opportunity for you to ask questions about the role and clarify any doubts you may have about the process.\n\n## Technical phone interviews:\n\nAfter passing the initial phone screen, you'll be scheduled for one or more technical phone interviews with a Google engineer. Each interview typically lasts 45 minutes to an hour and covers data structures, algorithms, and problem-solving skills. You'll be asked to write code in a shared document or a coding platform like Google Docs.\n\n## On-site interviews (or virtual due to COVID-19):\n\nIf you successfully pass the technical phone interviews, you'll be invited for on-site interviews, which may be conducted virtually due to COVID-19 or in-person at a Google office. You can expect 4-5 interviews, each lasting about 45 minutes, covering a mix of technical topics, including:\na. Algorithmic problem solving and coding\nb. System design\nc. Low-level design or object-oriented design\nd. Behavioral questions\ne. Domain-specific topics (e.g., machine learning, distributed systems) depending on the role\n\n## Hiring Committee review:\n\nOnce you've completed the interviews, your performance and feedback from the interviewers will be reviewed by a hiring committee. This committee will evaluate your application holistically, considering your technical and behavioral performance, to determine if you're a good fit for the role.\n\n## Team matching:\n\nIf the hiring committee approves your application, you'll enter the team matching phase. During this stage, your skills and preferences will be matched with the needs of various teams within Google. You may have additional interviews with potential managers or team members to ensure a good fit.\n\n## Offer and negotiation:\n\nOnce a suitable team match has been found, you'll receive a job offer from Google. This offer will include details about your compensation package, including salary, equity, and benefits. You may have the opportunity to negotiate your offer at this stage.\n\nUnderstanding this process will help you set realistic expectations and prepare effectively for each stage of the Google software engineering interview process.\n\n## Timeline\n\nHere is a timeline based on the detailed breakdown of Google's interview process:\n\n#### Week 1:\n\nSubmit your application and tailored resume through Google's career website or via a referral.\n\n#### Weeks 2-3:\n\nApplication and resume review by Google recruiters.\n\n#### Week 4:\n\nInitial phone screen with a Google recruiter to discuss your background, experience, and interest in the company.\n\n#### Weeks 5-6:\n\nPrepare for technical phone interviews by practicing coding problems and reviewing computer science fundamentals.\n\n#### Week 7:\n\nTechnical phone interviews with Google engineers, focusing on data structures, algorithms, and problem-solving skills.\n\n#### Weeks 8-9:\n\nOn-site or virtual interviews, including 4-5 interviews covering algorithmic problem solving, system design, low-level design, behavioral questions, and domain-specific topics.\n\n#### Weeks 10-11:\n\nHiring Committee review of your interview performance and overall application.\n\n#### Week 12:\n\nTeam matching process to find a suitable team based on your skills and preferences.\n\n#### Week 13:\n\nReceive a job offer from Google, including details about your compensation package.\n\n#### Week 14:\n\nOffer negotiation, if applicable, and acceptance of the job offer.\n\nPlease note that this timeline is a rough estimate and may vary depending on various factors, such as the volume of applications, interviewer availability, and other logistical considerations. Some stages may take longer or shorter than indicated in this timeline.\n\n![space](images/working-at-google-interview-process-hero.jpg)\n","source":"_posts/en/working-at-google-interview-process.md","raw":"---\ntitle: Working at Google - the interview process (part 2)\ndate: 2023-03-25 01:48:14\ntags: [google, software, interview]\nexcerpt: Here we have a detailed explanation about the interview process at Google. So let's explore every step and how long could it take.\nauthor: codesandtags\ncategory: FAANG\nthumbnail: images/faang-google-thumbnail.jpg\n---\n\nUnderstanding the interview process is crucial to success in any job interview, and Google's software engineering interviews are no exception. Here is a more detailed breakdown of Google's interview process:\n\n## Application and resume review:\n\nSubmit your application and resume through Google's career website or via a referral. Google recruiters review applications to identify candidates with the required skills and experience. A well-crafted resume tailored for the role you're applying for can increase your chances of being noticed.\n\n## Initial phone screen:\n\nA Google recruiter will typically reach out for an initial phone screen to discuss your background, experience, and interest in the company. This is also an opportunity for you to ask questions about the role and clarify any doubts you may have about the process.\n\n## Technical phone interviews:\n\nAfter passing the initial phone screen, you'll be scheduled for one or more technical phone interviews with a Google engineer. Each interview typically lasts 45 minutes to an hour and covers data structures, algorithms, and problem-solving skills. You'll be asked to write code in a shared document or a coding platform like Google Docs.\n\n## On-site interviews (or virtual due to COVID-19):\n\nIf you successfully pass the technical phone interviews, you'll be invited for on-site interviews, which may be conducted virtually due to COVID-19 or in-person at a Google office. You can expect 4-5 interviews, each lasting about 45 minutes, covering a mix of technical topics, including:\na. Algorithmic problem solving and coding\nb. System design\nc. Low-level design or object-oriented design\nd. Behavioral questions\ne. Domain-specific topics (e.g., machine learning, distributed systems) depending on the role\n\n## Hiring Committee review:\n\nOnce you've completed the interviews, your performance and feedback from the interviewers will be reviewed by a hiring committee. This committee will evaluate your application holistically, considering your technical and behavioral performance, to determine if you're a good fit for the role.\n\n## Team matching:\n\nIf the hiring committee approves your application, you'll enter the team matching phase. During this stage, your skills and preferences will be matched with the needs of various teams within Google. You may have additional interviews with potential managers or team members to ensure a good fit.\n\n## Offer and negotiation:\n\nOnce a suitable team match has been found, you'll receive a job offer from Google. This offer will include details about your compensation package, including salary, equity, and benefits. You may have the opportunity to negotiate your offer at this stage.\n\nUnderstanding this process will help you set realistic expectations and prepare effectively for each stage of the Google software engineering interview process.\n\n## Timeline\n\nHere is a timeline based on the detailed breakdown of Google's interview process:\n\n#### Week 1:\n\nSubmit your application and tailored resume through Google's career website or via a referral.\n\n#### Weeks 2-3:\n\nApplication and resume review by Google recruiters.\n\n#### Week 4:\n\nInitial phone screen with a Google recruiter to discuss your background, experience, and interest in the company.\n\n#### Weeks 5-6:\n\nPrepare for technical phone interviews by practicing coding problems and reviewing computer science fundamentals.\n\n#### Week 7:\n\nTechnical phone interviews with Google engineers, focusing on data structures, algorithms, and problem-solving skills.\n\n#### Weeks 8-9:\n\nOn-site or virtual interviews, including 4-5 interviews covering algorithmic problem solving, system design, low-level design, behavioral questions, and domain-specific topics.\n\n#### Weeks 10-11:\n\nHiring Committee review of your interview performance and overall application.\n\n#### Week 12:\n\nTeam matching process to find a suitable team based on your skills and preferences.\n\n#### Week 13:\n\nReceive a job offer from Google, including details about your compensation package.\n\n#### Week 14:\n\nOffer negotiation, if applicable, and acceptance of the job offer.\n\nPlease note that this timeline is a rough estimate and may vary depending on various factors, such as the volume of applications, interviewer availability, and other logistical considerations. Some stages may take longer or shorter than indicated in this timeline.\n\n![space](images/working-at-google-interview-process-hero.jpg)\n","slug":"en/working-at-google-interview-process","published":1,"updated":"2023-07-17T22:47:10.536Z","comments":1,"layout":"post","photos":[],"link":"2023/03/25/en/working-at-google-interview-process","_id":"clk8zxu0n000650t2he6v7b0y","content":"<p>Understanding the interview process is crucial to success in any job interview, and Google’s software engineering interviews are no exception. Here is a more detailed breakdown of Google’s interview process:</p>\n<h2 id=\"application-and-resume-review:\">Application and resume review:<a title=\"#application-and-resume-review:\" href=\"#application-and-resume-review:\"></a></h2>\n<p>Submit your application and resume through Google’s career website or via a referral. Google recruiters review applications to identify candidates with the required skills and experience. A well-crafted resume tailored for the role you’re applying for can increase your chances of being noticed.</p>\n<h2 id=\"initial-phone-screen:\">Initial phone screen:<a title=\"#initial-phone-screen:\" href=\"#initial-phone-screen:\"></a></h2>\n<p>A Google recruiter will typically reach out for an initial phone screen to discuss your background, experience, and interest in the company. This is also an opportunity for you to ask questions about the role and clarify any doubts you may have about the process.</p>\n<h2 id=\"technical-phone-interviews:\">Technical phone interviews:<a title=\"#technical-phone-interviews:\" href=\"#technical-phone-interviews:\"></a></h2>\n<p>After passing the initial phone screen, you’ll be scheduled for one or more technical phone interviews with a Google engineer. Each interview typically lasts 45 minutes to an hour and covers data structures, algorithms, and problem-solving skills. You’ll be asked to write code in a shared document or a coding platform like Google Docs.</p>\n<h2 id=\"on-site-interviews-(or-virtual-due-to-covid-19):\">On-site interviews (or virtual due to COVID-19):<a title=\"#on-site-interviews-(or-virtual-due-to-covid-19):\" href=\"#on-site-interviews-(or-virtual-due-to-covid-19):\"></a></h2>\n<p>If you successfully pass the technical phone interviews, you’ll be invited for on-site interviews, which may be conducted virtually due to COVID-19 or in-person at a Google office. You can expect 4-5 interviews, each lasting about 45 minutes, covering a mix of technical topics, including:<br>\na. Algorithmic problem solving and coding<br>\nb. System design<br>\nc. Low-level design or object-oriented design<br>\nd. Behavioral questions<br>\ne. Domain-specific topics (e.g., machine learning, distributed systems) depending on the role</p>\n<h2 id=\"hiring-committee-review:\">Hiring Committee review:<a title=\"#hiring-committee-review:\" href=\"#hiring-committee-review:\"></a></h2>\n<p>Once you’ve completed the interviews, your performance and feedback from the interviewers will be reviewed by a hiring committee. This committee will evaluate your application holistically, considering your technical and behavioral performance, to determine if you’re a good fit for the role.</p>\n<h2 id=\"team-matching:\">Team matching:<a title=\"#team-matching:\" href=\"#team-matching:\"></a></h2>\n<p>If the hiring committee approves your application, you’ll enter the team matching phase. During this stage, your skills and preferences will be matched with the needs of various teams within Google. You may have additional interviews with potential managers or team members to ensure a good fit.</p>\n<h2 id=\"offer-and-negotiation:\">Offer and negotiation:<a title=\"#offer-and-negotiation:\" href=\"#offer-and-negotiation:\"></a></h2>\n<p>Once a suitable team match has been found, you’ll receive a job offer from Google. This offer will include details about your compensation package, including salary, equity, and benefits. You may have the opportunity to negotiate your offer at this stage.</p>\n<p>Understanding this process will help you set realistic expectations and prepare effectively for each stage of the Google software engineering interview process.</p>\n<h2 id=\"timeline\">Timeline<a title=\"#timeline\" href=\"#timeline\"></a></h2>\n<p>Here is a timeline based on the detailed breakdown of Google’s interview process:</p>\n<h4 id=\"week-1:\">Week 1:<a title=\"#week-1:\" href=\"#week-1:\"></a></h4>\n<p>Submit your application and tailored resume through Google’s career website or via a referral.</p>\n<h4 id=\"weeks-2-3:\">Weeks 2-3:<a title=\"#weeks-2-3:\" href=\"#weeks-2-3:\"></a></h4>\n<p>Application and resume review by Google recruiters.</p>\n<h4 id=\"week-4:\">Week 4:<a title=\"#week-4:\" href=\"#week-4:\"></a></h4>\n<p>Initial phone screen with a Google recruiter to discuss your background, experience, and interest in the company.</p>\n<h4 id=\"weeks-5-6:\">Weeks 5-6:<a title=\"#weeks-5-6:\" href=\"#weeks-5-6:\"></a></h4>\n<p>Prepare for technical phone interviews by practicing coding problems and reviewing computer science fundamentals.</p>\n<h4 id=\"week-7:\">Week 7:<a title=\"#week-7:\" href=\"#week-7:\"></a></h4>\n<p>Technical phone interviews with Google engineers, focusing on data structures, algorithms, and problem-solving skills.</p>\n<h4 id=\"weeks-8-9:\">Weeks 8-9:<a title=\"#weeks-8-9:\" href=\"#weeks-8-9:\"></a></h4>\n<p>On-site or virtual interviews, including 4-5 interviews covering algorithmic problem solving, system design, low-level design, behavioral questions, and domain-specific topics.</p>\n<h4 id=\"weeks-10-11:\">Weeks 10-11:<a title=\"#weeks-10-11:\" href=\"#weeks-10-11:\"></a></h4>\n<p>Hiring Committee review of your interview performance and overall application.</p>\n<h4 id=\"week-12:\">Week 12:<a title=\"#week-12:\" href=\"#week-12:\"></a></h4>\n<p>Team matching process to find a suitable team based on your skills and preferences.</p>\n<h4 id=\"week-13:\">Week 13:<a title=\"#week-13:\" href=\"#week-13:\"></a></h4>\n<p>Receive a job offer from Google, including details about your compensation package.</p>\n<h4 id=\"week-14:\">Week 14:<a title=\"#week-14:\" href=\"#week-14:\"></a></h4>\n<p>Offer negotiation, if applicable, and acceptance of the job offer.</p>\n<p>Please note that this timeline is a rough estimate and may vary depending on various factors, such as the volume of applications, interviewer availability, and other logistical considerations. Some stages may take longer or shorter than indicated in this timeline.</p>\n<p><img src=\"images/working-at-google-interview-process-hero.jpg\" alt=\"space\" loading=\"lazy\" class=\"φbp\"></p>\n","site":{"data":{}},"more":"<p>Understanding the interview process is crucial to success in any job interview, and Google’s software engineering interviews are no exception. Here is a more detailed breakdown of Google’s interview process:</p>\n<h2 id=\"application-and-resume-review:\">Application and resume review:<a title=\"#application-and-resume-review:\" href=\"#application-and-resume-review:\"></a></h2>\n<p>Submit your application and resume through Google’s career website or via a referral. Google recruiters review applications to identify candidates with the required skills and experience. A well-crafted resume tailored for the role you’re applying for can increase your chances of being noticed.</p>\n<h2 id=\"initial-phone-screen:\">Initial phone screen:<a title=\"#initial-phone-screen:\" href=\"#initial-phone-screen:\"></a></h2>\n<p>A Google recruiter will typically reach out for an initial phone screen to discuss your background, experience, and interest in the company. This is also an opportunity for you to ask questions about the role and clarify any doubts you may have about the process.</p>\n<h2 id=\"technical-phone-interviews:\">Technical phone interviews:<a title=\"#technical-phone-interviews:\" href=\"#technical-phone-interviews:\"></a></h2>\n<p>After passing the initial phone screen, you’ll be scheduled for one or more technical phone interviews with a Google engineer. Each interview typically lasts 45 minutes to an hour and covers data structures, algorithms, and problem-solving skills. You’ll be asked to write code in a shared document or a coding platform like Google Docs.</p>\n<h2 id=\"on-site-interviews-(or-virtual-due-to-covid-19):\">On-site interviews (or virtual due to COVID-19):<a title=\"#on-site-interviews-(or-virtual-due-to-covid-19):\" href=\"#on-site-interviews-(or-virtual-due-to-covid-19):\"></a></h2>\n<p>If you successfully pass the technical phone interviews, you’ll be invited for on-site interviews, which may be conducted virtually due to COVID-19 or in-person at a Google office. You can expect 4-5 interviews, each lasting about 45 minutes, covering a mix of technical topics, including:<br>\na. Algorithmic problem solving and coding<br>\nb. System design<br>\nc. Low-level design or object-oriented design<br>\nd. Behavioral questions<br>\ne. Domain-specific topics (e.g., machine learning, distributed systems) depending on the role</p>\n<h2 id=\"hiring-committee-review:\">Hiring Committee review:<a title=\"#hiring-committee-review:\" href=\"#hiring-committee-review:\"></a></h2>\n<p>Once you’ve completed the interviews, your performance and feedback from the interviewers will be reviewed by a hiring committee. This committee will evaluate your application holistically, considering your technical and behavioral performance, to determine if you’re a good fit for the role.</p>\n<h2 id=\"team-matching:\">Team matching:<a title=\"#team-matching:\" href=\"#team-matching:\"></a></h2>\n<p>If the hiring committee approves your application, you’ll enter the team matching phase. During this stage, your skills and preferences will be matched with the needs of various teams within Google. You may have additional interviews with potential managers or team members to ensure a good fit.</p>\n<h2 id=\"offer-and-negotiation:\">Offer and negotiation:<a title=\"#offer-and-negotiation:\" href=\"#offer-and-negotiation:\"></a></h2>\n<p>Once a suitable team match has been found, you’ll receive a job offer from Google. This offer will include details about your compensation package, including salary, equity, and benefits. You may have the opportunity to negotiate your offer at this stage.</p>\n<p>Understanding this process will help you set realistic expectations and prepare effectively for each stage of the Google software engineering interview process.</p>\n<h2 id=\"timeline\">Timeline<a title=\"#timeline\" href=\"#timeline\"></a></h2>\n<p>Here is a timeline based on the detailed breakdown of Google’s interview process:</p>\n<h4 id=\"week-1:\">Week 1:<a title=\"#week-1:\" href=\"#week-1:\"></a></h4>\n<p>Submit your application and tailored resume through Google’s career website or via a referral.</p>\n<h4 id=\"weeks-2-3:\">Weeks 2-3:<a title=\"#weeks-2-3:\" href=\"#weeks-2-3:\"></a></h4>\n<p>Application and resume review by Google recruiters.</p>\n<h4 id=\"week-4:\">Week 4:<a title=\"#week-4:\" href=\"#week-4:\"></a></h4>\n<p>Initial phone screen with a Google recruiter to discuss your background, experience, and interest in the company.</p>\n<h4 id=\"weeks-5-6:\">Weeks 5-6:<a title=\"#weeks-5-6:\" href=\"#weeks-5-6:\"></a></h4>\n<p>Prepare for technical phone interviews by practicing coding problems and reviewing computer science fundamentals.</p>\n<h4 id=\"week-7:\">Week 7:<a title=\"#week-7:\" href=\"#week-7:\"></a></h4>\n<p>Technical phone interviews with Google engineers, focusing on data structures, algorithms, and problem-solving skills.</p>\n<h4 id=\"weeks-8-9:\">Weeks 8-9:<a title=\"#weeks-8-9:\" href=\"#weeks-8-9:\"></a></h4>\n<p>On-site or virtual interviews, including 4-5 interviews covering algorithmic problem solving, system design, low-level design, behavioral questions, and domain-specific topics.</p>\n<h4 id=\"weeks-10-11:\">Weeks 10-11:<a title=\"#weeks-10-11:\" href=\"#weeks-10-11:\"></a></h4>\n<p>Hiring Committee review of your interview performance and overall application.</p>\n<h4 id=\"week-12:\">Week 12:<a title=\"#week-12:\" href=\"#week-12:\"></a></h4>\n<p>Team matching process to find a suitable team based on your skills and preferences.</p>\n<h4 id=\"week-13:\">Week 13:<a title=\"#week-13:\" href=\"#week-13:\"></a></h4>\n<p>Receive a job offer from Google, including details about your compensation package.</p>\n<h4 id=\"week-14:\">Week 14:<a title=\"#week-14:\" href=\"#week-14:\"></a></h4>\n<p>Offer negotiation, if applicable, and acceptance of the job offer.</p>\n<p>Please note that this timeline is a rough estimate and may vary depending on various factors, such as the volume of applications, interviewer availability, and other logistical considerations. Some stages may take longer or shorter than indicated in this timeline.</p>\n<p><img src=\"images/working-at-google-interview-process-hero.jpg\" alt=\"space\" loading=\"lazy\" class=\"φbp\"></p>\n","date_formatted":{"ll":"Mar 25, 2023","L":"03/25/2023","MM-DD":"03-25"},"plink":"http://codesandtags.io/blog/2023/03/25/en/working-at-google-interview-process/","type":"post","toc":[{"id":"application-and-resume-review:","title":"Application and resume review:","index":"1"},{"id":"initial-phone-screen:","title":"Initial phone screen:","index":"2"},{"id":"technical-phone-interviews:","title":"Technical phone interviews:","index":"3"},{"id":"on-site-interviews-(or-virtual-due-to-covid-19):","title":"On-site interviews (or virtual due to COVID-19):","index":"4"},{"id":"hiring-committee-review:","title":"Hiring Committee review:","index":"5"},{"id":"team-matching:","title":"Team matching:","index":"6"},{"id":"offer-and-negotiation:","title":"Offer and negotiation:","index":"7"},{"id":"timeline","title":"Timeline","index":"8"}],"reading_time":"673 words in 4 min"},{"title":"Working at Google - Leetcode and other online resources (part 5)","date":"2023-03-25T15:41:14.000Z","excerpt":"Practicing coding problems is essential for preparing for technical interviews at companies like Google. LeetCode and other online resources offer a vast collection of coding challenges that help you hone your problem-solving and coding skills.","author":"codesandtags","thumbnail":"images/faang-google-thumbnail.jpg","_content":"\nPracticing coding problems is essential for preparing for technical interviews at companies like Google. LeetCode and other online resources offer a vast collection of coding challenges that help you hone your problem-solving and coding skills. Here's more detail on LeetCode and some other popular platforms:\n\n## LeetCode (https://leetcode.com/):\n\nLeetCode is one of the most popular online platforms for practicing coding challenges. It offers a large collection of problems, sorted by difficulty level (easy, medium, and hard) and categorized by topic (e.g., arrays, trees, graphs, dynamic programming). Many problems on LeetCode are similar to questions asked in actual interviews. The platform also features:\n\n- A code editor with built-in support for multiple programming languages\n- Test cases to verify your solution's correctness and performance\n- User-submitted solutions and explanations to learn from others\n- A premium subscription option that unlocks additional features, such as company-specific questions\n\n## HackerRank (https://www.hackerrank.com/):\n\nHackerRank is another popular platform for practicing coding challenges, featuring problems across various domains, such as algorithms, data structures, artificial intelligence, and databases. HackerRank also offers:\n\n- A code editor with built-in support for multiple programming languages\n- Test cases and a scoring system to evaluate your solution\n- Competitions and hackathons to test your skills against others\n- A job board where you can apply to companies using your HackerRank profile\n\n## CodeSignal (https://codesignal.com/):\n\nCodeSignal is a platform for practicing coding problems and participating in coding competitions. It offers a variety of challenges across multiple domains, such as algorithms, data structures, and databases. CodeSignal also provides:\n\n- A code editor with built-in support for multiple programming languages\n- Test cases and a scoring system to evaluate your solution\n- Coding competitions and company-sponsored challenges\n- A job board and a talent-matching system that connects you with potential employers\n\n## GeeksforGeeks (https://www.geeksforgeeks.org/):\n\nGeeksforGeeks is a comprehensive resource for computer science fundamentals, programming tutorials, and coding problems. It offers a vast collection of articles, explanations, and sample solutions for various topics, such as data structures, algorithms, operating systems, and databases. GeeksforGeeks also features:\n\n- A code editor for trying out code snippets and examples\n- A question bank with coding problems from various companies\n- Mock interviews and interview experiences shared by users\n- Online courses and certifications for more structured learning\n\n## Project Euler (https://projecteuler.net/):\n\nProject Euler is a collection of challenging mathematical problems that require creative problem-solving and programming skills. While not specifically focused on typical coding interview questions, solving Project Euler problems can help sharpen your analytical and optimization skills, which are valuable for technical interviews.\n\nBy utilizing these resources, you can practice a wide range of coding problems and improve your problem-solving skills to succeed in Google software interviews. Remember to focus on the quality of your practice, understanding the underlying concepts, and learning from your mistakes to maximize your preparation.\n\n## Timeline\n\n#### Week 1: Getting Started with Online Resources\n\nSign up for LeetCode, HackerRank, CodeSignal, and GeeksforGeeks\nFamiliarize yourself with the platforms and their features\nStart with easy coding problems on each platform\n\n#### Week 2: Data Structures\n\nFocus on solving problems related to arrays, linked lists, stacks, queues, hash tables, trees, and graphs\nUse online resources like GeeksforGeeks and LeetCode to find relevant problems and solutions\n\n#### Week 3: Algorithms\n\nPractice problems on sorting, searching, recursion, dynamic programming, and greedy algorithms\nUse platforms like HackerRank and CodeSignal to find algorithm challenges and competitions\n\n#### Week 4: System Design\n\nStudy design patterns, scalability, performance optimization, and microservices architecture using online resources\nAttempt system design problems on LeetCode\n\n#### Week 5: Mock Interviews\n\nParticipate in mock interviews on platforms like Pramp and Interviewing.io\nFocus on applying concepts learned from online resources during mock interviews\n\n#### Week 6: Coding Competitions and Challenges\n\nParticipate in coding competitions on platforms like CodeSignal and HackerRank\nSolve time-bound coding challenges to improve your problem-solving speed\n\n#### Week 7: Review and Refine\n\nRevisit difficult topics and problems from previous weeks\nStudy user-submitted solutions and explanations on LeetCode and GeeksforGeeks to learn alternative approaches\n\n#### Week 8: Final Preparation\n\nContinue practicing coding problems on various platforms\nFocus on improving your speed, accuracy, and efficiency\nParticipate in additional mock interviews using online resources\n\n![space](images/working-at-google-leetcode-and-other-resources-hero.jpg)\n","source":"_posts/en/working-at-google-leetcode-and-other-resources.md","raw":"---\ntitle: Working at Google - Leetcode and other online resources (part 5)\ndate: 2023-03-25 11:41:14\ntags: [google, software, interview, leetcode]\nexcerpt: Practicing coding problems is essential for preparing for technical interviews at companies like Google. LeetCode and other online resources offer a vast collection of coding challenges that help you hone your problem-solving and coding skills.\nauthor: codesandtags\ncategory: FAANG\nthumbnail: images/faang-google-thumbnail.jpg\n---\n\nPracticing coding problems is essential for preparing for technical interviews at companies like Google. LeetCode and other online resources offer a vast collection of coding challenges that help you hone your problem-solving and coding skills. Here's more detail on LeetCode and some other popular platforms:\n\n## LeetCode (https://leetcode.com/):\n\nLeetCode is one of the most popular online platforms for practicing coding challenges. It offers a large collection of problems, sorted by difficulty level (easy, medium, and hard) and categorized by topic (e.g., arrays, trees, graphs, dynamic programming). Many problems on LeetCode are similar to questions asked in actual interviews. The platform also features:\n\n- A code editor with built-in support for multiple programming languages\n- Test cases to verify your solution's correctness and performance\n- User-submitted solutions and explanations to learn from others\n- A premium subscription option that unlocks additional features, such as company-specific questions\n\n## HackerRank (https://www.hackerrank.com/):\n\nHackerRank is another popular platform for practicing coding challenges, featuring problems across various domains, such as algorithms, data structures, artificial intelligence, and databases. HackerRank also offers:\n\n- A code editor with built-in support for multiple programming languages\n- Test cases and a scoring system to evaluate your solution\n- Competitions and hackathons to test your skills against others\n- A job board where you can apply to companies using your HackerRank profile\n\n## CodeSignal (https://codesignal.com/):\n\nCodeSignal is a platform for practicing coding problems and participating in coding competitions. It offers a variety of challenges across multiple domains, such as algorithms, data structures, and databases. CodeSignal also provides:\n\n- A code editor with built-in support for multiple programming languages\n- Test cases and a scoring system to evaluate your solution\n- Coding competitions and company-sponsored challenges\n- A job board and a talent-matching system that connects you with potential employers\n\n## GeeksforGeeks (https://www.geeksforgeeks.org/):\n\nGeeksforGeeks is a comprehensive resource for computer science fundamentals, programming tutorials, and coding problems. It offers a vast collection of articles, explanations, and sample solutions for various topics, such as data structures, algorithms, operating systems, and databases. GeeksforGeeks also features:\n\n- A code editor for trying out code snippets and examples\n- A question bank with coding problems from various companies\n- Mock interviews and interview experiences shared by users\n- Online courses and certifications for more structured learning\n\n## Project Euler (https://projecteuler.net/):\n\nProject Euler is a collection of challenging mathematical problems that require creative problem-solving and programming skills. While not specifically focused on typical coding interview questions, solving Project Euler problems can help sharpen your analytical and optimization skills, which are valuable for technical interviews.\n\nBy utilizing these resources, you can practice a wide range of coding problems and improve your problem-solving skills to succeed in Google software interviews. Remember to focus on the quality of your practice, understanding the underlying concepts, and learning from your mistakes to maximize your preparation.\n\n## Timeline\n\n#### Week 1: Getting Started with Online Resources\n\nSign up for LeetCode, HackerRank, CodeSignal, and GeeksforGeeks\nFamiliarize yourself with the platforms and their features\nStart with easy coding problems on each platform\n\n#### Week 2: Data Structures\n\nFocus on solving problems related to arrays, linked lists, stacks, queues, hash tables, trees, and graphs\nUse online resources like GeeksforGeeks and LeetCode to find relevant problems and solutions\n\n#### Week 3: Algorithms\n\nPractice problems on sorting, searching, recursion, dynamic programming, and greedy algorithms\nUse platforms like HackerRank and CodeSignal to find algorithm challenges and competitions\n\n#### Week 4: System Design\n\nStudy design patterns, scalability, performance optimization, and microservices architecture using online resources\nAttempt system design problems on LeetCode\n\n#### Week 5: Mock Interviews\n\nParticipate in mock interviews on platforms like Pramp and Interviewing.io\nFocus on applying concepts learned from online resources during mock interviews\n\n#### Week 6: Coding Competitions and Challenges\n\nParticipate in coding competitions on platforms like CodeSignal and HackerRank\nSolve time-bound coding challenges to improve your problem-solving speed\n\n#### Week 7: Review and Refine\n\nRevisit difficult topics and problems from previous weeks\nStudy user-submitted solutions and explanations on LeetCode and GeeksforGeeks to learn alternative approaches\n\n#### Week 8: Final Preparation\n\nContinue practicing coding problems on various platforms\nFocus on improving your speed, accuracy, and efficiency\nParticipate in additional mock interviews using online resources\n\n![space](images/working-at-google-leetcode-and-other-resources-hero.jpg)\n","slug":"en/working-at-google-leetcode-and-other-resources","published":1,"updated":"2023-07-17T22:47:10.536Z","comments":1,"layout":"post","photos":[],"link":"2023/03/25/en/working-at-google-leetcode-and-other-resources","_id":"clk8zxu0o000750t2e8wj0tsu","content":"<p>Practicing coding problems is essential for preparing for technical interviews at companies like Google. LeetCode and other online resources offer a vast collection of coding challenges that help you hone your problem-solving and coding skills. Here’s more detail on LeetCode and some other popular platforms:</p>\n<h2 id=\"leetcode-(https://leetcode.com/):\">LeetCode (<a href=\"https://leetcode.com/\">https://leetcode.com/</a>):<a title=\"#leetcode-(https://leetcode.com/):\" href=\"#leetcode-(https://leetcode.com/):\"></a></h2>\n<p>LeetCode is one of the most popular online platforms for practicing coding challenges. It offers a large collection of problems, sorted by difficulty level (easy, medium, and hard) and categorized by topic (e.g., arrays, trees, graphs, dynamic programming). Many problems on LeetCode are similar to questions asked in actual interviews. The platform also features:</p>\n<ul>\n<li>A code editor with built-in support for multiple programming languages</li>\n<li>Test cases to verify your solution’s correctness and performance</li>\n<li>User-submitted solutions and explanations to learn from others</li>\n<li>A premium subscription option that unlocks additional features, such as company-specific questions</li>\n</ul>\n<h2 id=\"hackerrank-(https://www.hackerrank.com/):\">HackerRank (<a href=\"https://www.hackerrank.com/\">https://www.hackerrank.com/</a>):<a title=\"#hackerrank-(https://www.hackerrank.com/):\" href=\"#hackerrank-(https://www.hackerrank.com/):\"></a></h2>\n<p>HackerRank is another popular platform for practicing coding challenges, featuring problems across various domains, such as algorithms, data structures, artificial intelligence, and databases. HackerRank also offers:</p>\n<ul>\n<li>A code editor with built-in support for multiple programming languages</li>\n<li>Test cases and a scoring system to evaluate your solution</li>\n<li>Competitions and hackathons to test your skills against others</li>\n<li>A job board where you can apply to companies using your HackerRank profile</li>\n</ul>\n<h2 id=\"codesignal-(https://codesignal.com/):\">CodeSignal (<a href=\"https://codesignal.com/\">https://codesignal.com/</a>):<a title=\"#codesignal-(https://codesignal.com/):\" href=\"#codesignal-(https://codesignal.com/):\"></a></h2>\n<p>CodeSignal is a platform for practicing coding problems and participating in coding competitions. It offers a variety of challenges across multiple domains, such as algorithms, data structures, and databases. CodeSignal also provides:</p>\n<ul>\n<li>A code editor with built-in support for multiple programming languages</li>\n<li>Test cases and a scoring system to evaluate your solution</li>\n<li>Coding competitions and company-sponsored challenges</li>\n<li>A job board and a talent-matching system that connects you with potential employers</li>\n</ul>\n<h2 id=\"geeksforgeeks-(https://www.geeksforgeeks.org/):\">GeeksforGeeks (<a href=\"https://www.geeksforgeeks.org/\">https://www.geeksforgeeks.org/</a>):<a title=\"#geeksforgeeks-(https://www.geeksforgeeks.org/):\" href=\"#geeksforgeeks-(https://www.geeksforgeeks.org/):\"></a></h2>\n<p>GeeksforGeeks is a comprehensive resource for computer science fundamentals, programming tutorials, and coding problems. It offers a vast collection of articles, explanations, and sample solutions for various topics, such as data structures, algorithms, operating systems, and databases. GeeksforGeeks also features:</p>\n<ul>\n<li>A code editor for trying out code snippets and examples</li>\n<li>A question bank with coding problems from various companies</li>\n<li>Mock interviews and interview experiences shared by users</li>\n<li>Online courses and certifications for more structured learning</li>\n</ul>\n<h2 id=\"project-euler-(https://projecteuler.net/):\">Project Euler (<a href=\"https://projecteuler.net/\">https://projecteuler.net/</a>):<a title=\"#project-euler-(https://projecteuler.net/):\" href=\"#project-euler-(https://projecteuler.net/):\"></a></h2>\n<p>Project Euler is a collection of challenging mathematical problems that require creative problem-solving and programming skills. While not specifically focused on typical coding interview questions, solving Project Euler problems can help sharpen your analytical and optimization skills, which are valuable for technical interviews.</p>\n<p>By utilizing these resources, you can practice a wide range of coding problems and improve your problem-solving skills to succeed in Google software interviews. Remember to focus on the quality of your practice, understanding the underlying concepts, and learning from your mistakes to maximize your preparation.</p>\n<h2 id=\"timeline\">Timeline<a title=\"#timeline\" href=\"#timeline\"></a></h2>\n<h4 id=\"week-1:-getting-started-with-online-resources\">Week 1: Getting Started with Online Resources<a title=\"#week-1:-getting-started-with-online-resources\" href=\"#week-1:-getting-started-with-online-resources\"></a></h4>\n<p>Sign up for LeetCode, HackerRank, CodeSignal, and GeeksforGeeks<br>\nFamiliarize yourself with the platforms and their features<br>\nStart with easy coding problems on each platform</p>\n<h4 id=\"week-2:-data-structures\">Week 2: Data Structures<a title=\"#week-2:-data-structures\" href=\"#week-2:-data-structures\"></a></h4>\n<p>Focus on solving problems related to arrays, linked lists, stacks, queues, hash tables, trees, and graphs<br>\nUse online resources like GeeksforGeeks and LeetCode to find relevant problems and solutions</p>\n<h4 id=\"week-3:-algorithms\">Week 3: Algorithms<a title=\"#week-3:-algorithms\" href=\"#week-3:-algorithms\"></a></h4>\n<p>Practice problems on sorting, searching, recursion, dynamic programming, and greedy algorithms<br>\nUse platforms like HackerRank and CodeSignal to find algorithm challenges and competitions</p>\n<h4 id=\"week-4:-system-design\">Week 4: System Design<a title=\"#week-4:-system-design\" href=\"#week-4:-system-design\"></a></h4>\n<p>Study design patterns, scalability, performance optimization, and microservices architecture using online resources<br>\nAttempt system design problems on LeetCode</p>\n<h4 id=\"week-5:-mock-interviews\">Week 5: Mock Interviews<a title=\"#week-5:-mock-interviews\" href=\"#week-5:-mock-interviews\"></a></h4>\n<p>Participate in mock interviews on platforms like Pramp and <a href=\"http://Interviewing.io\">Interviewing.io</a><br>\nFocus on applying concepts learned from online resources during mock interviews</p>\n<h4 id=\"week-6:-coding-competitions-and-challenges\">Week 6: Coding Competitions and Challenges<a title=\"#week-6:-coding-competitions-and-challenges\" href=\"#week-6:-coding-competitions-and-challenges\"></a></h4>\n<p>Participate in coding competitions on platforms like CodeSignal and HackerRank<br>\nSolve time-bound coding challenges to improve your problem-solving speed</p>\n<h4 id=\"week-7:-review-and-refine\">Week 7: Review and Refine<a title=\"#week-7:-review-and-refine\" href=\"#week-7:-review-and-refine\"></a></h4>\n<p>Revisit difficult topics and problems from previous weeks<br>\nStudy user-submitted solutions and explanations on LeetCode and GeeksforGeeks to learn alternative approaches</p>\n<h4 id=\"week-8:-final-preparation\">Week 8: Final Preparation<a title=\"#week-8:-final-preparation\" href=\"#week-8:-final-preparation\"></a></h4>\n<p>Continue practicing coding problems on various platforms<br>\nFocus on improving your speed, accuracy, and efficiency<br>\nParticipate in additional mock interviews using online resources</p>\n<p><img src=\"images/working-at-google-leetcode-and-other-resources-hero.jpg\" alt=\"space\" loading=\"lazy\" class=\"φbp\"></p>\n","site":{"data":{}},"more":"<p>Practicing coding problems is essential for preparing for technical interviews at companies like Google. LeetCode and other online resources offer a vast collection of coding challenges that help you hone your problem-solving and coding skills. Here’s more detail on LeetCode and some other popular platforms:</p>\n<h2 id=\"leetcode-(https://leetcode.com/):\">LeetCode (<a href=\"https://leetcode.com/\">https://leetcode.com/</a>):<a title=\"#leetcode-(https://leetcode.com/):\" href=\"#leetcode-(https://leetcode.com/):\"></a></h2>\n<p>LeetCode is one of the most popular online platforms for practicing coding challenges. It offers a large collection of problems, sorted by difficulty level (easy, medium, and hard) and categorized by topic (e.g., arrays, trees, graphs, dynamic programming). Many problems on LeetCode are similar to questions asked in actual interviews. The platform also features:</p>\n<ul>\n<li>A code editor with built-in support for multiple programming languages</li>\n<li>Test cases to verify your solution’s correctness and performance</li>\n<li>User-submitted solutions and explanations to learn from others</li>\n<li>A premium subscription option that unlocks additional features, such as company-specific questions</li>\n</ul>\n<h2 id=\"hackerrank-(https://www.hackerrank.com/):\">HackerRank (<a href=\"https://www.hackerrank.com/\">https://www.hackerrank.com/</a>):<a title=\"#hackerrank-(https://www.hackerrank.com/):\" href=\"#hackerrank-(https://www.hackerrank.com/):\"></a></h2>\n<p>HackerRank is another popular platform for practicing coding challenges, featuring problems across various domains, such as algorithms, data structures, artificial intelligence, and databases. HackerRank also offers:</p>\n<ul>\n<li>A code editor with built-in support for multiple programming languages</li>\n<li>Test cases and a scoring system to evaluate your solution</li>\n<li>Competitions and hackathons to test your skills against others</li>\n<li>A job board where you can apply to companies using your HackerRank profile</li>\n</ul>\n<h2 id=\"codesignal-(https://codesignal.com/):\">CodeSignal (<a href=\"https://codesignal.com/\">https://codesignal.com/</a>):<a title=\"#codesignal-(https://codesignal.com/):\" href=\"#codesignal-(https://codesignal.com/):\"></a></h2>\n<p>CodeSignal is a platform for practicing coding problems and participating in coding competitions. It offers a variety of challenges across multiple domains, such as algorithms, data structures, and databases. CodeSignal also provides:</p>\n<ul>\n<li>A code editor with built-in support for multiple programming languages</li>\n<li>Test cases and a scoring system to evaluate your solution</li>\n<li>Coding competitions and company-sponsored challenges</li>\n<li>A job board and a talent-matching system that connects you with potential employers</li>\n</ul>\n<h2 id=\"geeksforgeeks-(https://www.geeksforgeeks.org/):\">GeeksforGeeks (<a href=\"https://www.geeksforgeeks.org/\">https://www.geeksforgeeks.org/</a>):<a title=\"#geeksforgeeks-(https://www.geeksforgeeks.org/):\" href=\"#geeksforgeeks-(https://www.geeksforgeeks.org/):\"></a></h2>\n<p>GeeksforGeeks is a comprehensive resource for computer science fundamentals, programming tutorials, and coding problems. It offers a vast collection of articles, explanations, and sample solutions for various topics, such as data structures, algorithms, operating systems, and databases. GeeksforGeeks also features:</p>\n<ul>\n<li>A code editor for trying out code snippets and examples</li>\n<li>A question bank with coding problems from various companies</li>\n<li>Mock interviews and interview experiences shared by users</li>\n<li>Online courses and certifications for more structured learning</li>\n</ul>\n<h2 id=\"project-euler-(https://projecteuler.net/):\">Project Euler (<a href=\"https://projecteuler.net/\">https://projecteuler.net/</a>):<a title=\"#project-euler-(https://projecteuler.net/):\" href=\"#project-euler-(https://projecteuler.net/):\"></a></h2>\n<p>Project Euler is a collection of challenging mathematical problems that require creative problem-solving and programming skills. While not specifically focused on typical coding interview questions, solving Project Euler problems can help sharpen your analytical and optimization skills, which are valuable for technical interviews.</p>\n<p>By utilizing these resources, you can practice a wide range of coding problems and improve your problem-solving skills to succeed in Google software interviews. Remember to focus on the quality of your practice, understanding the underlying concepts, and learning from your mistakes to maximize your preparation.</p>\n<h2 id=\"timeline\">Timeline<a title=\"#timeline\" href=\"#timeline\"></a></h2>\n<h4 id=\"week-1:-getting-started-with-online-resources\">Week 1: Getting Started with Online Resources<a title=\"#week-1:-getting-started-with-online-resources\" href=\"#week-1:-getting-started-with-online-resources\"></a></h4>\n<p>Sign up for LeetCode, HackerRank, CodeSignal, and GeeksforGeeks<br>\nFamiliarize yourself with the platforms and their features<br>\nStart with easy coding problems on each platform</p>\n<h4 id=\"week-2:-data-structures\">Week 2: Data Structures<a title=\"#week-2:-data-structures\" href=\"#week-2:-data-structures\"></a></h4>\n<p>Focus on solving problems related to arrays, linked lists, stacks, queues, hash tables, trees, and graphs<br>\nUse online resources like GeeksforGeeks and LeetCode to find relevant problems and solutions</p>\n<h4 id=\"week-3:-algorithms\">Week 3: Algorithms<a title=\"#week-3:-algorithms\" href=\"#week-3:-algorithms\"></a></h4>\n<p>Practice problems on sorting, searching, recursion, dynamic programming, and greedy algorithms<br>\nUse platforms like HackerRank and CodeSignal to find algorithm challenges and competitions</p>\n<h4 id=\"week-4:-system-design\">Week 4: System Design<a title=\"#week-4:-system-design\" href=\"#week-4:-system-design\"></a></h4>\n<p>Study design patterns, scalability, performance optimization, and microservices architecture using online resources<br>\nAttempt system design problems on LeetCode</p>\n<h4 id=\"week-5:-mock-interviews\">Week 5: Mock Interviews<a title=\"#week-5:-mock-interviews\" href=\"#week-5:-mock-interviews\"></a></h4>\n<p>Participate in mock interviews on platforms like Pramp and <a href=\"http://Interviewing.io\">Interviewing.io</a><br>\nFocus on applying concepts learned from online resources during mock interviews</p>\n<h4 id=\"week-6:-coding-competitions-and-challenges\">Week 6: Coding Competitions and Challenges<a title=\"#week-6:-coding-competitions-and-challenges\" href=\"#week-6:-coding-competitions-and-challenges\"></a></h4>\n<p>Participate in coding competitions on platforms like CodeSignal and HackerRank<br>\nSolve time-bound coding challenges to improve your problem-solving speed</p>\n<h4 id=\"week-7:-review-and-refine\">Week 7: Review and Refine<a title=\"#week-7:-review-and-refine\" href=\"#week-7:-review-and-refine\"></a></h4>\n<p>Revisit difficult topics and problems from previous weeks<br>\nStudy user-submitted solutions and explanations on LeetCode and GeeksforGeeks to learn alternative approaches</p>\n<h4 id=\"week-8:-final-preparation\">Week 8: Final Preparation<a title=\"#week-8:-final-preparation\" href=\"#week-8:-final-preparation\"></a></h4>\n<p>Continue practicing coding problems on various platforms<br>\nFocus on improving your speed, accuracy, and efficiency<br>\nParticipate in additional mock interviews using online resources</p>\n<p><img src=\"images/working-at-google-leetcode-and-other-resources-hero.jpg\" alt=\"space\" loading=\"lazy\" class=\"φbp\"></p>\n","date_formatted":{"ll":"Mar 25, 2023","L":"03/25/2023","MM-DD":"03-25"},"plink":"http://codesandtags.io/blog/2023/03/25/en/working-at-google-leetcode-and-other-resources/","type":"post","toc":[{"id":"leetcode-(https://leetcode.com/):","title":"LeetCode (https:&#x2F;&#x2F;leetcode.com&#x2F;):","index":"1"},{"id":"hackerrank-(https://www.hackerrank.com/):","title":"HackerRank (https:&#x2F;&#x2F;www.hackerrank.com&#x2F;):","index":"2"},{"id":"codesignal-(https://codesignal.com/):","title":"CodeSignal (https:&#x2F;&#x2F;codesignal.com&#x2F;):","index":"3"},{"id":"geeksforgeeks-(https://www.geeksforgeeks.org/):","title":"GeeksforGeeks (https:&#x2F;&#x2F;www.geeksforgeeks.org&#x2F;):","index":"4"},{"id":"project-euler-(https://projecteuler.net/):","title":"Project Euler (https:&#x2F;&#x2F;projecteuler.net&#x2F;):","index":"5"},{"id":"timeline","title":"Timeline","index":"6"}],"reading_time":"707 words in 5 min"},{"title":"Working at Google - optimize your problem solving (part 6)","date":"2023-03-27T02:44:01.000Z","excerpt":"Optimizing your problem-solving approach is essential to succeed in technical interviews, as it allows you to tackle problems more efficiently and effectively.","author":"codesandtags","thumbnail":"images/faang-google-thumbnail.jpg","_content":"\nOptimizing your problem-solving approach is essential to succeed in technical interviews, as it allows you to tackle problems more efficiently and effectively. Here are some strategies to help you optimize your approach:\n\n## 1. Understand the problem\n\nBefore diving into writing code, take the time to thoroughly understand the problem statement, including the input format, constraints, and expected output. Ask the interviewer any clarifying questions to ensure you fully grasp the problem requirements.\n\n## 2. Identify patterns and techniques\n\nRecognize common patterns in the problem, such as whether it involves searching, sorting, or graph traversal. This will help you determine which data structures and algorithms might be useful in solving the problem. Drawing from your experience with similar problems can also provide valuable insights.\n\n## 3. Develop a plan\n\nBefore writing any code, outline a high-level plan for solving the problem. This may include steps such as parsing the input, iterating through data, applying algorithms, and generating output. Discuss your plan with the interviewer to ensure it's on the right track and to receive any necessary feedback.\n\n## 4. Choose the right data structures\n\nSelect appropriate data structures for your solution, considering factors such as time and space complexity, ease of implementation, and readability. Choosing the right data structures can significantly impact the efficiency and effectiveness of your solution.\n\n## 5. Write clean and efficient code\n\nWhen implementing your solution, focus on writing clean and efficient code. Use meaningful variable names, follow consistent indentation and formatting, and include comments to explain your logic. Optimize your code by eliminating redundant operations, minimizing nested loops, and using efficient algorithms.\n\n## 6. Test and debug your solution\n\nAfter implementing your solution, test it using a variety of test cases, including edge cases and common scenarios. This will help you identify any errors or inefficiencies in your code. When debugging, use a systematic approach to narrow down the source of the issue and apply targeted fixes.\n\n## 7. Optimize and iterate\n\nContinuously look for opportunities to optimize your solution, whether it's improving time complexity, reducing space usage, or enhancing code readability. Discuss trade-offs with the interviewer and seek their input on potential optimizations.\n\n## 8. Practice time management\n\nDevelop a sense of pacing during your interviews, allowing enough time for each stage of the problem-solving process. This may involve allocating time for understanding the problem, developing a plan, writing code, and testing your solution.\n\n## 9. Communicate effectively\n\nThroughout the interview, maintain open communication with the interviewer. Explain your thought process, discuss your plan, and ask for feedback. Effective communication not only demonstrates your problem-solving approach but also showcases your ability to collaborate and articulate your ideas.\n\nBy optimizing your problem-solving approach and practicing these strategies, you'll be better equipped to tackle a wide range of problems during Google software interviews and demonstrate your ability to develop efficient and effective solutions.\n","source":"_posts/en/working-at-google-optimize-your-problem-solving.md","raw":"---\ntitle: Working at Google - optimize your problem solving (part 6)\ndate: 2023-03-26 22:44:01\ntags: [google, software, interview]\nexcerpt: Optimizing your problem-solving approach is essential to succeed in technical interviews, as it allows you to tackle problems more efficiently and effectively.\nauthor: codesandtags\ncategory: FAANG\nthumbnail: images/faang-google-thumbnail.jpg\n---\n\nOptimizing your problem-solving approach is essential to succeed in technical interviews, as it allows you to tackle problems more efficiently and effectively. Here are some strategies to help you optimize your approach:\n\n## 1. Understand the problem\n\nBefore diving into writing code, take the time to thoroughly understand the problem statement, including the input format, constraints, and expected output. Ask the interviewer any clarifying questions to ensure you fully grasp the problem requirements.\n\n## 2. Identify patterns and techniques\n\nRecognize common patterns in the problem, such as whether it involves searching, sorting, or graph traversal. This will help you determine which data structures and algorithms might be useful in solving the problem. Drawing from your experience with similar problems can also provide valuable insights.\n\n## 3. Develop a plan\n\nBefore writing any code, outline a high-level plan for solving the problem. This may include steps such as parsing the input, iterating through data, applying algorithms, and generating output. Discuss your plan with the interviewer to ensure it's on the right track and to receive any necessary feedback.\n\n## 4. Choose the right data structures\n\nSelect appropriate data structures for your solution, considering factors such as time and space complexity, ease of implementation, and readability. Choosing the right data structures can significantly impact the efficiency and effectiveness of your solution.\n\n## 5. Write clean and efficient code\n\nWhen implementing your solution, focus on writing clean and efficient code. Use meaningful variable names, follow consistent indentation and formatting, and include comments to explain your logic. Optimize your code by eliminating redundant operations, minimizing nested loops, and using efficient algorithms.\n\n## 6. Test and debug your solution\n\nAfter implementing your solution, test it using a variety of test cases, including edge cases and common scenarios. This will help you identify any errors or inefficiencies in your code. When debugging, use a systematic approach to narrow down the source of the issue and apply targeted fixes.\n\n## 7. Optimize and iterate\n\nContinuously look for opportunities to optimize your solution, whether it's improving time complexity, reducing space usage, or enhancing code readability. Discuss trade-offs with the interviewer and seek their input on potential optimizations.\n\n## 8. Practice time management\n\nDevelop a sense of pacing during your interviews, allowing enough time for each stage of the problem-solving process. This may involve allocating time for understanding the problem, developing a plan, writing code, and testing your solution.\n\n## 9. Communicate effectively\n\nThroughout the interview, maintain open communication with the interviewer. Explain your thought process, discuss your plan, and ask for feedback. Effective communication not only demonstrates your problem-solving approach but also showcases your ability to collaborate and articulate your ideas.\n\nBy optimizing your problem-solving approach and practicing these strategies, you'll be better equipped to tackle a wide range of problems during Google software interviews and demonstrate your ability to develop efficient and effective solutions.\n","slug":"en/working-at-google-optimize-your-problem-solving","published":1,"updated":"2023-07-17T22:47:10.537Z","comments":1,"layout":"post","photos":[],"link":"2023/03/26/en/working-at-google-optimize-your-problem-solving","_id":"clk8zxu0q000b50t2gwmp6z1v","content":"<p>Optimizing your problem-solving approach is essential to succeed in technical interviews, as it allows you to tackle problems more efficiently and effectively. Here are some strategies to help you optimize your approach:</p>\n<h2 id=\"1.-understand-the-problem\">1. Understand the problem<a title=\"#1.-understand-the-problem\" href=\"#1.-understand-the-problem\"></a></h2>\n<p>Before diving into writing code, take the time to thoroughly understand the problem statement, including the input format, constraints, and expected output. Ask the interviewer any clarifying questions to ensure you fully grasp the problem requirements.</p>\n<h2 id=\"2.-identify-patterns-and-techniques\">2. Identify patterns and techniques<a title=\"#2.-identify-patterns-and-techniques\" href=\"#2.-identify-patterns-and-techniques\"></a></h2>\n<p>Recognize common patterns in the problem, such as whether it involves searching, sorting, or graph traversal. This will help you determine which data structures and algorithms might be useful in solving the problem. Drawing from your experience with similar problems can also provide valuable insights.</p>\n<h2 id=\"3.-develop-a-plan\">3. Develop a plan<a title=\"#3.-develop-a-plan\" href=\"#3.-develop-a-plan\"></a></h2>\n<p>Before writing any code, outline a high-level plan for solving the problem. This may include steps such as parsing the input, iterating through data, applying algorithms, and generating output. Discuss your plan with the interviewer to ensure it’s on the right track and to receive any necessary feedback.</p>\n<h2 id=\"4.-choose-the-right-data-structures\">4. Choose the right data structures<a title=\"#4.-choose-the-right-data-structures\" href=\"#4.-choose-the-right-data-structures\"></a></h2>\n<p>Select appropriate data structures for your solution, considering factors such as time and space complexity, ease of implementation, and readability. Choosing the right data structures can significantly impact the efficiency and effectiveness of your solution.</p>\n<h2 id=\"5.-write-clean-and-efficient-code\">5. Write clean and efficient code<a title=\"#5.-write-clean-and-efficient-code\" href=\"#5.-write-clean-and-efficient-code\"></a></h2>\n<p>When implementing your solution, focus on writing clean and efficient code. Use meaningful variable names, follow consistent indentation and formatting, and include comments to explain your logic. Optimize your code by eliminating redundant operations, minimizing nested loops, and using efficient algorithms.</p>\n<h2 id=\"6.-test-and-debug-your-solution\">6. Test and debug your solution<a title=\"#6.-test-and-debug-your-solution\" href=\"#6.-test-and-debug-your-solution\"></a></h2>\n<p>After implementing your solution, test it using a variety of test cases, including edge cases and common scenarios. This will help you identify any errors or inefficiencies in your code. When debugging, use a systematic approach to narrow down the source of the issue and apply targeted fixes.</p>\n<h2 id=\"7.-optimize-and-iterate\">7. Optimize and iterate<a title=\"#7.-optimize-and-iterate\" href=\"#7.-optimize-and-iterate\"></a></h2>\n<p>Continuously look for opportunities to optimize your solution, whether it’s improving time complexity, reducing space usage, or enhancing code readability. Discuss trade-offs with the interviewer and seek their input on potential optimizations.</p>\n<h2 id=\"8.-practice-time-management\">8. Practice time management<a title=\"#8.-practice-time-management\" href=\"#8.-practice-time-management\"></a></h2>\n<p>Develop a sense of pacing during your interviews, allowing enough time for each stage of the problem-solving process. This may involve allocating time for understanding the problem, developing a plan, writing code, and testing your solution.</p>\n<h2 id=\"9.-communicate-effectively\">9. Communicate effectively<a title=\"#9.-communicate-effectively\" href=\"#9.-communicate-effectively\"></a></h2>\n<p>Throughout the interview, maintain open communication with the interviewer. Explain your thought process, discuss your plan, and ask for feedback. Effective communication not only demonstrates your problem-solving approach but also showcases your ability to collaborate and articulate your ideas.</p>\n<p>By optimizing your problem-solving approach and practicing these strategies, you’ll be better equipped to tackle a wide range of problems during Google software interviews and demonstrate your ability to develop efficient and effective solutions.</p>\n","site":{"data":{}},"more":"<p>Optimizing your problem-solving approach is essential to succeed in technical interviews, as it allows you to tackle problems more efficiently and effectively. Here are some strategies to help you optimize your approach:</p>\n<h2 id=\"1.-understand-the-problem\">1. Understand the problem<a title=\"#1.-understand-the-problem\" href=\"#1.-understand-the-problem\"></a></h2>\n<p>Before diving into writing code, take the time to thoroughly understand the problem statement, including the input format, constraints, and expected output. Ask the interviewer any clarifying questions to ensure you fully grasp the problem requirements.</p>\n<h2 id=\"2.-identify-patterns-and-techniques\">2. Identify patterns and techniques<a title=\"#2.-identify-patterns-and-techniques\" href=\"#2.-identify-patterns-and-techniques\"></a></h2>\n<p>Recognize common patterns in the problem, such as whether it involves searching, sorting, or graph traversal. This will help you determine which data structures and algorithms might be useful in solving the problem. Drawing from your experience with similar problems can also provide valuable insights.</p>\n<h2 id=\"3.-develop-a-plan\">3. Develop a plan<a title=\"#3.-develop-a-plan\" href=\"#3.-develop-a-plan\"></a></h2>\n<p>Before writing any code, outline a high-level plan for solving the problem. This may include steps such as parsing the input, iterating through data, applying algorithms, and generating output. Discuss your plan with the interviewer to ensure it’s on the right track and to receive any necessary feedback.</p>\n<h2 id=\"4.-choose-the-right-data-structures\">4. Choose the right data structures<a title=\"#4.-choose-the-right-data-structures\" href=\"#4.-choose-the-right-data-structures\"></a></h2>\n<p>Select appropriate data structures for your solution, considering factors such as time and space complexity, ease of implementation, and readability. Choosing the right data structures can significantly impact the efficiency and effectiveness of your solution.</p>\n<h2 id=\"5.-write-clean-and-efficient-code\">5. Write clean and efficient code<a title=\"#5.-write-clean-and-efficient-code\" href=\"#5.-write-clean-and-efficient-code\"></a></h2>\n<p>When implementing your solution, focus on writing clean and efficient code. Use meaningful variable names, follow consistent indentation and formatting, and include comments to explain your logic. Optimize your code by eliminating redundant operations, minimizing nested loops, and using efficient algorithms.</p>\n<h2 id=\"6.-test-and-debug-your-solution\">6. Test and debug your solution<a title=\"#6.-test-and-debug-your-solution\" href=\"#6.-test-and-debug-your-solution\"></a></h2>\n<p>After implementing your solution, test it using a variety of test cases, including edge cases and common scenarios. This will help you identify any errors or inefficiencies in your code. When debugging, use a systematic approach to narrow down the source of the issue and apply targeted fixes.</p>\n<h2 id=\"7.-optimize-and-iterate\">7. Optimize and iterate<a title=\"#7.-optimize-and-iterate\" href=\"#7.-optimize-and-iterate\"></a></h2>\n<p>Continuously look for opportunities to optimize your solution, whether it’s improving time complexity, reducing space usage, or enhancing code readability. Discuss trade-offs with the interviewer and seek their input on potential optimizations.</p>\n<h2 id=\"8.-practice-time-management\">8. Practice time management<a title=\"#8.-practice-time-management\" href=\"#8.-practice-time-management\"></a></h2>\n<p>Develop a sense of pacing during your interviews, allowing enough time for each stage of the problem-solving process. This may involve allocating time for understanding the problem, developing a plan, writing code, and testing your solution.</p>\n<h2 id=\"9.-communicate-effectively\">9. Communicate effectively<a title=\"#9.-communicate-effectively\" href=\"#9.-communicate-effectively\"></a></h2>\n<p>Throughout the interview, maintain open communication with the interviewer. Explain your thought process, discuss your plan, and ask for feedback. Effective communication not only demonstrates your problem-solving approach but also showcases your ability to collaborate and articulate your ideas.</p>\n<p>By optimizing your problem-solving approach and practicing these strategies, you’ll be better equipped to tackle a wide range of problems during Google software interviews and demonstrate your ability to develop efficient and effective solutions.</p>\n","date_formatted":{"ll":"Mar 26, 2023","L":"03/26/2023","MM-DD":"03-26"},"plink":"http://codesandtags.io/blog/2023/03/26/en/working-at-google-optimize-your-problem-solving/","type":"post","toc":[{"id":"1.-understand-the-problem","title":"1. Understand the problem","index":"1"},{"id":"2.-identify-patterns-and-techniques","title":"2. Identify patterns and techniques","index":"2"},{"id":"3.-develop-a-plan","title":"3. Develop a plan","index":"3"},{"id":"4.-choose-the-right-data-structures","title":"4. Choose the right data structures","index":"4"},{"id":"5.-write-clean-and-efficient-code","title":"5. Write clean and efficient code","index":"5"},{"id":"6.-test-and-debug-your-solution","title":"6. Test and debug your solution","index":"6"},{"id":"7.-optimize-and-iterate","title":"7. Optimize and iterate","index":"7"},{"id":"8.-practice-time-management","title":"8. Practice time management","index":"8"},{"id":"9.-communicate-effectively","title":"9. Communicate effectively","index":"9"}],"reading_time":"477 words in 3 min"},{"title":"Working at Google - Review the fundamentals (part 3)","date":"2023-03-25T15:28:14.000Z","excerpt":"Reviewing the fundamentals is crucial for preparing for Google software interviews, as they form the foundation of your problem-solving skills.","author":"codesandtags","thumbnail":"images/faang-google-thumbnail.jpg","_content":"\nReviewing the fundamentals is crucial for preparing for Google software interviews, as they form the foundation of your problem-solving skills. Here are the key areas you should focus on when reviewing computer science fundamentals:\n\n## Data structures:\n\nEnsure you have a solid understanding of basic data structures and their operations, including:\n\n- Arrays\n- Linked Lists (singly and doubly)\n- Stacks\n- Queues\n- Trees (binary, balanced, AVL, red-black)\n- Graphs (directed, undirected, adjacency matrix, adjacency list)\n- Heaps (min and max)\n- Hash Tables (hash functions, collision resolution techniques)\n\n## Algorithms:\n\nFamiliarize yourself with common algorithms, their use cases, and how to implement them:\n\n- Searching (linear, binary)\n- Sorting (bubble, insertion, selection, merge, quick, radix)\n- Recursion and backtracking (e.g., permutations, combinations, tree traversal)\n- Dynamic programming (e.g., memoization, top-down, bottom-up)\n- Graph traversal (depth-first search, breadth-first search, Dijkstra's, A\\*, Bellman-Ford)\n- Greedy algorithms (e.g., Kruskal's, Prim's, Huffman coding)\n\n## Complexity analysis:\n\nDevelop a strong understanding of time and space complexity, including:\n\n- Big-O, Big-Ω, and Big-Θ notation\n- How to analyze the time and space complexity of an algorithm\n- Understanding the complexity of common operations on various data structures\n- Identifying and optimizing bottlenecks in your code\n\n## Programming languages:\n\nBe proficient in at least one programming language, preferably one that is commonly used at Google, such as Python, Java, Typescript, or C++. You should be comfortable with the syntax, standard libraries, and language-specific data structures and algorithms.\n\n## Object-oriented programming (OOP):\n\nUnderstand OOP concepts, such as inheritance, polymorphism, encapsulation, and abstraction. Be able to design and implement classes, interfaces, and objects in your chosen programming language.\n\n## Operating systems and concurrency:\n\nFamiliarize yourself with basic operating system concepts, such as process management, memory management, file systems, and synchronization primitives (e.g., mutexes, semaphores, locks).\n\n## Networking:\n\nAcquire a basic understanding of networking concepts, such as the OSI model, TCP/IP, sockets, and common network protocols (HTTP, FTP, DNS, etc.).\n\n## Databases:\n\nLearn about relational databases (e.g., SQL, normalization, indexing) and NoSQL databases (e.g., key-value stores, document databases, column stores, graph databases).\nBy reviewing these fundamentals and practicing problems that involve their application, you'll be better equipped to tackle Google's software interview questions and demonstrate your problem-solving skills.\n\n## Timeline\n\n#### Week 1: Data Structures\n\nArrays\nLinked Lists\nStacks and Queues\nHash Tables\nTrees and Graphs\n\n#### Week 2: Algorithms\n\nSorting (Bubble, Selection, Insertion, Merge, Quick)\nSearching (Linear, Binary)\nRecursion\nDynamic Programming\nGreedy Algorithms\n\n#### Week 3: Operating Systems\n\nProcess Management\nMemory Management\nFile Systems\nScheduling Algorithms\n\n#### Week 4: Networking\n\nOSI Model\nTCP/IP Model\nRouting Protocols\nNetwork Security\n\n#### Week 5: Databases\n\nRelational Databases\nSQL\nNoSQL\nACID Properties\n\n#### Week 6: Object-Oriented Programming\n\nClasses and Objects\nInheritance\nPolymorphism\nEncapsulation\n\n#### Week 7: System Design\n\nDesign Patterns\nScalability\nPerformance Optimization\nMicroservices Architecture\n\n#### Week 8: Review and Practice\n\nRevisit difficult topics\nSolve coding problems related to the studied concepts\nMock interviews focusing on the fundamentals\n\n![space](images/working-at-google-review-the-fundamentals-hero.jpg)\n","source":"_posts/en/working-at-google-review-the-fundamentals.md","raw":"---\ntitle: Working at Google - Review the fundamentals (part 3)\ndate: 2023-03-25 11:28:14\ntags: [google, software, interview]\nexcerpt: Reviewing the fundamentals is crucial for preparing for Google software interviews, as they form the foundation of your problem-solving skills.\nauthor: codesandtags\ncategory: FAANG\nthumbnail: images/faang-google-thumbnail.jpg\n---\n\nReviewing the fundamentals is crucial for preparing for Google software interviews, as they form the foundation of your problem-solving skills. Here are the key areas you should focus on when reviewing computer science fundamentals:\n\n## Data structures:\n\nEnsure you have a solid understanding of basic data structures and their operations, including:\n\n- Arrays\n- Linked Lists (singly and doubly)\n- Stacks\n- Queues\n- Trees (binary, balanced, AVL, red-black)\n- Graphs (directed, undirected, adjacency matrix, adjacency list)\n- Heaps (min and max)\n- Hash Tables (hash functions, collision resolution techniques)\n\n## Algorithms:\n\nFamiliarize yourself with common algorithms, their use cases, and how to implement them:\n\n- Searching (linear, binary)\n- Sorting (bubble, insertion, selection, merge, quick, radix)\n- Recursion and backtracking (e.g., permutations, combinations, tree traversal)\n- Dynamic programming (e.g., memoization, top-down, bottom-up)\n- Graph traversal (depth-first search, breadth-first search, Dijkstra's, A\\*, Bellman-Ford)\n- Greedy algorithms (e.g., Kruskal's, Prim's, Huffman coding)\n\n## Complexity analysis:\n\nDevelop a strong understanding of time and space complexity, including:\n\n- Big-O, Big-Ω, and Big-Θ notation\n- How to analyze the time and space complexity of an algorithm\n- Understanding the complexity of common operations on various data structures\n- Identifying and optimizing bottlenecks in your code\n\n## Programming languages:\n\nBe proficient in at least one programming language, preferably one that is commonly used at Google, such as Python, Java, Typescript, or C++. You should be comfortable with the syntax, standard libraries, and language-specific data structures and algorithms.\n\n## Object-oriented programming (OOP):\n\nUnderstand OOP concepts, such as inheritance, polymorphism, encapsulation, and abstraction. Be able to design and implement classes, interfaces, and objects in your chosen programming language.\n\n## Operating systems and concurrency:\n\nFamiliarize yourself with basic operating system concepts, such as process management, memory management, file systems, and synchronization primitives (e.g., mutexes, semaphores, locks).\n\n## Networking:\n\nAcquire a basic understanding of networking concepts, such as the OSI model, TCP/IP, sockets, and common network protocols (HTTP, FTP, DNS, etc.).\n\n## Databases:\n\nLearn about relational databases (e.g., SQL, normalization, indexing) and NoSQL databases (e.g., key-value stores, document databases, column stores, graph databases).\nBy reviewing these fundamentals and practicing problems that involve their application, you'll be better equipped to tackle Google's software interview questions and demonstrate your problem-solving skills.\n\n## Timeline\n\n#### Week 1: Data Structures\n\nArrays\nLinked Lists\nStacks and Queues\nHash Tables\nTrees and Graphs\n\n#### Week 2: Algorithms\n\nSorting (Bubble, Selection, Insertion, Merge, Quick)\nSearching (Linear, Binary)\nRecursion\nDynamic Programming\nGreedy Algorithms\n\n#### Week 3: Operating Systems\n\nProcess Management\nMemory Management\nFile Systems\nScheduling Algorithms\n\n#### Week 4: Networking\n\nOSI Model\nTCP/IP Model\nRouting Protocols\nNetwork Security\n\n#### Week 5: Databases\n\nRelational Databases\nSQL\nNoSQL\nACID Properties\n\n#### Week 6: Object-Oriented Programming\n\nClasses and Objects\nInheritance\nPolymorphism\nEncapsulation\n\n#### Week 7: System Design\n\nDesign Patterns\nScalability\nPerformance Optimization\nMicroservices Architecture\n\n#### Week 8: Review and Practice\n\nRevisit difficult topics\nSolve coding problems related to the studied concepts\nMock interviews focusing on the fundamentals\n\n![space](images/working-at-google-review-the-fundamentals-hero.jpg)\n","slug":"en/working-at-google-review-the-fundamentals","published":1,"updated":"2023-07-17T22:47:10.537Z","comments":1,"layout":"post","photos":[],"link":"2023/03/25/en/working-at-google-review-the-fundamentals","_id":"clk8zxu0r000c50t23yrafs1z","content":"<p>Reviewing the fundamentals is crucial for preparing for Google software interviews, as they form the foundation of your problem-solving skills. Here are the key areas you should focus on when reviewing computer science fundamentals:</p>\n<h2 id=\"data-structures:\">Data structures:<a title=\"#data-structures:\" href=\"#data-structures:\"></a></h2>\n<p>Ensure you have a solid understanding of basic data structures and their operations, including:</p>\n<ul>\n<li>Arrays</li>\n<li>Linked Lists (singly and doubly)</li>\n<li>Stacks</li>\n<li>Queues</li>\n<li>Trees (binary, balanced, AVL, red-black)</li>\n<li>Graphs (directed, undirected, adjacency matrix, adjacency list)</li>\n<li>Heaps (min and max)</li>\n<li>Hash Tables (hash functions, collision resolution techniques)</li>\n</ul>\n<h2 id=\"algorithms:\">Algorithms:<a title=\"#algorithms:\" href=\"#algorithms:\"></a></h2>\n<p>Familiarize yourself with common algorithms, their use cases, and how to implement them:</p>\n<ul>\n<li>Searching (linear, binary)</li>\n<li>Sorting (bubble, insertion, selection, merge, quick, radix)</li>\n<li>Recursion and backtracking (e.g., permutations, combinations, tree traversal)</li>\n<li>Dynamic programming (e.g., memoization, top-down, bottom-up)</li>\n<li>Graph traversal (depth-first search, breadth-first search, Dijkstra’s, A*, Bellman-Ford)</li>\n<li>Greedy algorithms (e.g., Kruskal’s, Prim’s, Huffman coding)</li>\n</ul>\n<h2 id=\"complexity-analysis:\">Complexity analysis:<a title=\"#complexity-analysis:\" href=\"#complexity-analysis:\"></a></h2>\n<p>Develop a strong understanding of time and space complexity, including:</p>\n<ul>\n<li>Big-O, Big-Ω, and Big-Θ notation</li>\n<li>How to analyze the time and space complexity of an algorithm</li>\n<li>Understanding the complexity of common operations on various data structures</li>\n<li>Identifying and optimizing bottlenecks in your code</li>\n</ul>\n<h2 id=\"programming-languages:\">Programming languages:<a title=\"#programming-languages:\" href=\"#programming-languages:\"></a></h2>\n<p>Be proficient in at least one programming language, preferably one that is commonly used at Google, such as Python, Java, Typescript, or C++. You should be comfortable with the syntax, standard libraries, and language-specific data structures and algorithms.</p>\n<h2 id=\"object-oriented-programming-(oop):\">Object-oriented programming (OOP):<a title=\"#object-oriented-programming-(oop):\" href=\"#object-oriented-programming-(oop):\"></a></h2>\n<p>Understand OOP concepts, such as inheritance, polymorphism, encapsulation, and abstraction. Be able to design and implement classes, interfaces, and objects in your chosen programming language.</p>\n<h2 id=\"operating-systems-and-concurrency:\">Operating systems and concurrency:<a title=\"#operating-systems-and-concurrency:\" href=\"#operating-systems-and-concurrency:\"></a></h2>\n<p>Familiarize yourself with basic operating system concepts, such as process management, memory management, file systems, and synchronization primitives (e.g., mutexes, semaphores, locks).</p>\n<h2 id=\"networking:\">Networking:<a title=\"#networking:\" href=\"#networking:\"></a></h2>\n<p>Acquire a basic understanding of networking concepts, such as the OSI model, TCP/IP, sockets, and common network protocols (HTTP, FTP, DNS, etc.).</p>\n<h2 id=\"databases:\">Databases:<a title=\"#databases:\" href=\"#databases:\"></a></h2>\n<p>Learn about relational databases (e.g., SQL, normalization, indexing) and NoSQL databases (e.g., key-value stores, document databases, column stores, graph databases).<br>\nBy reviewing these fundamentals and practicing problems that involve their application, you’ll be better equipped to tackle Google’s software interview questions and demonstrate your problem-solving skills.</p>\n<h2 id=\"timeline\">Timeline<a title=\"#timeline\" href=\"#timeline\"></a></h2>\n<h4 id=\"week-1:-data-structures\">Week 1: Data Structures<a title=\"#week-1:-data-structures\" href=\"#week-1:-data-structures\"></a></h4>\n<p>Arrays<br>\nLinked Lists<br>\nStacks and Queues<br>\nHash Tables<br>\nTrees and Graphs</p>\n<h4 id=\"week-2:-algorithms\">Week 2: Algorithms<a title=\"#week-2:-algorithms\" href=\"#week-2:-algorithms\"></a></h4>\n<p>Sorting (Bubble, Selection, Insertion, Merge, Quick)<br>\nSearching (Linear, Binary)<br>\nRecursion<br>\nDynamic Programming<br>\nGreedy Algorithms</p>\n<h4 id=\"week-3:-operating-systems\">Week 3: Operating Systems<a title=\"#week-3:-operating-systems\" href=\"#week-3:-operating-systems\"></a></h4>\n<p>Process Management<br>\nMemory Management<br>\nFile Systems<br>\nScheduling Algorithms</p>\n<h4 id=\"week-4:-networking\">Week 4: Networking<a title=\"#week-4:-networking\" href=\"#week-4:-networking\"></a></h4>\n<p>OSI Model<br>\nTCP/IP Model<br>\nRouting Protocols<br>\nNetwork Security</p>\n<h4 id=\"week-5:-databases\">Week 5: Databases<a title=\"#week-5:-databases\" href=\"#week-5:-databases\"></a></h4>\n<p>Relational Databases<br>\nSQL<br>\nNoSQL<br>\nACID Properties</p>\n<h4 id=\"week-6:-object-oriented-programming\">Week 6: Object-Oriented Programming<a title=\"#week-6:-object-oriented-programming\" href=\"#week-6:-object-oriented-programming\"></a></h4>\n<p>Classes and Objects<br>\nInheritance<br>\nPolymorphism<br>\nEncapsulation</p>\n<h4 id=\"week-7:-system-design\">Week 7: System Design<a title=\"#week-7:-system-design\" href=\"#week-7:-system-design\"></a></h4>\n<p>Design Patterns<br>\nScalability<br>\nPerformance Optimization<br>\nMicroservices Architecture</p>\n<h4 id=\"week-8:-review-and-practice\">Week 8: Review and Practice<a title=\"#week-8:-review-and-practice\" href=\"#week-8:-review-and-practice\"></a></h4>\n<p>Revisit difficult topics<br>\nSolve coding problems related to the studied concepts<br>\nMock interviews focusing on the fundamentals</p>\n<p><img src=\"images/working-at-google-review-the-fundamentals-hero.jpg\" alt=\"space\" loading=\"lazy\" class=\"φbp\"></p>\n","site":{"data":{}},"more":"<p>Reviewing the fundamentals is crucial for preparing for Google software interviews, as they form the foundation of your problem-solving skills. Here are the key areas you should focus on when reviewing computer science fundamentals:</p>\n<h2 id=\"data-structures:\">Data structures:<a title=\"#data-structures:\" href=\"#data-structures:\"></a></h2>\n<p>Ensure you have a solid understanding of basic data structures and their operations, including:</p>\n<ul>\n<li>Arrays</li>\n<li>Linked Lists (singly and doubly)</li>\n<li>Stacks</li>\n<li>Queues</li>\n<li>Trees (binary, balanced, AVL, red-black)</li>\n<li>Graphs (directed, undirected, adjacency matrix, adjacency list)</li>\n<li>Heaps (min and max)</li>\n<li>Hash Tables (hash functions, collision resolution techniques)</li>\n</ul>\n<h2 id=\"algorithms:\">Algorithms:<a title=\"#algorithms:\" href=\"#algorithms:\"></a></h2>\n<p>Familiarize yourself with common algorithms, their use cases, and how to implement them:</p>\n<ul>\n<li>Searching (linear, binary)</li>\n<li>Sorting (bubble, insertion, selection, merge, quick, radix)</li>\n<li>Recursion and backtracking (e.g., permutations, combinations, tree traversal)</li>\n<li>Dynamic programming (e.g., memoization, top-down, bottom-up)</li>\n<li>Graph traversal (depth-first search, breadth-first search, Dijkstra’s, A*, Bellman-Ford)</li>\n<li>Greedy algorithms (e.g., Kruskal’s, Prim’s, Huffman coding)</li>\n</ul>\n<h2 id=\"complexity-analysis:\">Complexity analysis:<a title=\"#complexity-analysis:\" href=\"#complexity-analysis:\"></a></h2>\n<p>Develop a strong understanding of time and space complexity, including:</p>\n<ul>\n<li>Big-O, Big-Ω, and Big-Θ notation</li>\n<li>How to analyze the time and space complexity of an algorithm</li>\n<li>Understanding the complexity of common operations on various data structures</li>\n<li>Identifying and optimizing bottlenecks in your code</li>\n</ul>\n<h2 id=\"programming-languages:\">Programming languages:<a title=\"#programming-languages:\" href=\"#programming-languages:\"></a></h2>\n<p>Be proficient in at least one programming language, preferably one that is commonly used at Google, such as Python, Java, Typescript, or C++. You should be comfortable with the syntax, standard libraries, and language-specific data structures and algorithms.</p>\n<h2 id=\"object-oriented-programming-(oop):\">Object-oriented programming (OOP):<a title=\"#object-oriented-programming-(oop):\" href=\"#object-oriented-programming-(oop):\"></a></h2>\n<p>Understand OOP concepts, such as inheritance, polymorphism, encapsulation, and abstraction. Be able to design and implement classes, interfaces, and objects in your chosen programming language.</p>\n<h2 id=\"operating-systems-and-concurrency:\">Operating systems and concurrency:<a title=\"#operating-systems-and-concurrency:\" href=\"#operating-systems-and-concurrency:\"></a></h2>\n<p>Familiarize yourself with basic operating system concepts, such as process management, memory management, file systems, and synchronization primitives (e.g., mutexes, semaphores, locks).</p>\n<h2 id=\"networking:\">Networking:<a title=\"#networking:\" href=\"#networking:\"></a></h2>\n<p>Acquire a basic understanding of networking concepts, such as the OSI model, TCP/IP, sockets, and common network protocols (HTTP, FTP, DNS, etc.).</p>\n<h2 id=\"databases:\">Databases:<a title=\"#databases:\" href=\"#databases:\"></a></h2>\n<p>Learn about relational databases (e.g., SQL, normalization, indexing) and NoSQL databases (e.g., key-value stores, document databases, column stores, graph databases).<br>\nBy reviewing these fundamentals and practicing problems that involve their application, you’ll be better equipped to tackle Google’s software interview questions and demonstrate your problem-solving skills.</p>\n<h2 id=\"timeline\">Timeline<a title=\"#timeline\" href=\"#timeline\"></a></h2>\n<h4 id=\"week-1:-data-structures\">Week 1: Data Structures<a title=\"#week-1:-data-structures\" href=\"#week-1:-data-structures\"></a></h4>\n<p>Arrays<br>\nLinked Lists<br>\nStacks and Queues<br>\nHash Tables<br>\nTrees and Graphs</p>\n<h4 id=\"week-2:-algorithms\">Week 2: Algorithms<a title=\"#week-2:-algorithms\" href=\"#week-2:-algorithms\"></a></h4>\n<p>Sorting (Bubble, Selection, Insertion, Merge, Quick)<br>\nSearching (Linear, Binary)<br>\nRecursion<br>\nDynamic Programming<br>\nGreedy Algorithms</p>\n<h4 id=\"week-3:-operating-systems\">Week 3: Operating Systems<a title=\"#week-3:-operating-systems\" href=\"#week-3:-operating-systems\"></a></h4>\n<p>Process Management<br>\nMemory Management<br>\nFile Systems<br>\nScheduling Algorithms</p>\n<h4 id=\"week-4:-networking\">Week 4: Networking<a title=\"#week-4:-networking\" href=\"#week-4:-networking\"></a></h4>\n<p>OSI Model<br>\nTCP/IP Model<br>\nRouting Protocols<br>\nNetwork Security</p>\n<h4 id=\"week-5:-databases\">Week 5: Databases<a title=\"#week-5:-databases\" href=\"#week-5:-databases\"></a></h4>\n<p>Relational Databases<br>\nSQL<br>\nNoSQL<br>\nACID Properties</p>\n<h4 id=\"week-6:-object-oriented-programming\">Week 6: Object-Oriented Programming<a title=\"#week-6:-object-oriented-programming\" href=\"#week-6:-object-oriented-programming\"></a></h4>\n<p>Classes and Objects<br>\nInheritance<br>\nPolymorphism<br>\nEncapsulation</p>\n<h4 id=\"week-7:-system-design\">Week 7: System Design<a title=\"#week-7:-system-design\" href=\"#week-7:-system-design\"></a></h4>\n<p>Design Patterns<br>\nScalability<br>\nPerformance Optimization<br>\nMicroservices Architecture</p>\n<h4 id=\"week-8:-review-and-practice\">Week 8: Review and Practice<a title=\"#week-8:-review-and-practice\" href=\"#week-8:-review-and-practice\"></a></h4>\n<p>Revisit difficult topics<br>\nSolve coding problems related to the studied concepts<br>\nMock interviews focusing on the fundamentals</p>\n<p><img src=\"images/working-at-google-review-the-fundamentals-hero.jpg\" alt=\"space\" loading=\"lazy\" class=\"φbp\"></p>\n","date_formatted":{"ll":"Mar 25, 2023","L":"03/25/2023","MM-DD":"03-25"},"plink":"http://codesandtags.io/blog/2023/03/25/en/working-at-google-review-the-fundamentals/","type":"post","toc":[{"id":"data-structures:","title":"Data structures:","index":"1"},{"id":"algorithms:","title":"Algorithms:","index":"2"},{"id":"complexity-analysis:","title":"Complexity analysis:","index":"3"},{"id":"programming-languages:","title":"Programming languages:","index":"4"},{"id":"object-oriented-programming-(oop):","title":"Object-oriented programming (OOP):","index":"5"},{"id":"operating-systems-and-concurrency:","title":"Operating systems and concurrency:","index":"6"},{"id":"networking:","title":"Networking:","index":"7"},{"id":"databases:","title":"Databases:","index":"8"},{"id":"timeline","title":"Timeline","index":"9"}],"reading_time":"490 words in 3 min"},{"title":"Working at Google - preparation plan (part 1)","date":"2023-03-25T04:22:35.000Z","excerpt":"Working at Google could be one of the most exciting things in life for Software Engineers, here I have a detailed plan splitted in several articles.","author":"codesandtags","thumbnail":"images/faang-google-thumbnail.jpg","_content":"\nWorking at Google could be one of the most exciting things in life for Software Engineers, here I have a detailed plan splitted in several articles.\n\n## Understand the interview process:\n\nGoogle's software interview process typically\nconsists of multiple stages, such as an initial phone screen, technical interviews, and a final on-site interview. Familiarize yourself with the expectations at each stage.\n\n## Review the fundamentals:\n\nThoroughly review computer science fundamentals, including data structures (arrays, lists, stacks, queues, trees, graphs, hash tables), algorithms (searching, sorting, recursion, dynamic programming, graph traversal), and complexity analysis (Big-O notation).\n\n## Study Google-specific topics:\n\nGoogle often places a high emphasis on topics like distributed systems, large-scale system design, and machine learning. Be prepared to discuss these topics at a high level and understand key concepts.\n\n## LeetCode and other online resources:\n\nPractice coding problems on platforms like LeetCode, HackerRank, or CodeSignal. Focus on problems related to Google's interview topics, and try to solve problems of varying difficulty levels (easy, medium, and hard).\n\n## Optimize your problem-solving approach:\n\nImprove your problem-solving skills by following a structured approach:\na. Understand the problem and ask clarifying questions.\nb. Come up with test cases and edge cases.\nc. Design an initial solution, discussing trade-offs and optimizations.\nd. Write clean, efficient code while explaining your thought process.\ne. Test your code with the provided test cases and edge cases.\nf. Analyze the time and space complexity of your solution.\n\n## Practice behavioral questions:\n\nPrepare for behavioral questions related to teamwork, conflict resolution, problem-solving, and communication skills. Use the STAR (Situation, Task, Action, Result) technique to structure your answers.\n\n## Mock interviews:\n\nParticipate in mock interviews with friends, peers, or online platforms like Pramp or Interviewing.io. This will help you get comfortable with the interview format, time constraints, and pressure.\n\n## Optimize your resume:\n\nTailor your resume to highlight relevant skills and experiences, focusing on software development accomplishments, programming languages, and any Google-specific knowledge.\n\n## Network and referrals:\n\nConnect with current or former Google employees to learn more about the interview process, gain insights, and possibly obtain a referral, which can help get your foot in the door.\n\n## Stay up-to-date with the tech industry:\n\nKeep up with the latest trends in software development, programming languages, and frameworks, as Google is known for its innovative and cutting-edge approach.\n\n## Stay persistent and learn from your experiences:\n\nThe Google interview process can be challenging, and not everyone passes on their first attempt. Learn from your experiences, iterate on your approach, and keep working towards your goal.\n\nBy following this strategy, you can improve your chances of passing Google's software interviews and potentially land a position at the company.\n\n![space](images/working-at-google-preparation-plan-hero.jpg)\n","source":"_posts/en/working-at-google-preparation-plan.md","raw":"---\ntitle: Working at Google - preparation plan (part 1)\ndate: 2023-03-25 00:22:35\ntags: [google, software, interview]\nexcerpt: Working at Google could be one of the most exciting things in life for Software Engineers, here I have a detailed plan splitted in several articles.\nauthor: codesandtags\ncategory: FAANG\nthumbnail: images/faang-google-thumbnail.jpg\n---\n\nWorking at Google could be one of the most exciting things in life for Software Engineers, here I have a detailed plan splitted in several articles.\n\n## Understand the interview process:\n\nGoogle's software interview process typically\nconsists of multiple stages, such as an initial phone screen, technical interviews, and a final on-site interview. Familiarize yourself with the expectations at each stage.\n\n## Review the fundamentals:\n\nThoroughly review computer science fundamentals, including data structures (arrays, lists, stacks, queues, trees, graphs, hash tables), algorithms (searching, sorting, recursion, dynamic programming, graph traversal), and complexity analysis (Big-O notation).\n\n## Study Google-specific topics:\n\nGoogle often places a high emphasis on topics like distributed systems, large-scale system design, and machine learning. Be prepared to discuss these topics at a high level and understand key concepts.\n\n## LeetCode and other online resources:\n\nPractice coding problems on platforms like LeetCode, HackerRank, or CodeSignal. Focus on problems related to Google's interview topics, and try to solve problems of varying difficulty levels (easy, medium, and hard).\n\n## Optimize your problem-solving approach:\n\nImprove your problem-solving skills by following a structured approach:\na. Understand the problem and ask clarifying questions.\nb. Come up with test cases and edge cases.\nc. Design an initial solution, discussing trade-offs and optimizations.\nd. Write clean, efficient code while explaining your thought process.\ne. Test your code with the provided test cases and edge cases.\nf. Analyze the time and space complexity of your solution.\n\n## Practice behavioral questions:\n\nPrepare for behavioral questions related to teamwork, conflict resolution, problem-solving, and communication skills. Use the STAR (Situation, Task, Action, Result) technique to structure your answers.\n\n## Mock interviews:\n\nParticipate in mock interviews with friends, peers, or online platforms like Pramp or Interviewing.io. This will help you get comfortable with the interview format, time constraints, and pressure.\n\n## Optimize your resume:\n\nTailor your resume to highlight relevant skills and experiences, focusing on software development accomplishments, programming languages, and any Google-specific knowledge.\n\n## Network and referrals:\n\nConnect with current or former Google employees to learn more about the interview process, gain insights, and possibly obtain a referral, which can help get your foot in the door.\n\n## Stay up-to-date with the tech industry:\n\nKeep up with the latest trends in software development, programming languages, and frameworks, as Google is known for its innovative and cutting-edge approach.\n\n## Stay persistent and learn from your experiences:\n\nThe Google interview process can be challenging, and not everyone passes on their first attempt. Learn from your experiences, iterate on your approach, and keep working towards your goal.\n\nBy following this strategy, you can improve your chances of passing Google's software interviews and potentially land a position at the company.\n\n![space](images/working-at-google-preparation-plan-hero.jpg)\n","slug":"en/working-at-google-preparation-plan","published":1,"updated":"2023-07-17T22:47:10.537Z","comments":1,"layout":"post","photos":[],"link":"2023/03/25/en/working-at-google-preparation-plan","_id":"clk8zxu11001c50t26zpb1nto","content":"<p>Working at Google could be one of the most exciting things in life for Software Engineers, here I have a detailed plan splitted in several articles.</p>\n<h2 id=\"understand-the-interview-process:\">Understand the interview process:<a title=\"#understand-the-interview-process:\" href=\"#understand-the-interview-process:\"></a></h2>\n<p>Google’s software interview process typically<br>\nconsists of multiple stages, such as an initial phone screen, technical interviews, and a final on-site interview. Familiarize yourself with the expectations at each stage.</p>\n<h2 id=\"review-the-fundamentals:\">Review the fundamentals:<a title=\"#review-the-fundamentals:\" href=\"#review-the-fundamentals:\"></a></h2>\n<p>Thoroughly review computer science fundamentals, including data structures (arrays, lists, stacks, queues, trees, graphs, hash tables), algorithms (searching, sorting, recursion, dynamic programming, graph traversal), and complexity analysis (Big-O notation).</p>\n<h2 id=\"study-google-specific-topics:\">Study Google-specific topics:<a title=\"#study-google-specific-topics:\" href=\"#study-google-specific-topics:\"></a></h2>\n<p>Google often places a high emphasis on topics like distributed systems, large-scale system design, and machine learning. Be prepared to discuss these topics at a high level and understand key concepts.</p>\n<h2 id=\"leetcode-and-other-online-resources:\">LeetCode and other online resources:<a title=\"#leetcode-and-other-online-resources:\" href=\"#leetcode-and-other-online-resources:\"></a></h2>\n<p>Practice coding problems on platforms like LeetCode, HackerRank, or CodeSignal. Focus on problems related to Google’s interview topics, and try to solve problems of varying difficulty levels (easy, medium, and hard).</p>\n<h2 id=\"optimize-your-problem-solving-approach:\">Optimize your problem-solving approach:<a title=\"#optimize-your-problem-solving-approach:\" href=\"#optimize-your-problem-solving-approach:\"></a></h2>\n<p>Improve your problem-solving skills by following a structured approach:<br>\na. Understand the problem and ask clarifying questions.<br>\nb. Come up with test cases and edge cases.<br>\nc. Design an initial solution, discussing trade-offs and optimizations.<br>\nd. Write clean, efficient code while explaining your thought process.<br>\ne. Test your code with the provided test cases and edge cases.<br>\nf. Analyze the time and space complexity of your solution.</p>\n<h2 id=\"practice-behavioral-questions:\">Practice behavioral questions:<a title=\"#practice-behavioral-questions:\" href=\"#practice-behavioral-questions:\"></a></h2>\n<p>Prepare for behavioral questions related to teamwork, conflict resolution, problem-solving, and communication skills. Use the STAR (Situation, Task, Action, Result) technique to structure your answers.</p>\n<h2 id=\"mock-interviews:\">Mock interviews:<a title=\"#mock-interviews:\" href=\"#mock-interviews:\"></a></h2>\n<p>Participate in mock interviews with friends, peers, or online platforms like Pramp or <a href=\"http://Interviewing.io\">Interviewing.io</a>. This will help you get comfortable with the interview format, time constraints, and pressure.</p>\n<h2 id=\"optimize-your-resume:\">Optimize your resume:<a title=\"#optimize-your-resume:\" href=\"#optimize-your-resume:\"></a></h2>\n<p>Tailor your resume to highlight relevant skills and experiences, focusing on software development accomplishments, programming languages, and any Google-specific knowledge.</p>\n<h2 id=\"network-and-referrals:\">Network and referrals:<a title=\"#network-and-referrals:\" href=\"#network-and-referrals:\"></a></h2>\n<p>Connect with current or former Google employees to learn more about the interview process, gain insights, and possibly obtain a referral, which can help get your foot in the door.</p>\n<h2 id=\"stay-up-to-date-with-the-tech-industry:\">Stay up-to-date with the tech industry:<a title=\"#stay-up-to-date-with-the-tech-industry:\" href=\"#stay-up-to-date-with-the-tech-industry:\"></a></h2>\n<p>Keep up with the latest trends in software development, programming languages, and frameworks, as Google is known for its innovative and cutting-edge approach.</p>\n<h2 id=\"stay-persistent-and-learn-from-your-experiences:\">Stay persistent and learn from your experiences:<a title=\"#stay-persistent-and-learn-from-your-experiences:\" href=\"#stay-persistent-and-learn-from-your-experiences:\"></a></h2>\n<p>The Google interview process can be challenging, and not everyone passes on their first attempt. Learn from your experiences, iterate on your approach, and keep working towards your goal.</p>\n<p>By following this strategy, you can improve your chances of passing Google’s software interviews and potentially land a position at the company.</p>\n<p><img src=\"images/working-at-google-preparation-plan-hero.jpg\" alt=\"space\" loading=\"lazy\" class=\"φbp\"></p>\n","site":{"data":{}},"more":"<p>Working at Google could be one of the most exciting things in life for Software Engineers, here I have a detailed plan splitted in several articles.</p>\n<h2 id=\"understand-the-interview-process:\">Understand the interview process:<a title=\"#understand-the-interview-process:\" href=\"#understand-the-interview-process:\"></a></h2>\n<p>Google’s software interview process typically<br>\nconsists of multiple stages, such as an initial phone screen, technical interviews, and a final on-site interview. Familiarize yourself with the expectations at each stage.</p>\n<h2 id=\"review-the-fundamentals:\">Review the fundamentals:<a title=\"#review-the-fundamentals:\" href=\"#review-the-fundamentals:\"></a></h2>\n<p>Thoroughly review computer science fundamentals, including data structures (arrays, lists, stacks, queues, trees, graphs, hash tables), algorithms (searching, sorting, recursion, dynamic programming, graph traversal), and complexity analysis (Big-O notation).</p>\n<h2 id=\"study-google-specific-topics:\">Study Google-specific topics:<a title=\"#study-google-specific-topics:\" href=\"#study-google-specific-topics:\"></a></h2>\n<p>Google often places a high emphasis on topics like distributed systems, large-scale system design, and machine learning. Be prepared to discuss these topics at a high level and understand key concepts.</p>\n<h2 id=\"leetcode-and-other-online-resources:\">LeetCode and other online resources:<a title=\"#leetcode-and-other-online-resources:\" href=\"#leetcode-and-other-online-resources:\"></a></h2>\n<p>Practice coding problems on platforms like LeetCode, HackerRank, or CodeSignal. Focus on problems related to Google’s interview topics, and try to solve problems of varying difficulty levels (easy, medium, and hard).</p>\n<h2 id=\"optimize-your-problem-solving-approach:\">Optimize your problem-solving approach:<a title=\"#optimize-your-problem-solving-approach:\" href=\"#optimize-your-problem-solving-approach:\"></a></h2>\n<p>Improve your problem-solving skills by following a structured approach:<br>\na. Understand the problem and ask clarifying questions.<br>\nb. Come up with test cases and edge cases.<br>\nc. Design an initial solution, discussing trade-offs and optimizations.<br>\nd. Write clean, efficient code while explaining your thought process.<br>\ne. Test your code with the provided test cases and edge cases.<br>\nf. Analyze the time and space complexity of your solution.</p>\n<h2 id=\"practice-behavioral-questions:\">Practice behavioral questions:<a title=\"#practice-behavioral-questions:\" href=\"#practice-behavioral-questions:\"></a></h2>\n<p>Prepare for behavioral questions related to teamwork, conflict resolution, problem-solving, and communication skills. Use the STAR (Situation, Task, Action, Result) technique to structure your answers.</p>\n<h2 id=\"mock-interviews:\">Mock interviews:<a title=\"#mock-interviews:\" href=\"#mock-interviews:\"></a></h2>\n<p>Participate in mock interviews with friends, peers, or online platforms like Pramp or <a href=\"http://Interviewing.io\">Interviewing.io</a>. This will help you get comfortable with the interview format, time constraints, and pressure.</p>\n<h2 id=\"optimize-your-resume:\">Optimize your resume:<a title=\"#optimize-your-resume:\" href=\"#optimize-your-resume:\"></a></h2>\n<p>Tailor your resume to highlight relevant skills and experiences, focusing on software development accomplishments, programming languages, and any Google-specific knowledge.</p>\n<h2 id=\"network-and-referrals:\">Network and referrals:<a title=\"#network-and-referrals:\" href=\"#network-and-referrals:\"></a></h2>\n<p>Connect with current or former Google employees to learn more about the interview process, gain insights, and possibly obtain a referral, which can help get your foot in the door.</p>\n<h2 id=\"stay-up-to-date-with-the-tech-industry:\">Stay up-to-date with the tech industry:<a title=\"#stay-up-to-date-with-the-tech-industry:\" href=\"#stay-up-to-date-with-the-tech-industry:\"></a></h2>\n<p>Keep up with the latest trends in software development, programming languages, and frameworks, as Google is known for its innovative and cutting-edge approach.</p>\n<h2 id=\"stay-persistent-and-learn-from-your-experiences:\">Stay persistent and learn from your experiences:<a title=\"#stay-persistent-and-learn-from-your-experiences:\" href=\"#stay-persistent-and-learn-from-your-experiences:\"></a></h2>\n<p>The Google interview process can be challenging, and not everyone passes on their first attempt. Learn from your experiences, iterate on your approach, and keep working towards your goal.</p>\n<p>By following this strategy, you can improve your chances of passing Google’s software interviews and potentially land a position at the company.</p>\n<p><img src=\"images/working-at-google-preparation-plan-hero.jpg\" alt=\"space\" loading=\"lazy\" class=\"φbp\"></p>\n","date_formatted":{"ll":"Mar 25, 2023","L":"03/25/2023","MM-DD":"03-25"},"plink":"http://codesandtags.io/blog/2023/03/25/en/working-at-google-preparation-plan/","type":"post","toc":[{"id":"understand-the-interview-process:","title":"Understand the interview process:","index":"1"},{"id":"review-the-fundamentals:","title":"Review the fundamentals:","index":"2"},{"id":"study-google-specific-topics:","title":"Study Google-specific topics:","index":"3"},{"id":"leetcode-and-other-online-resources:","title":"LeetCode and other online resources:","index":"4"},{"id":"optimize-your-problem-solving-approach:","title":"Optimize your problem-solving approach:","index":"5"},{"id":"practice-behavioral-questions:","title":"Practice behavioral questions:","index":"6"},{"id":"mock-interviews:","title":"Mock interviews:","index":"7"},{"id":"optimize-your-resume:","title":"Optimize your resume:","index":"8"},{"id":"network-and-referrals:","title":"Network and referrals:","index":"9"},{"id":"stay-up-to-date-with-the-tech-industry:","title":"Stay up-to-date with the tech industry:","index":"10"},{"id":"stay-persistent-and-learn-from-your-experiences:","title":"Stay persistent and learn from your experiences:","index":"11"}],"reading_time":"459 words in 3 min"},{"title":"Working at Google - Study Google-Specific topics (part 4)","date":"2023-03-25T15:35:14.000Z","excerpt":"Reviewing the fundamentals is crucial for preparing for Google software interviews, as they form the foundation of your problem-solving skills.","author":"codesandtags","thumbnail":"images/faang-google-thumbnail.jpg","_content":"\nGoogle is known for its focus on large-scale systems, cutting-edge technologies, and innovative solutions. To prepare for Google software interviews, it's essential to study topics that are particularly relevant to the company. Here are some Google-specific topics you should familiarize yourself with:\n\n## Distributed systems:\n\nUnderstand the fundamental concepts and challenges associated with designing and implementing distributed systems, including:\n\n- Consistency models (e.g., eventual, strong, linearizability, sequential)\n- CAP theorem (Consistency, Availability, and Partition Tolerance)\n- Fault tolerance and replication (e.g., quorum, active/passive, active/active)\n- Scalability (e.g., horizontal, vertical, load balancing, sharding)\n- Data partitioning and sharding strategies\n- Messaging and communication patterns (e.g., publish-subscribe, message queues)\n- Consensus algorithms (e.g., Paxos, Raft)\n\n## Large-scale system design:\n\nDevelop the ability to design scalable and robust systems that can handle massive amounts of data and high levels of traffic. Key aspects to consider include:\n\n- Availability and reliability\n- Latency and performance optimization\n- Caching strategies (e.g., content delivery networks, cache eviction policies)\n- Data storage and retrieval (e.g., distributed databases, key-value stores)\n- Microservices architecture and API design\n- Monitoring, logging, and alerting\n\n## Google's infrastructure and technologies:\n\nFamiliarize yourself with Google's infrastructure and some of the technologies the company has developed, such as:\n\n- Bigtable (a distributed storage system for structured data)\n- Spanner (a globally-distributed, strongly consistent database)\n- MapReduce (a programming model for processing large datasets)\n- TensorFlow (an open-source machine learning framework)\n- Kubernetes (an open-source container orchestration system)\n- gRPC (a high-performance, open-source RPC framework)\n\n## Machine learning:\n\nGoogle is a leader in machine learning and artificial intelligence. While you may not be required to have in-depth knowledge unless you're applying for a specific machine learning role, it's helpful to understand basic concepts, such as:\n\n- Supervised, unsupervised, and reinforcement learning\n- Common algorithms (e.g., linear regression, logistic regression, decision trees, - k-means clustering, neural networks)\n- Feature engineering and feature selection\n- Model evaluation metrics (e.g., accuracy, precision, recall, F1-score)\n- Overfitting, underfitting, and regularization techniques\n- Deep learning and convolutional neural networks (CNNs)\n\nBy studying these Google-specific topics and understanding their relevance to the company's products and services, you will be better prepared for the interview process and demonstrate your alignment with Google's technology focus.\n\n## Timeline\n\n#### Week 1: Google's Culture and Values\n\nCompany history\nMission and vision\nCompany culture\nGoogle's values and principles\n\n#### Week 2: Google's Products and Services\n\nSearch Engine\nAndroid\nGoogle Cloud Platform\nG Suite (Google Workspace)\nGoogle Ads\n\n#### Week 3: Google's Software Engineering Practices\n\nCode review process\nTesting practices\nContinuous integration and deployment\nGoogle's programming languages (C++, Java, Python, Go, etc.)\n\n#### Week 4: Google's System Design and Infrastructure\n\nGoogle File System\nBigtable\nMapReduce\nSpanner\nTensorFlow\n\n#### Week 5: Google's Algorithms and Data Structures\n\nPageRank\nMapReduce Algorithms\nNeural Networks\nSearch Algorithms\n\n#### Week 6: Google's Interview Process and Tips\n\nResearch on Google's interview process\nBehavioral interview preparation\nTechnical interview preparation\nTips from Google engineers\n\n#### Week 7: Coding Challenges and Mock Interviews\n\nSolve Google-specific coding problems\nParticipate in mock interviews with a focus on Google's interview style\n\n#### Week 8: Review and Practice\n\nRevisit difficult topics\nContinue practicing coding problems related to Google-specific concepts\nAdditional mock interviews with a focus on Google's interview process\n\n![space](images/working-at-google-study-google-specifc-topics-hero.jpg)\n","source":"_posts/en/working-at-google-study-google-specifc-topics.md","raw":"---\ntitle: Working at Google - Study Google-Specific topics (part 4)\ndate: 2023-03-25 11:35:14\ntags: [google, software, interview]\nexcerpt: Reviewing the fundamentals is crucial for preparing for Google software interviews, as they form the foundation of your problem-solving skills.\nauthor: codesandtags\ncategory: FAANG\nthumbnail: images/faang-google-thumbnail.jpg\n---\n\nGoogle is known for its focus on large-scale systems, cutting-edge technologies, and innovative solutions. To prepare for Google software interviews, it's essential to study topics that are particularly relevant to the company. Here are some Google-specific topics you should familiarize yourself with:\n\n## Distributed systems:\n\nUnderstand the fundamental concepts and challenges associated with designing and implementing distributed systems, including:\n\n- Consistency models (e.g., eventual, strong, linearizability, sequential)\n- CAP theorem (Consistency, Availability, and Partition Tolerance)\n- Fault tolerance and replication (e.g., quorum, active/passive, active/active)\n- Scalability (e.g., horizontal, vertical, load balancing, sharding)\n- Data partitioning and sharding strategies\n- Messaging and communication patterns (e.g., publish-subscribe, message queues)\n- Consensus algorithms (e.g., Paxos, Raft)\n\n## Large-scale system design:\n\nDevelop the ability to design scalable and robust systems that can handle massive amounts of data and high levels of traffic. Key aspects to consider include:\n\n- Availability and reliability\n- Latency and performance optimization\n- Caching strategies (e.g., content delivery networks, cache eviction policies)\n- Data storage and retrieval (e.g., distributed databases, key-value stores)\n- Microservices architecture and API design\n- Monitoring, logging, and alerting\n\n## Google's infrastructure and technologies:\n\nFamiliarize yourself with Google's infrastructure and some of the technologies the company has developed, such as:\n\n- Bigtable (a distributed storage system for structured data)\n- Spanner (a globally-distributed, strongly consistent database)\n- MapReduce (a programming model for processing large datasets)\n- TensorFlow (an open-source machine learning framework)\n- Kubernetes (an open-source container orchestration system)\n- gRPC (a high-performance, open-source RPC framework)\n\n## Machine learning:\n\nGoogle is a leader in machine learning and artificial intelligence. While you may not be required to have in-depth knowledge unless you're applying for a specific machine learning role, it's helpful to understand basic concepts, such as:\n\n- Supervised, unsupervised, and reinforcement learning\n- Common algorithms (e.g., linear regression, logistic regression, decision trees, - k-means clustering, neural networks)\n- Feature engineering and feature selection\n- Model evaluation metrics (e.g., accuracy, precision, recall, F1-score)\n- Overfitting, underfitting, and regularization techniques\n- Deep learning and convolutional neural networks (CNNs)\n\nBy studying these Google-specific topics and understanding their relevance to the company's products and services, you will be better prepared for the interview process and demonstrate your alignment with Google's technology focus.\n\n## Timeline\n\n#### Week 1: Google's Culture and Values\n\nCompany history\nMission and vision\nCompany culture\nGoogle's values and principles\n\n#### Week 2: Google's Products and Services\n\nSearch Engine\nAndroid\nGoogle Cloud Platform\nG Suite (Google Workspace)\nGoogle Ads\n\n#### Week 3: Google's Software Engineering Practices\n\nCode review process\nTesting practices\nContinuous integration and deployment\nGoogle's programming languages (C++, Java, Python, Go, etc.)\n\n#### Week 4: Google's System Design and Infrastructure\n\nGoogle File System\nBigtable\nMapReduce\nSpanner\nTensorFlow\n\n#### Week 5: Google's Algorithms and Data Structures\n\nPageRank\nMapReduce Algorithms\nNeural Networks\nSearch Algorithms\n\n#### Week 6: Google's Interview Process and Tips\n\nResearch on Google's interview process\nBehavioral interview preparation\nTechnical interview preparation\nTips from Google engineers\n\n#### Week 7: Coding Challenges and Mock Interviews\n\nSolve Google-specific coding problems\nParticipate in mock interviews with a focus on Google's interview style\n\n#### Week 8: Review and Practice\n\nRevisit difficult topics\nContinue practicing coding problems related to Google-specific concepts\nAdditional mock interviews with a focus on Google's interview process\n\n![space](images/working-at-google-study-google-specifc-topics-hero.jpg)\n","slug":"en/working-at-google-study-google-specifc-topics","published":1,"updated":"2023-07-17T22:47:10.537Z","comments":1,"layout":"post","photos":[],"link":"2023/03/25/en/working-at-google-study-google-specifc-topics","_id":"clk8zxu12001d50t29lu6ckth","content":"<p>Google is known for its focus on large-scale systems, cutting-edge technologies, and innovative solutions. To prepare for Google software interviews, it’s essential to study topics that are particularly relevant to the company. Here are some Google-specific topics you should familiarize yourself with:</p>\n<h2 id=\"distributed-systems:\">Distributed systems:<a title=\"#distributed-systems:\" href=\"#distributed-systems:\"></a></h2>\n<p>Understand the fundamental concepts and challenges associated with designing and implementing distributed systems, including:</p>\n<ul>\n<li>Consistency models (e.g., eventual, strong, linearizability, sequential)</li>\n<li>CAP theorem (Consistency, Availability, and Partition Tolerance)</li>\n<li>Fault tolerance and replication (e.g., quorum, active/passive, active/active)</li>\n<li>Scalability (e.g., horizontal, vertical, load balancing, sharding)</li>\n<li>Data partitioning and sharding strategies</li>\n<li>Messaging and communication patterns (e.g., publish-subscribe, message queues)</li>\n<li>Consensus algorithms (e.g., Paxos, Raft)</li>\n</ul>\n<h2 id=\"large-scale-system-design:\">Large-scale system design:<a title=\"#large-scale-system-design:\" href=\"#large-scale-system-design:\"></a></h2>\n<p>Develop the ability to design scalable and robust systems that can handle massive amounts of data and high levels of traffic. Key aspects to consider include:</p>\n<ul>\n<li>Availability and reliability</li>\n<li>Latency and performance optimization</li>\n<li>Caching strategies (e.g., content delivery networks, cache eviction policies)</li>\n<li>Data storage and retrieval (e.g., distributed databases, key-value stores)</li>\n<li>Microservices architecture and API design</li>\n<li>Monitoring, logging, and alerting</li>\n</ul>\n<h2 id=\"google's-infrastructure-and-technologies:\">Google’s infrastructure and technologies:<a title=\"#google's-infrastructure-and-technologies:\" href=\"#google's-infrastructure-and-technologies:\"></a></h2>\n<p>Familiarize yourself with Google’s infrastructure and some of the technologies the company has developed, such as:</p>\n<ul>\n<li>Bigtable (a distributed storage system for structured data)</li>\n<li>Spanner (a globally-distributed, strongly consistent database)</li>\n<li>MapReduce (a programming model for processing large datasets)</li>\n<li>TensorFlow (an open-source machine learning framework)</li>\n<li>Kubernetes (an open-source container orchestration system)</li>\n<li>gRPC (a high-performance, open-source RPC framework)</li>\n</ul>\n<h2 id=\"machine-learning:\">Machine learning:<a title=\"#machine-learning:\" href=\"#machine-learning:\"></a></h2>\n<p>Google is a leader in machine learning and artificial intelligence. While you may not be required to have in-depth knowledge unless you’re applying for a specific machine learning role, it’s helpful to understand basic concepts, such as:</p>\n<ul>\n<li>Supervised, unsupervised, and reinforcement learning</li>\n<li>Common algorithms (e.g., linear regression, logistic regression, decision trees, - k-means clustering, neural networks)</li>\n<li>Feature engineering and feature selection</li>\n<li>Model evaluation metrics (e.g., accuracy, precision, recall, F1-score)</li>\n<li>Overfitting, underfitting, and regularization techniques</li>\n<li>Deep learning and convolutional neural networks (CNNs)</li>\n</ul>\n<p>By studying these Google-specific topics and understanding their relevance to the company’s products and services, you will be better prepared for the interview process and demonstrate your alignment with Google’s technology focus.</p>\n<h2 id=\"timeline\">Timeline<a title=\"#timeline\" href=\"#timeline\"></a></h2>\n<h4 id=\"week-1:-google's-culture-and-values\">Week 1: Google’s Culture and Values<a title=\"#week-1:-google's-culture-and-values\" href=\"#week-1:-google's-culture-and-values\"></a></h4>\n<p>Company history<br>\nMission and vision<br>\nCompany culture<br>\nGoogle’s values and principles</p>\n<h4 id=\"week-2:-google's-products-and-services\">Week 2: Google’s Products and Services<a title=\"#week-2:-google's-products-and-services\" href=\"#week-2:-google's-products-and-services\"></a></h4>\n<p>Search Engine<br>\nAndroid<br>\nGoogle Cloud Platform<br>\nG Suite (Google Workspace)<br>\nGoogle Ads</p>\n<h4 id=\"week-3:-google's-software-engineering-practices\">Week 3: Google’s Software Engineering Practices<a title=\"#week-3:-google's-software-engineering-practices\" href=\"#week-3:-google's-software-engineering-practices\"></a></h4>\n<p>Code review process<br>\nTesting practices<br>\nContinuous integration and deployment<br>\nGoogle’s programming languages (C++, Java, Python, Go, etc.)</p>\n<h4 id=\"week-4:-google's-system-design-and-infrastructure\">Week 4: Google’s System Design and Infrastructure<a title=\"#week-4:-google's-system-design-and-infrastructure\" href=\"#week-4:-google's-system-design-and-infrastructure\"></a></h4>\n<p>Google File System<br>\nBigtable<br>\nMapReduce<br>\nSpanner<br>\nTensorFlow</p>\n<h4 id=\"week-5:-google's-algorithms-and-data-structures\">Week 5: Google’s Algorithms and Data Structures<a title=\"#week-5:-google's-algorithms-and-data-structures\" href=\"#week-5:-google's-algorithms-and-data-structures\"></a></h4>\n<p>PageRank<br>\nMapReduce Algorithms<br>\nNeural Networks<br>\nSearch Algorithms</p>\n<h4 id=\"week-6:-google's-interview-process-and-tips\">Week 6: Google’s Interview Process and Tips<a title=\"#week-6:-google's-interview-process-and-tips\" href=\"#week-6:-google's-interview-process-and-tips\"></a></h4>\n<p>Research on Google’s interview process<br>\nBehavioral interview preparation<br>\nTechnical interview preparation<br>\nTips from Google engineers</p>\n<h4 id=\"week-7:-coding-challenges-and-mock-interviews\">Week 7: Coding Challenges and Mock Interviews<a title=\"#week-7:-coding-challenges-and-mock-interviews\" href=\"#week-7:-coding-challenges-and-mock-interviews\"></a></h4>\n<p>Solve Google-specific coding problems<br>\nParticipate in mock interviews with a focus on Google’s interview style</p>\n<h4 id=\"week-8:-review-and-practice\">Week 8: Review and Practice<a title=\"#week-8:-review-and-practice\" href=\"#week-8:-review-and-practice\"></a></h4>\n<p>Revisit difficult topics<br>\nContinue practicing coding problems related to Google-specific concepts<br>\nAdditional mock interviews with a focus on Google’s interview process</p>\n<p><img src=\"images/working-at-google-study-google-specifc-topics-hero.jpg\" alt=\"space\" loading=\"lazy\" class=\"φbp\"></p>\n","site":{"data":{}},"more":"<p>Google is known for its focus on large-scale systems, cutting-edge technologies, and innovative solutions. To prepare for Google software interviews, it’s essential to study topics that are particularly relevant to the company. Here are some Google-specific topics you should familiarize yourself with:</p>\n<h2 id=\"distributed-systems:\">Distributed systems:<a title=\"#distributed-systems:\" href=\"#distributed-systems:\"></a></h2>\n<p>Understand the fundamental concepts and challenges associated with designing and implementing distributed systems, including:</p>\n<ul>\n<li>Consistency models (e.g., eventual, strong, linearizability, sequential)</li>\n<li>CAP theorem (Consistency, Availability, and Partition Tolerance)</li>\n<li>Fault tolerance and replication (e.g., quorum, active/passive, active/active)</li>\n<li>Scalability (e.g., horizontal, vertical, load balancing, sharding)</li>\n<li>Data partitioning and sharding strategies</li>\n<li>Messaging and communication patterns (e.g., publish-subscribe, message queues)</li>\n<li>Consensus algorithms (e.g., Paxos, Raft)</li>\n</ul>\n<h2 id=\"large-scale-system-design:\">Large-scale system design:<a title=\"#large-scale-system-design:\" href=\"#large-scale-system-design:\"></a></h2>\n<p>Develop the ability to design scalable and robust systems that can handle massive amounts of data and high levels of traffic. Key aspects to consider include:</p>\n<ul>\n<li>Availability and reliability</li>\n<li>Latency and performance optimization</li>\n<li>Caching strategies (e.g., content delivery networks, cache eviction policies)</li>\n<li>Data storage and retrieval (e.g., distributed databases, key-value stores)</li>\n<li>Microservices architecture and API design</li>\n<li>Monitoring, logging, and alerting</li>\n</ul>\n<h2 id=\"google's-infrastructure-and-technologies:\">Google’s infrastructure and technologies:<a title=\"#google's-infrastructure-and-technologies:\" href=\"#google's-infrastructure-and-technologies:\"></a></h2>\n<p>Familiarize yourself with Google’s infrastructure and some of the technologies the company has developed, such as:</p>\n<ul>\n<li>Bigtable (a distributed storage system for structured data)</li>\n<li>Spanner (a globally-distributed, strongly consistent database)</li>\n<li>MapReduce (a programming model for processing large datasets)</li>\n<li>TensorFlow (an open-source machine learning framework)</li>\n<li>Kubernetes (an open-source container orchestration system)</li>\n<li>gRPC (a high-performance, open-source RPC framework)</li>\n</ul>\n<h2 id=\"machine-learning:\">Machine learning:<a title=\"#machine-learning:\" href=\"#machine-learning:\"></a></h2>\n<p>Google is a leader in machine learning and artificial intelligence. While you may not be required to have in-depth knowledge unless you’re applying for a specific machine learning role, it’s helpful to understand basic concepts, such as:</p>\n<ul>\n<li>Supervised, unsupervised, and reinforcement learning</li>\n<li>Common algorithms (e.g., linear regression, logistic regression, decision trees, - k-means clustering, neural networks)</li>\n<li>Feature engineering and feature selection</li>\n<li>Model evaluation metrics (e.g., accuracy, precision, recall, F1-score)</li>\n<li>Overfitting, underfitting, and regularization techniques</li>\n<li>Deep learning and convolutional neural networks (CNNs)</li>\n</ul>\n<p>By studying these Google-specific topics and understanding their relevance to the company’s products and services, you will be better prepared for the interview process and demonstrate your alignment with Google’s technology focus.</p>\n<h2 id=\"timeline\">Timeline<a title=\"#timeline\" href=\"#timeline\"></a></h2>\n<h4 id=\"week-1:-google's-culture-and-values\">Week 1: Google’s Culture and Values<a title=\"#week-1:-google's-culture-and-values\" href=\"#week-1:-google's-culture-and-values\"></a></h4>\n<p>Company history<br>\nMission and vision<br>\nCompany culture<br>\nGoogle’s values and principles</p>\n<h4 id=\"week-2:-google's-products-and-services\">Week 2: Google’s Products and Services<a title=\"#week-2:-google's-products-and-services\" href=\"#week-2:-google's-products-and-services\"></a></h4>\n<p>Search Engine<br>\nAndroid<br>\nGoogle Cloud Platform<br>\nG Suite (Google Workspace)<br>\nGoogle Ads</p>\n<h4 id=\"week-3:-google's-software-engineering-practices\">Week 3: Google’s Software Engineering Practices<a title=\"#week-3:-google's-software-engineering-practices\" href=\"#week-3:-google's-software-engineering-practices\"></a></h4>\n<p>Code review process<br>\nTesting practices<br>\nContinuous integration and deployment<br>\nGoogle’s programming languages (C++, Java, Python, Go, etc.)</p>\n<h4 id=\"week-4:-google's-system-design-and-infrastructure\">Week 4: Google’s System Design and Infrastructure<a title=\"#week-4:-google's-system-design-and-infrastructure\" href=\"#week-4:-google's-system-design-and-infrastructure\"></a></h4>\n<p>Google File System<br>\nBigtable<br>\nMapReduce<br>\nSpanner<br>\nTensorFlow</p>\n<h4 id=\"week-5:-google's-algorithms-and-data-structures\">Week 5: Google’s Algorithms and Data Structures<a title=\"#week-5:-google's-algorithms-and-data-structures\" href=\"#week-5:-google's-algorithms-and-data-structures\"></a></h4>\n<p>PageRank<br>\nMapReduce Algorithms<br>\nNeural Networks<br>\nSearch Algorithms</p>\n<h4 id=\"week-6:-google's-interview-process-and-tips\">Week 6: Google’s Interview Process and Tips<a title=\"#week-6:-google's-interview-process-and-tips\" href=\"#week-6:-google's-interview-process-and-tips\"></a></h4>\n<p>Research on Google’s interview process<br>\nBehavioral interview preparation<br>\nTechnical interview preparation<br>\nTips from Google engineers</p>\n<h4 id=\"week-7:-coding-challenges-and-mock-interviews\">Week 7: Coding Challenges and Mock Interviews<a title=\"#week-7:-coding-challenges-and-mock-interviews\" href=\"#week-7:-coding-challenges-and-mock-interviews\"></a></h4>\n<p>Solve Google-specific coding problems<br>\nParticipate in mock interviews with a focus on Google’s interview style</p>\n<h4 id=\"week-8:-review-and-practice\">Week 8: Review and Practice<a title=\"#week-8:-review-and-practice\" href=\"#week-8:-review-and-practice\"></a></h4>\n<p>Revisit difficult topics<br>\nContinue practicing coding problems related to Google-specific concepts<br>\nAdditional mock interviews with a focus on Google’s interview process</p>\n<p><img src=\"images/working-at-google-study-google-specifc-topics-hero.jpg\" alt=\"space\" loading=\"lazy\" class=\"φbp\"></p>\n","date_formatted":{"ll":"Mar 25, 2023","L":"03/25/2023","MM-DD":"03-25"},"plink":"http://codesandtags.io/blog/2023/03/25/en/working-at-google-study-google-specifc-topics/","type":"post","toc":[{"id":"distributed-systems:","title":"Distributed systems:","index":"1"},{"id":"large-scale-system-design:","title":"Large-scale system design:","index":"2"},{"id":"google's-infrastructure-and-technologies:","title":"Google’s infrastructure and technologies:","index":"3"},{"id":"machine-learning:","title":"Machine learning:","index":"4"},{"id":"timeline","title":"Timeline","index":"5"}],"reading_time":"556 words in 4 min"}],"PostAsset":[],"PostCategory":[{"post_id":"clk8zxu0n000650t2he6v7b0y","category_id":"clk8zxu0j000350t2arh49a42","_id":"clk8zxu0s000d50t27vkc9de6"},{"post_id":"clk8zxu0e000150t2h1de0awd","category_id":"clk8zxu0j000350t2arh49a42","_id":"clk8zxu0u000g50t2abhofbrf"},{"post_id":"clk8zxu0o000750t2e8wj0tsu","category_id":"clk8zxu0j000350t2arh49a42","_id":"clk8zxu0u000h50t2f20qenj0"},{"post_id":"clk8zxu0q000b50t2gwmp6z1v","category_id":"clk8zxu0j000350t2arh49a42","_id":"clk8zxu0v000j50t278ha5qxp"},{"post_id":"clk8zxu0i000250t2bnsa44n1","category_id":"clk8zxu0o000850t2804rhhx0","_id":"clk8zxu0v000l50t24ktm4q0o"},{"post_id":"clk8zxu0r000c50t23yrafs1z","category_id":"clk8zxu0j000350t2arh49a42","_id":"clk8zxu0v000o50t212iucguf"},{"post_id":"clk8zxu0m000550t2g1xi8fe0","category_id":"clk8zxu0j000350t2arh49a42","_id":"clk8zxu0w000q50t20ihs0j0m"},{"post_id":"clk8zxu11001c50t26zpb1nto","category_id":"clk8zxu0j000350t2arh49a42","_id":"clk8zxu13001g50t2d0in5lbr"},{"post_id":"clk8zxu12001d50t29lu6ckth","category_id":"clk8zxu0j000350t2arh49a42","_id":"clk8zxu13001i50t2bbs3ghrf"}],"PostTag":[{"post_id":"clk8zxu0e000150t2h1de0awd","tag_id":"clk8zxu0l000450t2h76objmg","_id":"clk8zxu0q000a50t224hr5ukp"},{"post_id":"clk8zxu0i000250t2bnsa44n1","tag_id":"clk8zxu0p000950t222rb50qi","_id":"clk8zxu0v000k50t24fbvhyil"},{"post_id":"clk8zxu0i000250t2bnsa44n1","tag_id":"clk8zxu0s000f50t26ofw22ub","_id":"clk8zxu0v000m50t2hi30ap7m"},{"post_id":"clk8zxu0m000550t2g1xi8fe0","tag_id":"clk8zxu0l000450t2h76objmg","_id":"clk8zxu0w000p50t25d4k293h"},{"post_id":"clk8zxu0n000650t2he6v7b0y","tag_id":"clk8zxu0v000n50t2e7mmbiue","_id":"clk8zxu0x000t50t2h3ks3sd0"},{"post_id":"clk8zxu0n000650t2he6v7b0y","tag_id":"clk8zxu0w000r50t2b17og5fi","_id":"clk8zxu0x000u50t2333a740n"},{"post_id":"clk8zxu0n000650t2he6v7b0y","tag_id":"clk8zxu0l000450t2h76objmg","_id":"clk8zxu0x000w50t2f7ib1sjo"},{"post_id":"clk8zxu0o000750t2e8wj0tsu","tag_id":"clk8zxu0v000n50t2e7mmbiue","_id":"clk8zxu0y000z50t2f58x19ug"},{"post_id":"clk8zxu0o000750t2e8wj0tsu","tag_id":"clk8zxu0w000r50t2b17og5fi","_id":"clk8zxu0y001050t2btb6dg31"},{"post_id":"clk8zxu0o000750t2e8wj0tsu","tag_id":"clk8zxu0l000450t2h76objmg","_id":"clk8zxu0y001250t2hzgv9si6"},{"post_id":"clk8zxu0o000750t2e8wj0tsu","tag_id":"clk8zxu0x000x50t27jsdbkte","_id":"clk8zxu0y001350t2fo7e96up"},{"post_id":"clk8zxu0q000b50t2gwmp6z1v","tag_id":"clk8zxu0v000n50t2e7mmbiue","_id":"clk8zxu0z001550t2392v2tct"},{"post_id":"clk8zxu0q000b50t2gwmp6z1v","tag_id":"clk8zxu0w000r50t2b17og5fi","_id":"clk8zxu0z001650t21hp9aydm"},{"post_id":"clk8zxu0q000b50t2gwmp6z1v","tag_id":"clk8zxu0l000450t2h76objmg","_id":"clk8zxu0z001850t207hd6pdh"},{"post_id":"clk8zxu0r000c50t23yrafs1z","tag_id":"clk8zxu0v000n50t2e7mmbiue","_id":"clk8zxu0z001950t25j8mhq29"},{"post_id":"clk8zxu0r000c50t23yrafs1z","tag_id":"clk8zxu0w000r50t2b17og5fi","_id":"clk8zxu0z001a50t2fpq15vi6"},{"post_id":"clk8zxu0r000c50t23yrafs1z","tag_id":"clk8zxu0l000450t2h76objmg","_id":"clk8zxu10001b50t212bocyqe"},{"post_id":"clk8zxu11001c50t26zpb1nto","tag_id":"clk8zxu0v000n50t2e7mmbiue","_id":"clk8zxu13001e50t247tofcdu"},{"post_id":"clk8zxu11001c50t26zpb1nto","tag_id":"clk8zxu0w000r50t2b17og5fi","_id":"clk8zxu13001f50t2gsff99tg"},{"post_id":"clk8zxu11001c50t26zpb1nto","tag_id":"clk8zxu0l000450t2h76objmg","_id":"clk8zxu13001h50t2gf7gcrlw"},{"post_id":"clk8zxu12001d50t29lu6ckth","tag_id":"clk8zxu0v000n50t2e7mmbiue","_id":"clk8zxu13001j50t26yhv4xx5"},{"post_id":"clk8zxu12001d50t29lu6ckth","tag_id":"clk8zxu0w000r50t2b17og5fi","_id":"clk8zxu14001k50t22k4d8puq"},{"post_id":"clk8zxu12001d50t29lu6ckth","tag_id":"clk8zxu0l000450t2h76objmg","_id":"clk8zxu14001l50t25mj5hafa"}],"Tag":[{"name":"interview","_id":"clk8zxu0l000450t2h76objmg"},{"name":"software-architecture","_id":"clk8zxu0p000950t222rb50qi"},{"name":"books","_id":"clk8zxu0s000f50t26ofw22ub"},{"name":"google","_id":"clk8zxu0v000n50t2e7mmbiue"},{"name":"software","_id":"clk8zxu0w000r50t2b17og5fi"},{"name":"leetcode","_id":"clk8zxu0x000x50t27jsdbkte"}]}}